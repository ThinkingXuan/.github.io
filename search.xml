<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>机器学习1</title>
    <url>/2020/06/01/ML/study_1/</url>
    <content><![CDATA[<h2 id="第一章-机器学习的基本概念"><a href="#第一章-机器学习的基本概念" class="headerlink" title="第一章 机器学习的基本概念"></a>第一章 机器学习的基本概念</h2><h3 id="1-机器学习方法的流程"><a href="#1-机器学习方法的流程" class="headerlink" title="1.机器学习方法的流程"></a>1.机器学习方法的流程</h3><p>以有监督学习方法为例：</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601145043823.png" data-fancybox="group" data-caption="image-20200601145043823" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601145043823.png" alt="image-20200601145043823" title="image-20200601145043823"></a></p>
<h3 id="2-输入空间和输出空间"><a href="#2-输入空间和输出空间" class="headerlink" title="2.输入空间和输出空间"></a>2.输入空间和输出空间</h3><p>输入空间（Input Space）: 所有可能的输入集合</p>
<p>输出空间（Output Space）： 所有可能的输出集合</p>
<p>例：</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601145910851.png" data-fancybox="group" data-caption="image-20200601145910851" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601145910851.png" alt="image-20200601145910851" title="image-20200601145910851"></a></p>
<p>左图：父亲身高为输入空间，儿子身高为输出空间</p>
<p>右图：除Survived特征外，其他都为输入空间，是一个多维的。Survived为输出空间。</p>
<ul>
<li>输入空间和输出空间可以是有限元素的集合，也可以是整个欧式空间</li>
<li>输入空间和输出空间可以是连续值集合，也可以是离散值集合</li>
<li>输入空间和输出空间可以是同一个空间，也可以是不同的空间</li>
<li>通常输出空间会比输入空间小</li>
</ul>
<h3 id="3-特征空间"><a href="#3-特征空间" class="headerlink" title="3.特征空间"></a>3.特征空间</h3><p><strong>特征（Feature）</strong>:  即属性。每个输入实例的各个组成部分（属性）称作原始特征，基于原始特征还可以拓展出更多的衍生特征。</p>
<p><strong>特征向量（Feature Vector）</strong>：由多个特征组成的集合。</p>
<p><strong>特征空间（Feature Space）</strong>:  将特征向量存在的空间称作特征空间。</p>
<p>例：<a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601151409203.png" data-fancybox="group" data-caption="image-20200601151409203" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601151409203.png" alt="image-20200601151409203" title="image-20200601151409203"></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601170344843.png" data-fancybox="group" data-caption="image-20200601170344843" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601170344843.png" alt="image-20200601170344843" title="image-20200601170344843"></a></p>
<p><strong>特征空间为特征向量的所有取值。</strong></p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601171207052.png" data-fancybox="group" data-caption="image-20200601171207052" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601171207052.png" alt="image-20200601171207052" title="image-20200601171207052"></a></p>
<p><strong>C_level为Fare的衍生特征。</strong></p>
<p>总结：</p>
<ul>
<li>特征空间中每一维都对应了一个特征（属性）</li>
<li>特征空间可以和输入空间相同，也可以不同（比如有衍生特征时）</li>
<li>需将实例从输入空间映射到特征空间（比如有衍生特征时）</li>
<li>模型实际上是定义于特征空间之上的</li>
</ul>
<h3 id="4-假设空间"><a href="#4-假设空间" class="headerlink" title="4.假设空间"></a>4.假设空间</h3><p>假设空间（Hypothesis Space）: 由输入空间到输出空间的映射的集合。</p>
<p>其他定义：<a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601194855182.png" data-fancybox="group" data-caption="image-20200601194855182" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601194855182.png" alt="image-20200601194855182" title="image-20200601194855182"></a></p>
<p>例：</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601195404863.png" data-fancybox="group" data-caption="image-20200601195404863" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601195404863.png" alt="image-20200601195404863" title="image-20200601195404863"></a></p>
<p><strong>针对每一种可能的输入，都能找到一个映射，对应了输出空间的每个输出。如下</strong></p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601195735349.png" data-fancybox="group" data-caption="image-20200601195735349" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601195735349.png" alt="image-20200601195735349" title="image-20200601195735349"></a></p>
<p>算一个总共可能出现的假设hi个数：</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601200040913.png" data-fancybox="group" data-caption="image-20200601200040913" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601200040913.png" alt="image-20200601200040913" title="image-20200601200040913"></a></p>
<p>其中M为输出空间中每个取值的个数。举例如下：</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601200311818.png" data-fancybox="group" data-caption="image-20200601200311818" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601200311818.png" alt="image-20200601200311818" title="image-20200601200311818"></a></p>
<h2 id="第二章-机器学习方法的三要素"><a href="#第二章-机器学习方法的三要素" class="headerlink" title="第二章 机器学习方法的三要素"></a>第二章 机器学习方法的三要素</h2><p>机器学习方法通常都是由模型、策略和算法三部分构成：<strong>方法= 模型+策略+算法</strong></p>
<p>模型：输入空间到输出空间的映射关系。学习过程即为从假设空间中搜索适合当前数据的假设。</p>
<p>策略：从假设空间众多的假设中选择到最优的模型的学习标准或准则。</p>
<p>算法：学习模型的具体的计算方法，通常是求最优化问题。</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601201110483.png" data-fancybox="group" data-caption="image-20200601201110483" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601201110483.png" alt="image-20200601201110483" title="image-20200601201110483"></a></p>
<h3 id="1-模型"><a href="#1-模型" class="headerlink" title="1.模型"></a>1.模型</h3><p><strong>模型：</strong>输入空间到输出空间的映射关系。学习过程即为从假设空间中搜索适合当前数据的假设。</p>
<p>分析当前需要解决的问题，确定模型。</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601201347652.png" data-fancybox="group" data-caption="image-20200601201347652" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601201347652.png" alt="image-20200601201347652" title="image-20200601201347652"></a></p>
<h3 id="2-策略"><a href="#2-策略" class="headerlink" title="2.策略"></a>2.策略</h3><p><strong>策略：</strong>从假设空间众多的假设中选择到最优的模型的学习标准或准则。</p>
<p>要从假设空间中选择一个最适合的模型出来，需要解决一下问题：</p>
<ul>
<li>评估某个模型对单个训练样本的效果</li>
<li>评估某个模型对训练集的整体效果</li>
<li>评估某个模型对包括训练集、预测集在内的所有数据的整体效果</li>
</ul>
<p>定义几个指标来衡量上述问题：</p>
<ul>
<li>损失函数：0-1损失函数、平方损失函数、绝对值损失函数、对数损失函数等</li>
<li>风险函数：经验风险、期望风险、结构风险</li>
</ul>
<p>基本策略</p>
<ul>
<li>经验风险最小（EMR：<em>Empirical Risk Minimization</em>）</li>
<li>结构风险最小  (SRM：<em>Structural Risk Minimization</em>)</li>
</ul>
<h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><p><strong>损失函数</strong>（<em>Loss Function</em>）: 用来衡量预测结果和真实结果之间的差距，其值越小，代表预测结果和真实结果越一致。通常是一个非负实值函数。通过各种方式缩小损失函数的过程被称作<strong>优化</strong>。损失函数几座<code>L(Y，f(x))</code>。 <code>Y</code>:真实值   <code>f(x)</code>:模型预测取值</p>
<p><strong>0-1损失函数（0-1 LF）:</strong> 预测值和实际值精确相等则 ”没有损失“为<strong>0</strong>，否则意味着”完全损失“，为<strong>1</strong>预测值和实际值精确相等有些过于严格，可以采用两者的差小于某个阈值的方式。</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601204416698.png" data-fancybox="group" data-caption="image-20200601204416698" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601204416698.png" alt="image-20200601204416698" title="image-20200601204416698"></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601204308912.png" data-fancybox="group" data-caption="image-20200601204308912" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601204308912.png" alt="image-20200601204308912" title="image-20200601204308912"></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601204559097.png" data-fancybox="group" data-caption="image-20200601204559097" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601204559097.png" alt="image-20200601204559097" title="image-20200601204559097"></a></p>
<p><strong>绝对值损失函数</strong>（<em>Absolute LF</em>）：预测结果与真实结果差的绝对值，简单易懂，但是计算不方便</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601204838705.png" data-fancybox="group" data-caption="image-20200601204838705" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601204838705.png" alt="image-20200601204838705" title="image-20200601204838705"></a></p>
<p><strong>平方损失函数</strong>（<em>Quadratic LF</em>）：预测结果与真实结果差的平方。</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601205144765.png" data-fancybox="group" data-caption="image-20200601205144765" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601205144765.png" alt="image-20200601205144765" title="image-20200601205144765"></a></p>
<p>平方损失函数优势有：</p>
<ul>
<li>每个样本的误差都有正的，累加不会被抵消</li>
<li>平方对于大误差的惩罚大于小误差</li>
<li>数据计算简单、友好，倒数为一次函数</li>
</ul>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601205536049.png" data-fancybox="group" data-caption="image-20200601205536049" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601205536049.png" alt="image-20200601205536049" title="image-20200601205536049"></a></p>
<p>对数损失函数（Logarithmic LF）或对数似然损失函数（log-likehood loss function）: 对数函数具有单调性，在求最优化问题时，结果与原始目标一致。可以将乘法转换化为加法，简化计算：</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601205909808.png" data-fancybox="group" data-caption="image-20200601205909808" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601205909808.png" alt="image-20200601205909808" title="image-20200601205909808"></a></p>
<p><strong>指数损失函数</strong>（<em>Exponential LF</em>）：单调性、非负性的优良性质，使得越接近正确结果误差越小。</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601210138878.png" data-fancybox="group" data-caption="image-20200601210138878" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601210138878.png" alt="image-20200601210138878" title="image-20200601210138878"></a></p>
<p><strong>折页损失函数</strong>（<em>Linge LF</em>）:也称铰链损失，对于判断边界附近的点的惩罚力度较高，常用于SVM</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601210307350.png" data-fancybox="group" data-caption="image-20200601210307350" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601210307350.png" alt="image-20200601210307350" title="image-20200601210307350"></a></p>
<p>总结：</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601210327202.png" data-fancybox="group" data-caption="image-20200601210327202" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601210327202.png" alt="image-20200601210327202" title="image-20200601210327202"></a></p>
<h4 id="经验风险-vs-风险函数"><a href="#经验风险-vs-风险函数" class="headerlink" title="经验风险 vs 风险函数"></a>经验风险 vs 风险函数</h4><p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601211304511.png" data-fancybox="group" data-caption="image-20200601211304511" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601211304511.png" alt="image-20200601211304511" title="image-20200601211304511"></a></p>
<p>在样本较小时，仅关注经验风险，很容易导致过拟合。</p>
<p><strong>过拟合</strong>：对当前数据预测效果很好，但是对新数据的预测比较差。</p>
<p>例：</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601212241046.png" data-fancybox="group" data-caption="image-20200601212241046" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601212241046.png" alt="image-20200601212241046" title="image-20200601212241046"></a></p>
<p>如下图所示：样本集分为训练集合预测集，分别对训练集进行一次，二次，四次，六次模型构建，统计损失，然后在利用模型识别预测集，统计损失。由结果可知，四次和六次模型，发生了严重的过拟合。</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601212625401.png" data-fancybox="group" data-caption="image-20200601212625401" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601212625401.png" alt="image-20200601212625401" title="image-20200601212625401"></a></p>
<h4 id="结构风险"><a href="#结构风险" class="headerlink" title="结构风险"></a>结构风险</h4><p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601213414143.png" data-fancybox="group" data-caption="image-20200601213414143" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601213414143.png" alt="image-20200601213414143" title="image-20200601213414143"></a></p>
<h4 id="正则化项"><a href="#正则化项" class="headerlink" title="正则化项"></a>正则化项</h4><p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601214147463.png" data-fancybox="group" data-caption="image-20200601214147463" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601214147463.png" alt="image-20200601214147463" title="image-20200601214147463"></a></p>
<p>惩罚项中的累加函数代表参数的个数。</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601214753870.png" data-fancybox="group" data-caption="image-20200601214753870" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601214753870.png" alt="image-20200601214753870" title="image-20200601214753870"></a></p>
<h4 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h4><p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601214957122.png" data-fancybox="group" data-caption="image-20200601214957122" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601214957122.png" alt="image-20200601214957122" title="image-20200601214957122"></a></p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601215032422.png" data-fancybox="group" data-caption="image-20200601215032422" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200601215032422.png" alt="image-20200601215032422" title="image-20200601215032422"></a></p>
]]></content>
      <categories>
        <category>ML</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统试题4</title>
    <url>/2020/03/28/OS/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F4/</url>
    <content><![CDATA[<h2 id="一．思考题"><a href="#一．思考题" class="headerlink" title="一．思考题"></a>一．思考题</h2><ol>
<li><p><strong>什么是进程？计算机操作系统中为什么引入进程？</strong></p>
<p>进程的定义：进程是一个可并发执行的具有独立功能的程序关于某个数据集合的一次执行过程，也是操作系统进行资源分配和保护的基本单位。引入进程的原因：一是刻画系统的动态性，发挥系统的并发性，提高资源利用率。二是解决共享性，正确描述程序的执行状态。</p>
</li>
<li><p><strong>进程最基本的状态有哪些？哪些事件可能引起不同状态之间的转换？</strong></p>
<p>进程最基本的状态有三种：</p>
<pre><code>    运行态：进程占有处理器正在运行。
    就绪态：进程具备运行条件，等待系统分配处理器以便运行。
    等待态：又称为阻塞态或睡眠态，指进程不具备运行条件，正在等待某个事件的完成。
</code></pre><p>进程状态转换的具体原因：<br>运行态→等待态 等待使用资源或某事件发生，如等待外设传输、等待人工干预。<br>等待态→就绪态 资源得到满足或某事件已经发生，如外设传输结束；人工干预完成。<br>运行态→就绪态 运行时间片到，或出现有更高优先权进程。<br>就绪态→运行态 CPU 空闲时被调度选中一个就绪进程执行。</p>
</li>
<li><p><strong>叙述组成进程的基本要素，并说明它的作用。</strong></p>
<p>每个进程有4 个要素组成：控制块、程序块、数据块和堆栈。<br>（1）进程控制块 每一个进程都将捆绑一个进程控制块，用来存储进程的标志信息、现场信息和控制信息。进        程创建时建立进程控制块，进程撤销时回收进程控制块，它与进程一一对应。<br>（2）进程程序块 即被执行的程序，规定了进程一次运行应完成的功能。通常它是纯代码，作为一种系统资源               可被多个进程共享。</p>
<p>（3）进程数据块 即程序运行时加工处理对象，包括全局变量、局部变量和常量等的存放区以及开辟的工作        区，常常为一个进程专用。<br>（4）系统/用户堆栈 每一个进程都将捆绑一个系统/用户堆栈，用来存储进程的标志信息、现场信息和控制信        息。进程创建时建立进程控制块，进程撤销时回收进程控制块，它与进程一一对应。</p>
</li>
<li><p><strong>什么是进程的上下文？简述其主要内容。</strong></p>
<p>操作系统中把进程物理实体和支持进程运行的环境合称为进程上下文（ processcontext）。<br>它包括三个组成部分：<br>（1）用户级上下文（user-level context）。 由用户进程的程序块、用户数据块（含共享数据块）和用户堆栈组成的进程地址空间。<br>（2）系统级上下文（system-level context）。包括进程控制块、内存管理信息、进程环境块，以及系统堆栈等组成的进程地址空间。<br>（3）寄存器上下文（register context）。由程序状态字寄存器、各类控制寄存器、地址寄存器、通用寄存器、用户栈指针等组成。</p>
</li>
<li><p><strong>试从调度、并发性、拥有资源和系统开销四个方面对传统进程和线程进行比较。</strong></p>
<p>|          | 线程                                                         | 进程                                                         |<br>| :———- | :—————————————————————————————- | :—————————————————————————————- |<br>| 调度     | 是操作系统中的基本调度和分派<br>单位，具有唯一的标识符和线程控<br>制块。 | 进程具有独立的虚地址空间，以进<br>程为单位进行任务调度，系统必须<br>交换地址空间，切换时间长。 |<br>| 并发性   | 同一进程的多个线程可在一个/多<br>个处理器上并发或并行地执行 | 许多多任务操作系统限制用户能<br>拥有的最大进程数目，这对许多并<br>发应用来说是不够的。 |<br>| 拥有资源 | 同一进程的所有线程共享但不拥<br>有进程的状态和资源，且驻留在进<br>程的同一个主存地址空间中，可以<br>访问相同的数据，通信和同步的实<br>现十分方便。 | 是系统中资源分配和保护的基本<br>单位，也是系统调度的独立单位。<br>每个进程都可以各自独立的速度<br>在CPU 上推进。 |<br>| 系统开销 | 作为系统调度和分派的基本单位，<br>会被频繁地调度和切换。同一进程<br>中的多线程共享同一地址空间，能<br>使线程快速切换。 | 对多个进程的管理（创建、调度、<br>终止等）系统开销大，如响应客户<br>请求建立一个新的服务进程的服<br>务器应用中，创建的开销比较显<br>著。 |</p>
</li>
<li><p><strong>什么是内核级线程、用户级线程和混合式线程？对它们进行比较。</strong></p>
<p>内核级线程    线程管理的所有工作由操作系统内核来做。<br>优点：（1）在多处理器上，内核能够同时调度同一进程中多个线程并行执行；（2）若其中的一个线程被阻塞了，内核能调度同一进程的其它线程占有处理器并运行，也可以运行其它进程中的线程。（3）由于内核线程仅有很小的数据结构和堆栈，KLT 的切换比较快，内核自身也可以用多线程技术实现，从而，能提高系统的执行速度和效率。</p>
<p>缺点：应用程序线程在用户态运行，而线程调度和管理在内核实现，在同一进程中，控制权从一个线程传送到另一个线程时需要用户态——内核态——用户态的模式切换，系统开销较大。</p>
<p>用户级线程    线程管理的全部工作都由应用程序来做，在用户空间内实现，内核是不知道线程的存在的。<br>优点：（1）线程切换不需要内核特权方式。（2）按应用特定需要允许进程选择调度算法。<br>缺点：（1）在传统的基于进程操作系统中，大多数系统调用将阻塞进程。（2）在纯ULT 中，多线程应用不能利用多重处理的优点。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统试题3</title>
    <url>/2020/03/27/OS/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F3/</url>
    <content><![CDATA[<h2 id="一．思考题"><a href="#一．思考题" class="headerlink" title="一．思考题"></a>一．思考题</h2><ol>
<li><p><strong>什么是操作系统？计算机系统中配置操作系统的主要目标是什么？</strong></p>
<p>答：操作系统是管理系统资源、控制程序执行、改善人机界面、提供各种服务，合<br>理组织计算机工作流程和为用户有效使用计算机提供良好运行环境的一种系统软件。<br>配置操作系统的主要目标可归结为：<br>(1) 方便用户使用  (2) 扩大机器功能  (3) 管理系统资源  (4) 提高系统效率   (5) 构筑开<br>放环境。</p>
</li>
<li><p><strong>操作系统要为用户提供哪些基本和共性的服务？</strong></p>
<p>答：操作系统提供给程序和用户的共性服务大致有：</p>
<p> (1) 创建程序  (2) 执行程序  (3) 数据I/O   (4) 信息存取  (5) 通信服务  (6) 错误检测和处理</p>
</li>
<li><p><strong>试叙述系统调用的实现原理。</strong><br>答（p28）系统调用的实现有以下几点：⑴编写系统调用处理程序 ⑵设计一张系统调用<br>入口地址表，每个入口地址都指向一个系统调用的处理程序，有的系统还包含系统调用<br>自带参数的个数 ⑶陷入处理机制，需开辟现场保护，以保存发生系统调用时的处理器<br>现场。</p>
</li>
<li><p><strong>试叙述系统调用与过程调用的主要区别。</strong><br>答（p29）⑴调用形式不同 ⑵被调用代码的位置不同 ⑶提供方式不同 ⑷调用的实现不<br>同</p>
</li>
</ol>
<p>二．应用题</p>
<ol>
<li><p>一个计算机系统，有一台输入机和一台打印机，现有两道程序投入运行，且程序A先开始做，程序B 后开始运行。程序A 的运行轨迹为：计算50ms、打印100ms、再计算50ms、打印100ms，结束。程序B 的运行轨迹为：计算50ms、输入80ms、再计算100ms，结束。试说明：</p>
<p> (1) 两道程序运行时，CPU 有无空闲等待？若有，在哪段时间内等待？为什么会等待？</p>
<p> (2) 程序A、B 有无等待CPU 的情况？若有，指出发生等待的时刻。</p>
<p>答：画出两道程序并发执行图如下：</p>
</li>
</ol>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200327175604466.png" data-fancybox="group" data-caption="image-20200327175604466" class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/image-20200327175604466.png" alt="image-20200327175604466" title="image-20200327175604466"></a></p>
<p>(1) 两道程序运行期间，CPU 存在空闲等待，时间为100 至150ms 之间<br>(2) 程序A 无等待现象，但程序B 有等待。， 程序B 在0~50ms 时存在等待、180ms 至200ms 时存在等待。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统试题2</title>
    <url>/2020/03/26/OS/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F2/</url>
    <content><![CDATA[<h3 id="1、进程从运行状态进入就绪状态的原因可能是（-D-）"><a href="#1、进程从运行状态进入就绪状态的原因可能是（-D-）" class="headerlink" title="1、进程从运行状态进入就绪状态的原因可能是（ D ）"></a>1、进程从运行状态进入就绪状态的原因可能是（ D ）</h3><p>​      A. 被选中占有处理机   B. 等待某一事件   C. 等待的事件已发生   D. 时间片用完</p>
<h3 id="2、某页式存储管理系统中，地址寄存器长度为24-位，其中页号占14-位，则主存的分块大小应该是（-A-）字节。"><a href="#2、某页式存储管理系统中，地址寄存器长度为24-位，其中页号占14-位，则主存的分块大小应该是（-A-）字节。" class="headerlink" title="2、某页式存储管理系统中，地址寄存器长度为24 位，其中页号占14 位，则主存的分块大小应该是（ A ）字节。"></a>2、某页式存储管理系统中，地址寄存器长度为24 位，其中页号占14 位，则主存的分块大小应该是（ A ）字节。</h3><p>​      A．210     B．10     C．14    D．214</p>
<h3 id="3、I-O-设备的控制方式中比DMA-方式效率高的是（-C-）。"><a href="#3、I-O-设备的控制方式中比DMA-方式效率高的是（-C-）。" class="headerlink" title="3、I/O 设备的控制方式中比DMA 方式效率高的是（ C ）。"></a>3、I/O 设备的控制方式中比DMA 方式效率高的是（ C ）。</h3><p>​      A.询问方式   B.中断方式   C. 通道方式   D. 以上都不是</p>
<h3 id="4、Spooling-技术是一种实现虚拟（-B-）的技术。"><a href="#4、Spooling-技术是一种实现虚拟（-B-）的技术。" class="headerlink" title="4、Spooling 技术是一种实现虚拟（ B ）的技术。"></a>4、Spooling 技术是一种实现虚拟（ B ）的技术。</h3><p>​      A. 处理器 B. 设备 C. 存储器 D. 链路</p>
<h3 id="5、引入缓冲的主要目的是（-A-）。"><a href="#5、引入缓冲的主要目的是（-A-）。" class="headerlink" title="5、引入缓冲的主要目的是（ A ）。"></a>5、引入缓冲的主要目的是（ A ）。</h3><p>​      A. 改善CPU 和I/O 设备之间速度不匹配的情况      B. 节省内存<br>​     C. 提高CPU 的运行频率    D. 提高I/O 设备的利用率</p>
<h3 id="6、位示图方法可用于（-A-）。"><a href="#6、位示图方法可用于（-A-）。" class="headerlink" title="6、位示图方法可用于（ A ）。"></a>6、位示图方法可用于（ A ）。</h3><p>​     A. 盘空间的管理 B. 盘的驱动调度<br>​     C. 文件目录的查找 D. 页式虚拟存贮管理中的页面调度</p>
<h3 id="7、把逻辑文件存放到存储介质上时，如果组织成（-D-）文件，则逻辑记录可以按任意次序存放在不相邻的存储块中。"><a href="#7、把逻辑文件存放到存储介质上时，如果组织成（-D-）文件，则逻辑记录可以按任意次序存放在不相邻的存储块中。" class="headerlink" title="7、把逻辑文件存放到存储介质上时，如果组织成（ D ）文件，则逻辑记录可以按任意次序存放在不相邻的存储块中。"></a>7、把逻辑文件存放到存储介质上时，如果组织成（ D ）文件，则逻辑记录可以按任意次序存放在不相邻的存储块中。</h3><p>​      A．流式 B．记录式 C．顺序结构 D．链接结构</p>
<h3 id="8、根据运行程序对资源和机器指令的使用权限将处理器设置为不同状态，多数系统将处理器工作状态划分为管态和目态这两种状态。"><a href="#8、根据运行程序对资源和机器指令的使用权限将处理器设置为不同状态，多数系统将处理器工作状态划分为管态和目态这两种状态。" class="headerlink" title="8、根据运行程序对资源和机器指令的使用权限将处理器设置为不同状态，多数系统将处理器工作状态划分为管态和目态这两种状态。"></a>8、根据运行程序对资源和机器指令的使用权限将处理器设置为不同状态，多数系统将处理器工作状态划分为管态和目态这两种状态。</h3><p>以下答案均算对：管态／管理／管理员态／系统（态）／系统模式／核心（态）／系统核心（态）／内核态；<br>目态／用户（态）／用户工作态／用户模式</p>
<h3 id="9、死锁的四个必要条件是互斥使用资源，占有等待资源，不可抢夺资源和循环等待资源。"><a href="#9、死锁的四个必要条件是互斥使用资源，占有等待资源，不可抢夺资源和循环等待资源。" class="headerlink" title="9、死锁的四个必要条件是互斥使用资源，占有等待资源，不可抢夺资源和循环等待资源。"></a>9、死锁的四个必要条件是互斥使用资源，占有等待资源，<strong>不可抢夺资源和循环等待资源</strong>。</h3><h4 id="10、一进程刚获得三个主存页框的使用权，若该进程访问逻辑页面的次序是-1321215123-。设初始主存页框为空，则当采用先进先出调度算法时，发生缺页次数是6-次，而采用LRU-算法时，缺页次数是5-次。（注：最初空的3-页调入内存计入缺页中断次数）"><a href="#10、一进程刚获得三个主存页框的使用权，若该进程访问逻辑页面的次序是-1321215123-。设初始主存页框为空，则当采用先进先出调度算法时，发生缺页次数是6-次，而采用LRU-算法时，缺页次数是5-次。（注：最初空的3-页调入内存计入缺页中断次数）" class="headerlink" title="10、一进程刚获得三个主存页框的使用权，若该进程访问逻辑页面的次序是{1321215123}。设初始主存页框为空，则当采用先进先出调度算法时，发生缺页次数是6 次，而采用LRU 算法时，缺页次数是5 次。（注：最初空的3 页调入内存计入缺页中断次数）"></a>10、一进程刚获得三个主存页框的使用权，若该进程访问逻辑页面的次序是{1321215123}。设初始主存页框为空，则当采用先进先出调度算法时，发生缺页次数是<strong>6</strong> 次，而采用LRU 算法时，缺页次数是<strong>5</strong> 次。（注：最初空的3 页调入内存计入缺页中断次数）</h4><h3 id="11、请描述时间片轮转调度算法。"><a href="#11、请描述时间片轮转调度算法。" class="headerlink" title="11、请描述时间片轮转调度算法。"></a>11、请描述时间片轮转调度算法。</h3><p>​        根据先来先服务的原则，将需要执行的所有进程按照到达时间的大小排成一个升序的序列，每次都给一个进程同样大小的时间片，在这个时间片内如果进程执行结束了，那么把进程从进程队列中删去，如果进程没有结束，那么把该进程停止然后改为等待状态，放到进程队列的尾部，直到所有的进程都已执行完毕</p>
<h3 id="12、有三个进程P1，P2-和P3-并发工作。进程P1-需用资源S3-和S1；进程P2-需用资源S1-和S2；进程P3-需用资源S2-和S3。若对资源分配不加限制，会发生什么情况-为什么-为保证进程正确工作可采用怎样的资源分配策略-为什么"><a href="#12、有三个进程P1，P2-和P3-并发工作。进程P1-需用资源S3-和S1；进程P2-需用资源S1-和S2；进程P3-需用资源S2-和S3。若对资源分配不加限制，会发生什么情况-为什么-为保证进程正确工作可采用怎样的资源分配策略-为什么" class="headerlink" title="12、有三个进程P1，P2 和P3 并发工作。进程P1 需用资源S3 和S1；进程P2 需用资源S1 和S2；进程P3 需用资源S2 和S3。若对资源分配不加限制，会发生什么情况?为什么? 为保证进程正确工作可采用怎样的资源分配策略?为什么?"></a>12、有三个进程P1，P2 和P3 并发工作。进程P1 需用资源S3 和S1；进程P2 需用资源S1 和S2；进程P3 需用资源S2 和S3。若对资源分配不加限制，会发生什么情况?为什么? 为保证进程正确工作可采用怎样的资源分配策略?为什么?</h3><p>答：进程P1，P2和P3分别获得资源S3，S1和S2后再继续申请资源时都要等待，这是循环等待。(或进程在等待新源时均不释放已占资源) </p>
<p>（2）解决思路</p>
<p>思路<strong>A.</strong>采用静态分配</p>
<p>　由于执行前已获得所需的全部资源，故不会出现占有资源又等待别的资源的现象(或不会出现循环等待资源现象)。</p>
<p>思路<strong>B</strong>.采用按序分配</p>
<p>　不会出现循环等待资源现象。</p>
<p>思路<strong>C</strong>.采用银行家算法</p>
<p>　   因为在分配时，保证了系统处于安全状态。</p>
<h3 id="13、给定段表如下："><a href="#13、给定段表如下：" class="headerlink" title="13、给定段表如下："></a>13、给定段表如下：</h3><p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/20200327114712.png" data-fancybox="group" data-caption class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/20200327114712.png" alt title></a></p>
<p>给定地址为段号和位移：1）[1，10] 、2）[2，150] 、 3）[4，40]，试求出对应的内存物理地址。</p>
<p>答：<br>1）[1，10] 对应的内存物理地址是2310<br>2）[2，150] 对应的内存物理地址是越界<br>3）[4，40] 缺段中断</p>
<h3 id="14、操作系统的基本特性是-并发性、共享性、不确定性和虚拟性。"><a href="#14、操作系统的基本特性是-并发性、共享性、不确定性和虚拟性。" class="headerlink" title="14、操作系统的基本特性是_ 并发性、共享性、不确定性和虚拟性。"></a>14、操作系统的基本特性是_ 并发性、<strong>共享性</strong>、不确定性和虚拟性。</h3><h3 id="15、常用的死锁解除方法有两种，一是资源剥夺-法，另一个是进程撤销法。"><a href="#15、常用的死锁解除方法有两种，一是资源剥夺-法，另一个是进程撤销法。" class="headerlink" title="15、常用的死锁解除方法有两种，一是资源剥夺_法，另一个是进程撤销法。"></a>15、常用的死锁解除方法有两种，一是<strong>资源剥夺_法</strong>，另一个是<strong>进程撤销法</strong>。</h3><h3 id="16、文件常见的物理结构有连续文件，串联文件和索引-文件。"><a href="#16、文件常见的物理结构有连续文件，串联文件和索引-文件。" class="headerlink" title="16、文件常见的物理结构有连续文件，串联文件和索引_文件。"></a>16、文件常见的物理结构有连续文件，<strong>串联</strong>文件和<strong>索引</strong>_文件。</h3><h3 id="17、从资源分配的角度，设备可以分为独占、共享和虚拟设备。"><a href="#17、从资源分配的角度，设备可以分为独占、共享和虚拟设备。" class="headerlink" title="17、从资源分配的角度，设备可以分为独占、共享和虚拟设备。"></a>17、从资源分配的角度，设备可以分为<strong>独占</strong>、<strong>共享</strong>和<strong>虚拟</strong>设备。</h3><h3 id="18、单处理机系统中，可并行的是D-。"><a href="#18、单处理机系统中，可并行的是D-。" class="headerlink" title="18、单处理机系统中，可并行的是D_。"></a>18、单处理机系统中，可并行的是D<strong>_</strong>。</h3><p>I 进程与进程   II 处理机与设备    III 处理机与通道    IV 设备与设备<br>A．I、II 和III B． I、II 和IV<br>C．I、III 和IV D． II、III 和IV</p>
<h3 id="19、设与某资源关联的信号量初值为3，当前值为1。若M-表示该资源的可用个数，N-表示等待该资源的进程数，则M、N-分别是-B。"><a href="#19、设与某资源关联的信号量初值为3，当前值为1。若M-表示该资源的可用个数，N-表示等待该资源的进程数，则M、N-分别是-B。" class="headerlink" title="19、设与某资源关联的信号量初值为3，当前值为1。若M 表示该资源的可用个数，N 表示等待该资源的进程数，则M、N 分别是 B。"></a>19、设与某资源关联的信号量初值为3，当前值为1。若M 表示该资源的可用个数，N 表示等待该资源的进程数，则M、N 分别是 B。</h3><p>A．0、1 B．1、0 C．1、2 D．2、0</p>
<h3 id="20、下列进程调度算法中，综合考虑进程等待时间和执行时间的是D-。"><a href="#20、下列进程调度算法中，综合考虑进程等待时间和执行时间的是D-。" class="headerlink" title="20、下列进程调度算法中，综合考虑进程等待时间和执行时间的是D_。"></a>20、下列进程调度算法中，综合考虑进程等待时间和执行时间的是D<strong>_</strong>。</h3><p>A．时间片轮转调度算法<br>B．短进程优先调度算法<br>C．先来先服务调度算法<br>D．高响应比优先调度算法</p>
<h3 id="21、一个分段存储管理系统中，地址长度为32-位，其中段号占8-位，则最大段长是C-。"><a href="#21、一个分段存储管理系统中，地址长度为32-位，其中段号占8-位，则最大段长是C-。" class="headerlink" title="21、一个分段存储管理系统中，地址长度为32 位，其中段号占8 位，则最大段长是C_。"></a>21、一个分段存储管理系统中，地址长度为32 位，其中段号占8 位，则最大段长是C<strong>_</strong>。</h3><p>A．2 的8 次方字节 B．2 的16 次方字节<br>C．2 的24 次方字节 D．2 的32 次方字节</p>
<h3 id="22、下列选项中，能引起外部中断的事件是-A。"><a href="#22、下列选项中，能引起外部中断的事件是-A。" class="headerlink" title="22、下列选项中，能引起外部中断的事件是_A。"></a>22、下列选项中，能引起外部中断的事件是<strong>_</strong>A。</h3><p>A．键盘输入 B．除数为0<br>C．浮点运算下溢 D．访存缺页</p>
<h3 id="23、为了解决不同用户文件的“命名冲突”问题，通常在文件系统中采用-B-。"><a href="#23、为了解决不同用户文件的“命名冲突”问题，通常在文件系统中采用-B-。" class="headerlink" title="23、为了解决不同用户文件的“命名冲突”问题，通常在文件系统中采用 B 。"></a>23、为了解决不同用户文件的“命名冲突”问题，通常在文件系统中采用 B 。</h3><p>A．约定的方法 B．多级目录<br>C．路径 D．索引</p>
<h3 id="25、进程间同步和互斥的含义是什么"><a href="#25、进程间同步和互斥的含义是什么" class="headerlink" title="25、进程间同步和互斥的含义是什么?"></a>25、进程间同步和互斥的含义是什么?</h3><p>同步是指并发进程之间存在相互制约，相互依赖的关系。<br>互斥是指进程之间的间接制约关系。</p>
<h3 id="26、请简单叙述缓冲的基本思想。"><a href="#26、请简单叙述缓冲的基本思想。" class="headerlink" title="26、请简单叙述缓冲的基本思想。"></a>26、请简单叙述缓冲的基本思想。</h3><p>缓冲技术的基本思想是：当一个进程输出数据时，先向系统申请一块内存作为输出缓冲区；然后，将输出数据高速输出到缓冲区；不断把数据填到缓冲区，直到缓冲区被装满为止；此后，进程可以继续它的计算，同时，系统将缓冲区内容写到I/O设备上。当一个进程执行读操作输入数据是，过程与此类似。常见的缓冲技术有：单缓冲、双缓冲、循环缓冲和缓冲池。</p>
<p>27、问题描述：有两组并发进程：读者和写者共享一个文件 F，要求允许多个读者同时执行读操作，任一写者在完成写操作之前不允许其他读者或写者工作，写者执行写操作前，应让已有的写者和读者全部退出。用信号量和 P、 V 操作来实现两组进程之间的同步和互斥。</p>
<h3 id="28、分页式存储管理下，逻辑地址由-页号-和-页内地址-两个部分组成。"><a href="#28、分页式存储管理下，逻辑地址由-页号-和-页内地址-两个部分组成。" class="headerlink" title="28、分页式存储管理下，逻辑地址由 页号 和 页内地址 两个部分组成。"></a>28、分页式存储管理下，逻辑地址由 <strong>页号</strong> 和 <strong>页内地址</strong> 两个部分组成。</h3><h3 id="29、进程的基本状态有-运行状态-、-就绪状态-和等待状态。"><a href="#29、进程的基本状态有-运行状态-、-就绪状态-和等待状态。" class="headerlink" title="29、进程的基本状态有 运行状态 、 就绪状态 和等待状态。"></a>29、进程的基本状态有 <strong>运行状态</strong> 、 <strong>就绪状态</strong> 和<strong>等待状态</strong>。</h3><h3 id="30、I-O-设备的控制方式有四类：询问方式、-中断-、DMA-方式和-通道方式-。"><a href="#30、I-O-设备的控制方式有四类：询问方式、-中断-、DMA-方式和-通道方式-。" class="headerlink" title="30、I/O 设备的控制方式有四类：询问方式、 中断 、DMA 方式和 通道方式 。"></a>30、I/O 设备的控制方式有四类：询问方式、 <strong>中断</strong> 、<strong>DMA 方式</strong>和 <strong>通道方式</strong> 。</h3><h3 id="31、通过硬件和软件的功能扩充，把原来独立的设备改造成能为若干用户共享的设备，这种设备称为（-D-）。"><a href="#31、通过硬件和软件的功能扩充，把原来独立的设备改造成能为若干用户共享的设备，这种设备称为（-D-）。" class="headerlink" title="31、通过硬件和软件的功能扩充，把原来独立的设备改造成能为若干用户共享的设备，这种设备称为（ D ）。"></a>31、通过硬件和软件的功能扩充，把原来独立的设备改造成能为若干用户共享的设备，这种设备称为（ D ）。</h3><p>​        A）存储设备 B）系统设备 C）共享设备 D）虚拟设备</p>
<h3 id="32、若信号量S-的初值为3，当前值为-2，则表示有（-C-）个等待进程。"><a href="#32、若信号量S-的初值为3，当前值为-2，则表示有（-C-）个等待进程。" class="headerlink" title="32、若信号量S 的初值为3，当前值为-2，则表示有（ C ）个等待进程。"></a>32、若信号量S 的初值为3，当前值为-2，则表示有（ C ）个等待进程。</h3><p>A．0   B．1<br>C．2   D．3</p>
<h3 id="33、请简述3-种移臂调度算法基本思想及其优缺点。"><a href="#33、请简述3-种移臂调度算法基本思想及其优缺点。" class="headerlink" title="33、请简述3 种移臂调度算法基本思想及其优缺点。"></a>33、请简述3 种移臂调度算法基本思想及其优缺点。</h3><p>（1）先来先服务算法：按照IO请求到达顺序先后进行访问。此算法的优点是公平、简单，且每个进程的请求都能依次得到处理，但此算法由于未对寻道进行优化，致使平均寻道时间可能较长。</p>
<p>（2）扫描算法（SCAN）：每次执行沿臂的移动方向最近的IO请求。最短寻道时间优先算法虽有较好的寻道性能，但可能会造成进程“饥饿”状态，而扫描算法克服了这一缺点。</p>
<p>（3）循环扫描（CSCAN）算法：总是从0号至最大号扫描，但归途中不处理任何请求。在磁盘请求对柱面的分布是均匀的情况下，可以对扫描算法的性能进行改进，这就减少了处理新来请求的最大延迟。</p>
<p>（4）最短寻道时间优先SSTF(Shortest Seek Time First)：每次执行查找时间最短的IO请求。与先来先服务算法相比，该算法节省了几乎一半的移臂时间，但是本算法存在“饥饿”现象。</p>
<p>（5）分步扫描（N-STEP-SCAN）和（FSCAN）算法：将IO请求分组，每次选一组扫描。分步扫描可以避免在SSTF、 SCAN及CSCAN几种调度算法中，都可能出现磁臂停留在某处不动的情况。</p>
<h3 id="34、请叙述SPOOLing-系统的作用及其组成。"><a href="#34、请叙述SPOOLing-系统的作用及其组成。" class="headerlink" title="34、请叙述SPOOLing 系统的作用及其组成。"></a>34、请叙述SPOOLing 系统的作用及其组成。</h3><p>​    SPOOLing系统的作用是把一个共享的硬盘改造成若干台输入设备和若干台虚拟的输出设备，保持了输入（出）设备繁忙地与主机并行地工作，提高了整个系统效率。【SPOOLing系统的作用得2分】</p>
<p>SPOOLing系统是对脱机输入输出工作的模拟，主要由以下三部分组成：</p>
<p>（1）输入井和输出井</p>
<p>输入井是模拟脱机输入时的磁盘，用于收容I/O设备输入的数据；输出井是模拟脱机输出时的磁盘，用于收容用户程序的输出数据。</p>
<p>（2）输入缓冲区和输出缓冲区</p>
<p>在内存中要开辟两个缓冲区，分别用于暂存由输入设备和从输出井送来的数据，以后再分别传送到输入井和输出设备。</p>
<p>（3）输入进程SPi和输出进程SPo</p>
<p>进程SPi模拟脱机输入时的外围控制机，SPo进程模拟脱机输出时的外围控制机。下图给出了SPOOLing系统的组成。</p>
<p>​    <a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/20200327110835.png" data-fancybox="group" data-caption class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/20200327110835.png" alt title></a></p>
<h3 id="35、进程控制块是什么，有何作用？通常进程控制块包含哪四种内容？"><a href="#35、进程控制块是什么，有何作用？通常进程控制块包含哪四种内容？" class="headerlink" title="35、进程控制块是什么，有何作用？通常进程控制块包含哪四种内容？"></a>35、进程控制块是什么，有何作用？通常进程控制块包含哪四种内容？</h3><p>进程控制块PCB（Process Control Block）是操作系统为了管理进程设置的一个专门的数据结构，用它来记录进程的外部特征，描述进程的运动变化过程。</p>
<p>通常进程控制块包含以下四种内容：</p>
<p>（1）进程描述信息：进程标识符，每个进程都有唯一的进程名或进程标识号。</p>
<p>（2）进程控制信息：进程当前状态、优先级（priority）、代码执行入口地址等。</p>
<p>（3）所拥有的资源和使用情况：占用内存大小及其管理用数据结构指针。 </p>
<p>（4）CPU现场保护信息：寄存器值、指向赋予该进程的段/页表的指针。</p>
<h3 id="36、有一个具有两道作业的批处理系统，作业调度采用短作业优先的非抢式调度算法，进程调度采用以优先数为基础的抢占式调度算法，在下表所示的作业序列中，作业优先数即为进程优先数，优先数越小优先级越高。"><a href="#36、有一个具有两道作业的批处理系统，作业调度采用短作业优先的非抢式调度算法，进程调度采用以优先数为基础的抢占式调度算法，在下表所示的作业序列中，作业优先数即为进程优先数，优先数越小优先级越高。" class="headerlink" title="36、有一个具有两道作业的批处理系统，作业调度采用短作业优先的非抢式调度算法，进程调度采用以优先数为基础的抢占式调度算法，在下表所示的作业序列中，作业优先数即为进程优先数，优先数越小优先级越高。"></a>36、有一个具有两道作业的批处理系统，作业调度采用短作业优先的非抢式调度算法，进程调度采用以优先数为基础的抢占式调度算法，在下表所示的作业序列中，作业优先数即为进程优先数，优先数越小优先级越高。</h3><p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/20200327111036.png" data-fancybox="group" data-caption class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/20200327111036.png" alt title></a></p>
<p>（1）列出所有作业进入内存时间及结束时间。（2）计算平均作业周转时间。</p>
<p>答：(1)每个作业运行将经过两个阶段：作业调度(SJF算法)和进程调度(优先数抢占式)。另外，批处理最多容纳2道作业，更多的作业将在后备队列等待，如图所示：</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/20200327111504.png" data-fancybox="group" data-caption class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/20200327111504.png" alt title></a></p>
<p>a)     10:00，作业A到达并投入运行。</p>
<p>b)    10:20，作业B到达且优先权高于作业A，故作业B投入运行而作业A在就绪队列等待。</p>
<p>c)     10:30，作业C到达，因内存中已有两道作业，故作业C进入作业后备队列等待。</p>
<p>d)    10:50，作业B运行结束，作业D到达，按SJF短作业优先算法，作业D被装入内存进入就绪队列。而由于作业A的优先级高于作业D，故作业A投入运行。</p>
<p>e)     11:10，作业A运行结束，作业C被调入内存，且作业C的优先级高于作业D，故作业C投入运行。</p>
<p>f)     12:00，作业C运行结束，作业D投入运行。</p>
<p>g)    12:20，作业D运行结束。</p>
<p>各作业周转时间为：作业A 70，作业B 30，作业C 90，作业D 90。</p>
<p>(2) 平均作业周转时间为70分钟。</p>
<p>答案汇总：<a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/20200327111654.png" data-fancybox="group" data-caption class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/20200327111654.png" alt title></a></p>
<h3 id="37、有m-个生产者和n-个消费者进程，它们共享一个可存放k-件产品的缓冲区。生产者负责生产产品并将其放到缓冲区中，当缓冲区已满时须等待；消费者负责从缓冲区中取走并消费产品，当缓冲区为空时须等待。生产者和消费者应互斥地对缓冲区进行存取。试用信号量机制及P、V-操作来实现这一过程（包括初始化和具体过程，用伪代码表示即可）。"><a href="#37、有m-个生产者和n-个消费者进程，它们共享一个可存放k-件产品的缓冲区。生产者负责生产产品并将其放到缓冲区中，当缓冲区已满时须等待；消费者负责从缓冲区中取走并消费产品，当缓冲区为空时须等待。生产者和消费者应互斥地对缓冲区进行存取。试用信号量机制及P、V-操作来实现这一过程（包括初始化和具体过程，用伪代码表示即可）。" class="headerlink" title="37、有m 个生产者和n 个消费者进程，它们共享一个可存放k 件产品的缓冲区。生产者负责生产产品并将其放到缓冲区中，当缓冲区已满时须等待；消费者负责从缓冲区中取走并消费产品，当缓冲区为空时须等待。生产者和消费者应互斥地对缓冲区进行存取。试用信号量机制及P、V 操作来实现这一过程（包括初始化和具体过程，用伪代码表示即可）。"></a>37、有m 个生产者和n 个消费者进程，它们共享一个可存放k 件产品的缓冲区。生产者负责生产产品并将其放到缓冲区中，当缓冲区已满时须等待；消费者负责从缓冲区中取走并消费产品，当缓冲区为空时须等待。生产者和消费者应互斥地对缓冲区进行存取。试用信号量机制及P、V 操作来实现这一过程（包括初始化和具体过程，用伪代码表示即可）。</h3><p>答：初始化：<code>var empty: semaphore:=k</code>; 【1 分】<br>                       <code>full: semaphore:=0</code>;            【1 分】<br>                       <code>mutex: semaphore:=1</code>;           【1 分】</p>
<p><a href="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/20200327112125.png" data-fancybox="group" data-caption class="fancybox"><img src="https://cdn.jsdelivr.net/gh/ThinkingXuan/HexoStaticImage/img/20200327112125.png" alt title></a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统问答题1</title>
    <url>/2020/03/25/OS/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1/</url>
    <content><![CDATA[<h3 id="1-什么是系统调用，与库函数和实用程序的区别："><a href="#1-什么是系统调用，与库函数和实用程序的区别：" class="headerlink" title="1.什么是系统调用，与库函数和实用程序的区别："></a>1.什么是系统调用，与库函数和实用程序的区别：</h3><p>答：系统调用时操作系统提供给编程人员的唯一接口。编程人员利用系统调用，在源程序一级动态请求和释放系统资源，调用系统中已有的系统功能来完成那些鱼机器硬件部分相关的工作以控制程序执行的速度等，因此，系统调用像一个黑箱子那样，对用户屏蔽了操作系统的具体动作而只提供相关的功能。</p>
<p>区别：系统调用实在核心态执行，调用他们需要一个类似于硬件中断处理的中断处理机制来提供系统服务。</p>
<h3 id="2-简述系统调用的实现过程"><a href="#2-简述系统调用的实现过程" class="headerlink" title="2.简述系统调用的实现过程"></a>2.简述系统调用的实现过程</h3><p>答：用户在程序中使用系统调用，给出系统调用名和函数后，即产生一条相应的陷入指令，通过陷入处理机制调用服务，引起处理机中断，然后保护处理机现场，取系统调用功能号并寻找子程序入口，通过入口地址表来调用系统子程序，然后返回用户程序继续执行。</p>
<h3 id="3-什么是死锁？产生死锁的必要条件用那些？"><a href="#3-什么是死锁？产生死锁的必要条件用那些？" class="headerlink" title="3.什么是死锁？产生死锁的必要条件用那些？"></a>3.什么是死锁？产生死锁的必要条件用那些？</h3><p>答：多个进程因竞争资源而造成的一种僵局( 相互等待)，若无外力作用，这些进程都将无法向前推进</p>
<p><strong>互斥条件  不可剥夺条件 请求与保持条件  循环等待条件</strong>。</p>
<h3 id="4-设备管理中的数据传送控制方式有哪几种？分别简述如何实现的。"><a href="#4-设备管理中的数据传送控制方式有哪几种？分别简述如何实现的。" class="headerlink" title="4.设备管理中的数据传送控制方式有哪几种？分别简述如何实现的。"></a>4.设备管理中的数据传送控制方式有哪几种？分别简述如何实现的。</h3><p>答：<strong>程序直接控制</strong>：由用户进程来直接控制内存或CPU 和外设间的信息传送。<br><strong>中断方式</strong>：进程通过CPU 发出指令启动外设，该进程阻塞。当输入完成时，I/O 控制器<br>                   通过中断请求线向CPU 发出中断信号，CPU 进行中断处理。<br><strong>DMA 方式</strong>：在外设和内存之间开辟直接的数据交换通路。<br><strong>通道控制方式</strong>：CPU 发出启动指令，指出通道相应的操作和I/O 设备，该指令就可启<br>                          动通道并使该通道从内存中调出相应的通道指令执行。</p>
<h3 id="5-进程的基本状态有哪些？这些状态之间是如何转换的？"><a href="#5-进程的基本状态有哪些？这些状态之间是如何转换的？" class="headerlink" title="5.进程的基本状态有哪些？这些状态之间是如何转换的？"></a>5.进程的基本状态有哪些？这些状态之间是如何转换的？</h3><p>答：进程的基本状态有：<strong>就绪</strong>，<strong>阻塞</strong>，<strong>执行</strong>三种。<br>    就绪到执行：进程调度<br>    执行到就绪：时间片完<br>    执行到阻塞：I/O 请求或等待事件发生<br>    阻塞到就绪：I/O 完成或事件已发生 </p>
<h3 id="6-处理机调度分为哪三级？各自的主要任务是什么？"><a href="#6-处理机调度分为哪三级？各自的主要任务是什么？" class="headerlink" title="6.处理机调度分为哪三级？各自的主要任务是什么？"></a>6.处理机调度分为哪三级？各自的主要任务是什么？</h3><p>答：<strong>作业调度</strong>：从一批后备作业中选择一个或几个作业，给它们分配资源，建立进程，挂<br>入就绪队列。执行完后，回收资源。<br><strong>进程调度</strong>：从就绪进程队列中根据某个策略选取一个进程，使之占用CPU。<br><strong>交换调度</strong>：按照给定的原则和策略，将外存交换区中的进程调入内存，把内存中的非执行<br>进程交换到外存交换区中。</p>
<h3 id="7-什么是死锁？产生死锁的四个必要条件是什么？"><a href="#7-什么是死锁？产生死锁的四个必要条件是什么？" class="headerlink" title="7.什么是死锁？产生死锁的四个必要条件是什么？"></a>7.什么是死锁？产生死锁的四个必要条件是什么？</h3><p>答：<strong>死锁</strong>：当某进程提出资源申请后，使得系统中一些进程处于无休止的阻塞状态，在无外力<br>作用下，永远不能再继续前进。<br>产生死锁的必要条件：<strong>互斥条件</strong>：某段时间内某资源只能由一个进程使用。<strong>不剥夺条件</strong>：<br>资源在未使用完前，不能被剥夺，由使用进程释放。<strong>部分分配（请求和保持）</strong>：进程因请求<br>资源而阻塞时，对已分配给它的资源保持不放。<strong>环路条件</strong>：发生死锁时，有向图必构成一<br>环路。</p>
<h3 id="8．在哲学家算法中，是否能防止或解除死锁？为什么？"><a href="#8．在哲学家算法中，是否能防止或解除死锁？为什么？" class="headerlink" title="8．在哲学家算法中，是否能防止或解除死锁？为什么？"></a>8．在哲学家算法中，是否能防止或解除死锁？为什么？</h3><p>答：银行家算法部分防止和解除死锁，因为它只能根据安全状态防止部分死锁，没有防止<br>和解除所有死锁的能力。</p>
<h3 id="9．在原语执行期间，是否可以响应中断？为什么？"><a href="#9．在原语执行期间，是否可以响应中断？为什么？" class="headerlink" title="9．在原语执行期间，是否可以响应中断？为什么？"></a>9．在原语执行期间，是否可以响应中断？为什么？</h3><p>答：原语执行期间可以响应中断，只是不能进行进程切换。</p>
<h3 id="10．不同用户的不同任务之间的进程是有临界区？为什么？请举例说明。"><a href="#10．不同用户的不同任务之间的进程是有临界区？为什么？请举例说明。" class="headerlink" title="10．不同用户的不同任务之间的进程是有临界区？为什么？请举例说明。"></a>10．不同用户的不同任务之间的进程是有临界区？为什么？请举例说明。</h3><p>答：完全可能有临界区，如打印程序是可以由不同用户的不同进程使用，但是只能有一个<br>进程在某一时刻进入。</p>
<h3 id="11．文件目录有何作用？"><a href="#11．文件目录有何作用？" class="headerlink" title="11．文件目录有何作用？"></a>11．文件目录有何作用？</h3><p>答：实现文件目录到物理地址的转换。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>从Github指定仓库中删除文件或文件夹</title>
    <url>/2020/03/09/git/%E4%BB%8EGithub%E6%8C%87%E5%AE%9A%E4%BB%93%E5%BA%93%E4%B8%AD%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<h2 id="1-初始化git仓库"><a href="#1-初始化git仓库" class="headerlink" title="1.初始化git仓库"></a>1.初始化git仓库</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></div>
<h2 id="2-连接指定的github仓库"><a href="#2-连接指定的github仓库" class="headerlink" title="2.连接指定的github仓库"></a>2.连接指定的github仓库</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/ThinkingXuan/HexoStaticImage.git</span><br></pre></td></tr></table></figure></div>
<h2 id="3-从仓库中拉取代码"><a href="#3-从仓库中拉取代码" class="headerlink" title="3.从仓库中拉取代码"></a>3.从仓库中拉取代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></div>
<h2 id="一-、Github仓库和本地都删除"><a href="#一-、Github仓库和本地都删除" class="headerlink" title="一 、Github仓库和本地都删除"></a>一 、Github仓库和本地都删除</h2><h3 id="1-、进入指定的文件夹，删除文件"><a href="#1-、进入指定的文件夹，删除文件" class="headerlink" title="1 、进入指定的文件夹，删除文件"></a>1 、进入指定的文件夹，删除文件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -f 文件名</span><br></pre></td></tr></table></figure></div>
<h3 id="2、依次执行以下命令"><a href="#2、依次执行以下命令" class="headerlink" title="2、依次执行以下命令"></a>2、依次执行以下命令</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"删除文件"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></div>
<p>然后显示删除成功</p>
<h2 id="二、只删除Github仓库文件"><a href="#二、只删除Github仓库文件" class="headerlink" title="二、只删除Github仓库文件"></a>二、只删除Github仓库文件</h2><p>1、删除缓存</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm -r --cached 文件名</span><br></pre></td></tr></table></figure></div>
<p>2、提交</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">'删除文件'</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>P0505阶乘取数</title>
    <url>/2019/04/09/lanqiao/P0505%E9%98%B6%E4%B9%98%E5%8F%96%E6%95%B0/</url>
    <content><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>一个整数n的阶乘可以写成n!，它表示从1到n这n个整数的乘积。阶乘的增长速度非常快，例如，13！就已经比较大了，已经无法存放在一个整型变量中；而35！就更大了，它已经无法存放在一个浮点型变量中。因此，当n比较大时，去计算n!是非常困难的。幸运的是，在本题中，我们的任务不是去计算n!，而是去计算n!最右边的那个非0的数字是多少。</p>
<a id="more"></a>
<p>例如，<code>5！=1*2*3*4*5=120</code>，因此<code>5!</code>最右边的那个非0的数字是2。再如，<code>7！=5040</code>，因此<code>7</code>最右边的那个非0的数字是4。再如，<code>15！= 1307674368000</code>，因此<code>15！</code>最右边的那个非0的数字是8。请编写一个程序，输入一个整数n(0&lt;n&lt;=100)，然后输出n!最右边的那个非0的数字是多少。</p>
<h4 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h4><p>　　7</p>
<h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><p>　　4
　　</p>
<blockquote>
<h4 id="分析：直接计算一定不可以，我的思路的计算的时候循环去零，然后-10000000，防止溢出。"><a href="#分析：直接计算一定不可以，我的思路的计算的时候循环去零，然后-10000000，防止溢出。" class="headerlink" title="分析：直接计算一定不可以，我的思路的计算的时候循环去零，然后%10000000，防止溢出。"></a>分析：直接计算一定不可以，我的思路的计算的时候循环去零，然后%10000000，防止溢出。</h4></blockquote>
<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//15！= 1307674368000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> sum  = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		sum = sum * i;</span><br><span class="line">		<span class="keyword">while</span>(sum)&#123;</span><br><span class="line">			k = sum % <span class="number">10</span>;</span><br><span class="line">			<span class="keyword">if</span>(k!=<span class="number">0</span>)&#123;</span><br><span class="line">				k = sum;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			sum = sum%<span class="number">10000000</span> / <span class="number">10</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; sum %<span class="number">10</span>; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>阶乘取数</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解线性素数筛</title>
    <url>/2019/04/08/lanqiao/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%BA%BF%E6%80%A7%E7%B4%A0%E6%95%B0%E7%AD%9B/</url>
    <content><![CDATA[<p>线性素数筛也算是一种基本的算法。</p>
<p>两个大前提：</p>
<ol>
<li><p>自然数中，1既不是素数也不是合数。</p>
</li>
<li><p>一个合数一定能分解成一个素数和另一个数相乘。</p>
</li>
</ol>
<a id="more"></a>
<p>先从普通的思路谈起。</p>
<p>如果问你一个数是不是素数，那你一定是for循环一下，看看有没有数能够整除它。</p>
<p>现在，如果我们已经知道一个数是素数了，那么这个数的k倍（k&gt;=2）,一定是合数。（这个无序任何证明）</p>
<p>所以一个很简单的想法就是每找到一个素数，我们就把它的k倍（k&gt;=2）都标记为合数。所以我们需要开一个数组记录有哪些素数。</p>
<p>这里我们用prime[]数组来记录素数。用bool类型 isprime[]来记录一个数到底是不是素数。</p>
<p>按这个思路，我们可以先写一下初步的代码。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ioStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">1000</span>],total;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isprime[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(isprime,<span class="number">1</span>,<span class="keyword">sizeof</span>(isprime));<span class="comment">//注意这里isprime是布尔类型，一个字节，所以我可以赋值为1，如果是int类型，则不能赋值为1。</span></span><br><span class="line">    isprime[<span class="number">1</span>]=<span class="literal">false</span>;<span class="comment">//1不是素数.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isprime[i])</span><br><span class="line">        &#123;</span><br><span class="line">            prime[++total]=i;<span class="comment">//记录素数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=total&amp;&amp;prime[j]*i&lt;size;j++) <span class="comment">//这里的i表示素数的多少倍</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//也就是说每经历一个i，就要遍历当前已经找到的素数。</span></span><br><span class="line">            isprime[i*prime[j]]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,prime[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	first(<span class="number">1000</span>);</span><br><span class="line">	print();</span><br><span class="line">	 </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>但是你会发现复杂度不是o(n)。所以这里还需要一些优化。</p>
<p>我们来看一个很简单的例子：</p>
<p>当<code>i=9</code>时，当前已有的素数有<code>2,3,5,7</code>。</p>
<p>此时我将进入二重循环，一次将<code>2 * 9 = 18, 3 * 9 = 27, 5 * 9 = 45, 7 * 9=63</code> 标记为合数。</p>
<p>但是有个问题，<code>5*9 等价于3*15</code>,也就是说当<code>i=15</code>时，也会标记一次。这明显重复了。同理<code>，7*9等价于3*21</code>，当<code>i=21</code>时，也会重复标记一次。</p>
<p>多观察几组数据后，你会发现，其实只要找到<code>i%prime[j]==0</code>时，我们就可以跳出循环了，因为后面的素数的倍数，我们可以留到后面进行标记。那么这样的猜想到底对不对？下面看一个结论和证明。</p>
<p>假设 a,d为合数，b,c为素数 其中b&gt;c.</p>
<p><code>a= b*c*d</code></p>
<p><code>令e=c*d(显然e也是合数)</code></p>
<p><code>令f=d*b(也是合数)</code></p>
<p><code>a=f*c</code> (f是合数，c是素数)。对比第一个等式,<code>a=b*c*d</code> 。我们发现a可以有这两种不同的表示方法，不同的是我们可以用一个较小的素数<em>一个较大合数  来代替   一个较大素数</em>一个较小合数<code>（a=b*(c*d)）</code>。</p>
<p>所以有下面的结论：</p>
<p>一个比合数大的素数和该合数的乘积可以用一个更大的合数和比其小的素数相乘得到。</p>
<p>那么如何优雅的在代码里运用这个结论呢？</p>
<p>答案就是只要找到一个<code>i%prime[j]==0</code> 我们就跳出循环，因为后面总有更大的合数和一个小的素数相乘，满足我们需要标记的数。</p>
<p>最终代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPrime</span><span class="params">(<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(isprime,<span class="number">1</span>,<span class="keyword">sizeof</span>(isprime));</span><br><span class="line">    isprime[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;size;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isprime[i])</span><br><span class="line">        &#123;</span><br><span class="line">            prime[++total] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=total&amp;&amp;i*prime[j]&lt;=size;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isprime[i*prime[j]]=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>素数筛</tag>
      </tags>
  </entry>
  <entry>
    <title>算法训练——素因子去重</title>
    <url>/2019/04/08/lanqiao/%E7%B4%A0%E5%9B%A0%E5%AD%90%E5%8E%BB%E9%87%8D/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个正整数n，求一个正整数p，满足p仅包含n的所有素因子，且每个素因子的次数不大于1<br><a id="more"></a></p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>一个整数，表示n</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一行，包含一个整数p。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><p>1000</p>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><p>10</p>
<h3 id="数据规模和约定"><a href="#数据规模和约定" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h3><p>n&lt;=10^12<br>样例解释：<br> n=1000=2 ^ 3 <em> 5 </em> 3，p = 2 * 5 = 10</p>
<blockquote>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h4><p>1000 = 2 <em> 2 </em> 2 <em> 5 </em> 5 * 5  <br><br>去除重复因子，最后结果为10  <br></p>
<p>代码比较暴力，一个循环找到找到素数因子。把因子存储在一个数组里，然后数组中去重。最后把数组累乘。</p>
</blockquote>
<p> 代码如下：<br> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,num[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun2</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(num[i] == m)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;m;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(m%i == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(i==m)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//给定一个正整数n，求一个正整数p，满足p仅包含n的所有素因子，且每个素因子的次数不大于1</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> k = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>,j,t = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">while</span>(n != <span class="number">1</span>)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(n % t == <span class="number">0</span> &amp;&amp; fun(t))&#123;</span><br><span class="line">			<span class="keyword">if</span>(fun2(t) &amp;&amp; t!=<span class="number">0</span>)&#123;</span><br><span class="line">				num[i++] = t;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			n = n / t;</span><br><span class="line">			t = <span class="number">2</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			t++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">		k = k * num[j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,k);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>素因子</tag>
      </tags>
  </entry>
  <entry>
    <title>迷宫—最小步数</title>
    <url>/2019/04/02/lanqiao/%E8%BF%B7%E5%AE%AB%E2%80%94%E2%80%94%E6%9C%80%E5%B0%8F%E6%AD%A5%E6%95%B0/</url>
    <content><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>这有一个迷宫，有0~8行和0~8列：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1,1,1,1,1,1,1,1,1</span><br><span class="line">1,0,0,1,0,0,1,0,1</span><br><span class="line">1,0,0,1,1,0,0,0,1</span><br><span class="line">1,0,1,0,1,1,0,1,1</span><br><span class="line">1,0,0,0,0,1,0,0,1</span><br><span class="line">1,1,0,1,0,1,0,0,1</span><br><span class="line">1,1,0,1,0,1,0,0,1</span><br><span class="line">1,1,0,1,0,0,0,0,1</span><br><span class="line">1,1,1,1,1,1,1,1,1</span><br></pre></td></tr></table></figure></div></p>
<a id="more"></a>
<p>0表示道路，1表示墙。</p>
<p>现在输入一个道路的坐标作为起点，再如输入一个道路的坐标作为终点，问最少走几步才能从起点到达终点？</p>
<p>（注：一步是指从一坐标点走到其上下左右相邻坐标点，如：从（3，1）到（4,1）。）</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第一行输入一个整数n（0&lt;n&lt;=100），表示有n组测试数据;<br>随后n行,每行有四个整数a,b,c,d（0&lt;=a,b,c,d&lt;=8)分别表示起点的行、列，终点的行、列。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出最少走几步。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><p>2</p>
<p>3 1  5 7</p>
<p>3 1  6 7</p>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><p>12</p>
<p>11</p>
<h3 id="解法一：DFS-剪枝"><a href="#解法一：DFS-剪枝" class="headerlink" title="解法一：DFS + 剪枝"></a>解法一：DFS + 剪枝</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,x1,y1,x2,y2;</span><br><span class="line"><span class="keyword">int</span> min1 = <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> maze[<span class="number">9</span>][<span class="number">9</span>]=</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==x2 &amp;&amp; y == y2)&#123;</span><br><span class="line">		</span><br><span class="line">		min1=min(min1,s);      <span class="comment">//重置最小值 </span></span><br><span class="line">		</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//剪枝 </span></span><br><span class="line">		<span class="keyword">if</span>(s&gt;min1)&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> ex = x + dx[i];</span><br><span class="line">			<span class="keyword">int</span> ey = y + dy[i];</span><br><span class="line">			<span class="keyword">if</span>(!maze[ex][ey] &amp;&amp; ex&gt;=<span class="number">0</span> &amp;&amp; ex&lt;<span class="number">9</span> &amp;&amp; ey&gt;=<span class="number">0</span> &amp;&amp; ey&lt;<span class="number">9</span>)&#123;</span><br><span class="line">				</span><br><span class="line">				maze[ex][ey] = <span class="number">1</span>;</span><br><span class="line">				dfs(ex,ey,s+<span class="number">1</span>);</span><br><span class="line">				maze[ex][ey] = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));<span class="number">1</span></span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">		dfs(x1,y1,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; min1 &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="解法二-BFS"><a href="#解法二-BFS" class="headerlink" title="解法二 :BFS"></a>解法二 :BFS</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> maze[<span class="number">9</span>][<span class="number">9</span>]=</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">    <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10</span>][<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,x1,y1,x2,y2;</span><br><span class="line"><span class="comment">//int min1 = 9999;</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x,y,s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">	node now,to;</span><br><span class="line">	</span><br><span class="line">	now.x = x;</span><br><span class="line">	now.y = y;</span><br><span class="line">	now.s = s;</span><br><span class="line">	</span><br><span class="line">	vis[x][y] = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	q.push(now);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">		</span><br><span class="line">		now = q.front();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//判断是否走完 </span></span><br><span class="line">		<span class="keyword">if</span>(now.x == x2 &amp;&amp; now.y == y2)&#123;</span><br><span class="line">			<span class="keyword">return</span> now.s;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//首结点出队 </span></span><br><span class="line">		q.pop();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 添加相连结点</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> xx = now.x + dx[i];         <span class="comment">//从出队的那个结点开始继续 走 </span></span><br><span class="line">			<span class="keyword">int</span> yy = now.y + dy[i];</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(vis[xx][yy] == <span class="number">0</span> &amp;&amp; maze[xx][yy] == <span class="number">0</span> &amp;&amp; xx&gt;=<span class="number">0</span> &amp;&amp; xx&lt;<span class="number">9</span> &amp;&amp; yy &gt;=<span class="number">0</span> &amp;&amp; yy&lt;<span class="number">9</span>)&#123;</span><br><span class="line">				</span><br><span class="line">				vis[xx][yy] = <span class="number">1</span>;</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//把相连的结点入队。 </span></span><br><span class="line">				to.x = xx;</span><br><span class="line">				to.y = yy;</span><br><span class="line">				to.s = now.s + <span class="number">1</span>;</span><br><span class="line">				</span><br><span class="line">				q.push(to);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">		<span class="keyword">int</span> min1 =  bfs(x1,y1,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>最小步数</tag>
      </tags>
  </entry>
  <entry>
    <title>图的基本算法（BFS和DFS）</title>
    <url>/2019/04/02/lanqiao/%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95%EF%BC%88BFS%E5%92%8CDFS%EF%BC%89/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>图是一种灵活的数据结构，一般作为一种模型用来定义对象之间的关系或联系。对象由顶点（V）表示，而对象之间的关系或者关联则通过图的边（E）来表示。<br>图可以分为有向图和无向图，一般用G=(V,E)来表示图。经常用邻接矩阵或者邻接表来描述一副图。<br>在图的基本算法中，最初需要接触的就是图的遍历算法，根据访问节点的顺序，可分为广度优先搜索（BFS）和深度优先搜索（DFS）。<br><a id="more"></a></p>
<h4 id="广度优先搜索（BFS）"><a href="#广度优先搜索（BFS）" class="headerlink" title="广度优先搜索（BFS）"></a>广度优先搜索（BFS）</h4><p>广度优先搜索在进一步遍历图中顶点之前，先访问当前顶点的所有邻接结点。</p>
<ol>
<li><p>首先选择一个顶点作为起始结点，并将其染成灰色，其余结点为白色。</p>
</li>
<li><p>将起始结点放入队列中。</p>
</li>
<li><p>从队列首部选出一个顶点，并找出所有与之邻接的结点，将找到的邻接结点放入队列尾部，将已访问过结点涂成黑色，没访问过的结点是白色。如果顶点的颜色是灰色，表示已经发现并且放入了队列，如果顶点的颜色是白色，表示还没有发现</p>
</li>
<li><p>按照同样的方法处理队列中的下一个结点。<br>基本就是出队的顶点变成黑色，在队列里的是灰色，还没入队的是白色。</p>
</li>
</ol>
<p>用一副图来表达这个流程如下：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/4/2/169ddc4d7e3bb792?w=290&amp;h=259&amp;f=png&amp;s=23535" data-fancybox="group" data-caption="图1" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/4/2/169ddc4d7e3bb792?w=290&amp;h=259&amp;f=png&amp;s=23535" alt="图1" title="图1"></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/4/2/169ddc5ec640d808?w=290&amp;h=255&amp;f=png&amp;s=23358" data-fancybox="group" data-caption="图2" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/4/2/169ddc5ec640d808?w=290&amp;h=255&amp;f=png&amp;s=23358" alt="图2" title="图2"></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/4/2/169ddc6237cf353d?w=292&amp;h=303&amp;f=png&amp;s=23787" data-fancybox="group" data-caption="图3" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/4/2/169ddc6237cf353d?w=292&amp;h=303&amp;f=png&amp;s=23787" alt="图3" title="图3"></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/4/2/169ddc6540fd2deb?w=302&amp;h=266&amp;f=png&amp;s=22925" data-fancybox="group" data-caption="图4" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/4/2/169ddc6540fd2deb?w=302&amp;h=266&amp;f=png&amp;s=22925" alt="图4" title="图4"></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/4/2/169ddc679654bdfb?w=297&amp;h=248&amp;f=png&amp;s=22326" data-fancybox="group" data-caption="图5" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/4/2/169ddc679654bdfb?w=297&amp;h=248&amp;f=png&amp;s=22326" alt="图5" title="图5"></a></p>
<p>从顶点1开始进行广度优先搜索：</p>
<ol>
<li>初始状态，从顶点1开始，队列={1}</li>
<li>访问1的邻接顶点，1出队变黑，2,3入队，队列={2,3,}</li>
<li>访问2的邻接结点，2出队，4入队，队列={3,4}</li>
<li>访问3的邻接结点，3出队，队列={4}</li>
<li>访问4的邻接结点，4出队，队列={ 空}</li>
<li>结点5对于1来说不可达。</li>
</ol>
<p>上面的图可以通过如下邻接矩阵表示：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int maze[5][5] = &#123;</span><br><span class="line">    &#123; 0, 1, 1, 0, 0 &#125;,</span><br><span class="line">    &#123; 0, 0, 1, 1, 0 &#125;,</span><br><span class="line">    &#123; 0, 1, 1, 1, 0 &#125;,</span><br><span class="line">    &#123; 1, 0, 0, 0, 0 &#125;,</span><br><span class="line">    &#123; 0, 0, 1, 1, 0 &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p>
<p>BFS核心代码如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> maze[N][N] = &#123;</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> visited[N + <span class="number">1</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    Q.push(start);</span><br><span class="line">    visited[start] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> front = Q.front();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; front &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i] &amp;&amp; maze[front - <span class="number">1</span>][i - <span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                visited[i] = <span class="number">1</span>;</span><br><span class="line">                Q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[i] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        BFS(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h4 id="深度优先搜索（DFS）"><a href="#深度优先搜索（DFS）" class="headerlink" title="深度优先搜索（DFS）"></a>深度优先搜索（DFS）</h4><p>深度优先搜索在搜索过程中访问某个顶点后，需要递归地访问此顶点的所有未访问过的相邻顶点。</p>
<p>初始条件下所有节点为白色，选择一个作为起始顶点，按照如下步骤遍历：</p>
<ol>
<li>选择起始顶点涂成灰色，表示还未访问</li>
<li>从该顶点的邻接顶点中选择一个，继续这个过程（即再寻找邻接结点的邻接结点），一直深入下去，直到一个顶点没有邻接结点了，涂黑它，表示访问过了</li>
<li>回溯到这个涂黑顶点的上一层顶点，再找这个上一层顶点的其余邻接结点，继续如上操作，如果所有邻接结点往下都访问过了，就把自己涂黑，再回溯到更上一层。</li>
<li>上一层继续做如上操作，知道所有顶点都访问过。<br>用图可以更清楚的表达这个过程：</li>
</ol>
<p><a href="https://user-gold-cdn.xitu.io/2019/4/2/169ddca08108a764?w=282&amp;h=253&amp;f=png&amp;s=22333" data-fancybox="group" data-caption="图1" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/4/2/169ddca08108a764?w=282&amp;h=253&amp;f=png&amp;s=22333" alt="图1" title="图1"></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/4/2/169ddca3106c5f7b?w=298&amp;h=233&amp;f=png&amp;s=22537" data-fancybox="group" data-caption="图2" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/4/2/169ddca3106c5f7b?w=298&amp;h=233&amp;f=png&amp;s=22537" alt="图2" title="图2"></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/4/2/169ddca4f01345e1?w=302&amp;h=248&amp;f=png&amp;s=22268" data-fancybox="group" data-caption="图3" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/4/2/169ddca4f01345e1?w=302&amp;h=248&amp;f=png&amp;s=22268" alt="图3" title="图3"></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/4/2/169ddca6f959bcac?w=288&amp;h=247&amp;f=png&amp;s=21638" data-fancybox="group" data-caption="图4" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/4/2/169ddca6f959bcac?w=288&amp;h=247&amp;f=png&amp;s=21638" alt="图4" title="图4"></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/4/2/169ddca9425a0352?w=264&amp;h=241&amp;f=png&amp;s=21056" data-fancybox="group" data-caption="图5" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/4/2/169ddca9425a0352?w=264&amp;h=241&amp;f=png&amp;s=21056" alt="图5" title="图5"></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/4/2/169ddcab54198b2d?w=287&amp;h=237&amp;f=png&amp;s=20928" data-fancybox="group" data-caption="图6" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/4/2/169ddcab54198b2d?w=287&amp;h=237&amp;f=png&amp;s=20928" alt="图6" title="图6"></a></p>
<p>从顶点1开始做深度搜索：</p>
<ol>
<li><p>初始状态，从顶点1开始</p>
</li>
<li><p>依次访问过顶点1,2,3后，终止于顶点3</p>
</li>
<li><p>从顶点3回溯到顶点2，继续访问顶点5，并且终止于顶点5</p>
</li>
<li><p>从顶点5回溯到顶点2，并且终止于顶点2</p>
</li>
<li><p>从顶点2回溯到顶点1，并终止于顶点1</p>
</li>
<li><p>从顶点4开始访问，并终止于顶点4</p>
</li>
</ol>
<p>上面的图可以通过如下邻接矩阵表示：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int maze[5][5] = &#123;</span><br><span class="line">    &#123; 0, 1, 1, 0, 0 &#125;,</span><br><span class="line">    &#123; 0, 0, 1, 0, 1 &#125;,</span><br><span class="line">    &#123; 0, 0, 1, 0, 0 &#125;,</span><br><span class="line">    &#123; 1, 1, 0, 0, 1 &#125;,</span><br><span class="line">    &#123; 0, 0, 1, 0, 0 &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p>
<p>DFS核心代码如下（递归实现）：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> maze[N][N] = &#123;</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> visited[N + <span class="number">1</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visited[start] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i] &amp;&amp; maze[start - <span class="number">1</span>][i - <span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">            DFS(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; start &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[i] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        DFS(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>非递归实现如下，借助一个栈：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> maze[N][N] = &#123;</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> visited[N + <span class="number">1</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    s.push(start);</span><br><span class="line">    visited[start] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">bool</span> is_push = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        is_push = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> v = s.top();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (maze[v - <span class="number">1</span>][i - <span class="number">1</span>] == <span class="number">1</span> &amp;&amp; !visited[i])</span><br><span class="line">            &#123;</span><br><span class="line">                visited[i] = <span class="number">1</span>;</span><br><span class="line">                s.push(i);</span><br><span class="line">                is_push = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!is_push)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            s.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[i] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        DFS(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>有的DFS是先访问读取到的结点，等回溯时就不再输出该结点，也是可以的。算法和我上面的区别就是输出点的时机不同，思想还是一样的。DFS在环监测和拓扑排序中都有不错的应用。</p>
<p>作者：卡巴拉的树<br>链接：<a href="https://www.jianshu.com/p/70952b51f0c8" target="_blank" rel="noopener">https://www.jianshu.com/p/70952b51f0c8</a><br>来源：简书</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——审美课</title>
    <url>/2019/03/29/lanqiao/%E5%AE%A1%E7%BE%8E%E8%AF%BE%20/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>《审美的历程》课上有n位学生，帅老师展示了m幅画，其中有些是梵高的作品，另外的都出自五岁小朋友之手。老师请同学们分辨哪些画的作者是梵高，但是老师自己并没有答案，因为这些画看上去都像是小朋友画的……老师只想知道，有多少对同学给出的答案完全相反，这样他就可以用这个数据去揭穿披着皇帝新衣的抽象艺术了（支持帅老师^_^）。</p>
<p>答案完全相反是指对每一幅画的判断都相反。<br><a id="more"></a></p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行两个数n和m，表示学生数和图画数；</p>
<p>接下来是一个n*m的01矩阵A：</p>
<p>如果aij=0，表示学生i觉得第j幅画是小朋友画的；</p>
<p>如果aij=1，表示学生i觉得第j幅画是梵高画的。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>　　输出一个数ans：表示有多少对同学的答案完全相反。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><p>3 2</p>
<p>1 0</p>
<p>0 1</p>
<p>1 0</p>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><p>2</p>
<h3 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h3><p>同学1和同学2的答案完全相反；</p>
<p>同学2和同学3的答案完全相反；</p>
<p>所以答案是2。</p>
<h3 id="数据规模和约定"><a href="#数据规模和约定" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h3><p>对于50%的数据：n&lt;=1000；</p>
<p>对于80%的数据：n&lt;=10000；</p>
<p>对于100%的数据：n&lt;=50000，m&lt;=20。</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50001</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">2000000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">			<span class="keyword">int</span> temp;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">			a[i] = (a[i]&lt;&lt;<span class="number">1</span>) + temp;      <span class="comment">//把同学输入的 0 1表示为十进制 </span></span><br><span class="line">		&#125;</span><br><span class="line">		ans[a[i]]++;               <span class="comment">// 计算出相同输入时重复的个数 </span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> max = (<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>;            <span class="comment">//代表 m 可以表示的最大的二进制数</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123; </span><br><span class="line">		<span class="keyword">int</span> temp = a[i]^max;       <span class="comment">//取反 </span></span><br><span class="line">		sum += ans[temp] ;         <span class="comment">//取反后，找到对应ans里面的数目。若能找到就是 完全相反的数。 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum/<span class="number">2</span>);          <span class="comment">//每一对相反的同学都计算了一遍，所有除 2 </span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="评测详情"><a href="#评测详情" class="headerlink" title="评测详情"></a>评测详情</h4><p><a href="https://user-gold-cdn.xitu.io/2019/3/29/169c97c04892e8e5?w=1102&amp;h=76&amp;f=png&amp;s=8312" data-fancybox="group" data-caption="评测详情" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/3/29/169c97c04892e8e5?w=1102&amp;h=76&amp;f=png&amp;s=8312" alt="评测详情" title="评测详情"></a></p>
]]></content>
      <categories>
        <category>蓝桥杯试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
        <tag>二进制表示</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——剪邮票</title>
    <url>/2019/03/18/lanqiao/%E5%89%AA%E9%82%AE%E7%A5%A8/</url>
    <content><![CDATA[<h3 id="方格填数"><a href="#方格填数" class="headerlink" title="方格填数"></a>方格填数</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>如图1, 有12张连在一起的12生肖的邮票。<br>现在你要从中剪下5张来，要求必须是连着的。<br>（仅仅连接一个角不算相连）<br>比如，【图2.jpg】，【图3.jpg】中，粉红色所示部分就是合格的剪取。</p>
<p>请你计算，一共有多少种不同的剪取方法。<br><a id="more"></a><br>请填写表示方案数目的整数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/3/18/1699117c7bf4c580?w=799&amp;h=512&amp;f=png&amp;s=23225" data-fancybox="group" data-caption class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/3/18/1699117c7bf4c580?w=799&amp;h=512&amp;f=png&amp;s=23225" alt title></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/3/18/169911806b1e35ae?w=741&amp;h=492&amp;f=png&amp;s=22560" data-fancybox="group" data-caption class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/3/18/169911806b1e35ae?w=741&amp;h=492&amp;f=png&amp;s=22560" alt title></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/3/18/169911863709d903?w=748&amp;h=458&amp;f=png&amp;s=30813" data-fancybox="group" data-caption class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/3/18/169911863709d903?w=748&amp;h=458&amp;f=png&amp;s=30813" alt title></a><br> <strong>正确答案    116</strong></p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>使用深度优先搜索算法把1-12的所有数字进行取值，只取5个值，去除重复。然后把一维数组中的值表示成二维数组中的位置。最后搜索连通图。</p>
<h4 id="代码如下-："><a href="#代码如下-：" class="headerlink" title="代码如下 ："></a>代码如下 ：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> chess[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//x方向 </span></span><br><span class="line"><span class="keyword">int</span> ex[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//y方法 </span></span><br><span class="line"><span class="keyword">int</span> ey[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//坐标转换 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">int</span> k,row,col;</span><br><span class="line">	<span class="built_in">memset</span>(chess,<span class="number">0</span>,<span class="keyword">sizeof</span>(chess));        <span class="comment">//一定要置零，因为有些图中不连续，判断连通时，无法将不连续的置0。 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">	</span><br><span class="line">		k = num[i];</span><br><span class="line">		row = (k<span class="number">-1</span>) / <span class="number">4</span>;</span><br><span class="line">		col = (k<span class="number">-1</span>) - row*<span class="number">4</span>; </span><br><span class="line">		chess[row][col] = k; </span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">//把第一个要搜索的位置 置0，搜索次数为0. </span></span><br><span class="line">	g = <span class="number">1</span>;</span><br><span class="line">	chess[row][col]=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	DFS_2(row,col);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(g==<span class="number">5</span>)&#123;</span><br><span class="line">		h++;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否连通 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_2</span><span class="params">(<span class="keyword">int</span> sx,<span class="keyword">int</span> sy)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> x = sx + ex[i];</span><br><span class="line">		<span class="keyword">int</span> y = sy + ey[i];</span><br><span class="line">		<span class="keyword">int</span> t = chess[x][y];</span><br><span class="line">		<span class="keyword">if</span>(t &amp;&amp; x&gt;=<span class="number">0</span> &amp;&amp; x&lt;<span class="number">3</span> &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;<span class="number">4</span>)&#123;</span><br><span class="line">			g++;</span><br><span class="line">			chess[x][y] = <span class="number">0</span>;</span><br><span class="line">			DFS_2(x,y);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(index == <span class="number">5</span>)&#123;</span><br><span class="line">		ans ++;</span><br><span class="line">		fun();</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		<span class="keyword">for</span>(i=k+<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)&#123;</span><br><span class="line">			num[index] = i;</span><br><span class="line">			DFS(index+<span class="number">1</span>,i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	DFS(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="comment">//printf("%d\n",ans);</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,h);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h4><p><a href="https://user-gold-cdn.xitu.io/2019/3/18/169911c1e823891c?w=566&amp;h=161&amp;f=png&amp;s=6904" data-fancybox="group" data-caption class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/3/18/169911c1e823891c?w=566&amp;h=161&amp;f=png&amp;s=6904" alt title></a></p>
]]></content>
      <categories>
        <category>蓝桥杯试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
        <tag>深度优先搜索</tag>
        <tag>连通图</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——方格填数</title>
    <url>/2019/03/16/lanqiao/%E6%96%B9%E6%A0%BC%E5%A1%AB%E6%95%B0/</url>
    <content><![CDATA[<h3 id="方格填数"><a href="#方格填数" class="headerlink" title="方格填数"></a>方格填数</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>如下图的10个格子</p>
<p>填入0~9的数字。要求：连续的两个数字不能相邻。<br>（左右、上下、对角都算相邻）</p>
<p>一共有多少种可能的填数方案？<br><a id="more"></a><br><a href="https://user-gold-cdn.xitu.io/2019/3/16/169856f67996611a?w=687&amp;h=472&amp;f=png&amp;s=21699" data-fancybox="group" data-caption="图" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/3/16/169856f67996611a?w=687&amp;h=472&amp;f=png&amp;s=21699" alt="图" title="图"></a><br>请填写表示方案数目的整数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p>
<p> <strong>正确答案    1580</strong></p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>使用深度优先搜索进行0-9数字的全排序。排除不能放置的位置。</p>
<h4 id="方法一-："><a href="#方法一-：" class="headerlink" title="方法一 ："></a>方法一 ：</h4><p>数去找位置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">-3</span>,<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-3</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> nn = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//判断是否连续 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==m+<span class="number">1</span> || n==m<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给数组赋值 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> row = i / <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">int</span> col = i - <span class="number">4</span> * row;</span><br><span class="line">	num[row][col] = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到数组的值 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValue</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> row = i / <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">int</span> col = i - <span class="number">4</span> * row;</span><br><span class="line">	<span class="keyword">return</span> num[row][col];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否放值 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> row = i / <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">int</span> col = i - <span class="number">4</span> * row;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> k,t;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">4</span>;t++)&#123;</span><br><span class="line">			<span class="comment">//对角 </span></span><br><span class="line">			<span class="keyword">if</span>((<span class="built_in">abs</span>(k-row)==<span class="number">1</span> &amp;&amp; <span class="built_in">abs</span>(t-col)== <span class="number">1</span> ) &amp;&amp; fun1(n,num[k][t]))&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//上下 </span></span><br><span class="line">			<span class="keyword">if</span>((<span class="built_in">abs</span>(k-row)==<span class="number">1</span> &amp;&amp; <span class="built_in">abs</span>(t-col) == <span class="number">0</span> ) &amp;&amp; fun1(n,num[k][t]))&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//左右 </span></span><br><span class="line">			<span class="keyword">if</span>((<span class="built_in">abs</span>(k-row)==<span class="number">0</span> &amp;&amp; <span class="built_in">abs</span>(t-col) == <span class="number">1</span> ) &amp;&amp; fun1(n,num[k][t]))&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">10</span>)&#123;</span><br><span class="line">		nn++;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(getValue(i) == <span class="number">-3</span>)&#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(fun(i,n) &amp;&amp; getValue(i)==<span class="number">-2</span>)&#123;</span><br><span class="line">				setValue(i,n);</span><br><span class="line">				dfs(n+<span class="number">1</span>);</span><br><span class="line">				setValue(i,<span class="number">-2</span>);;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>,num[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	dfs(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,nn);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="方法二-："><a href="#方法二-：" class="headerlink" title="方法二 ："></a>方法二 ：</h4><p>位置上去放数，需要去重。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">3</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">	&#123;<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">	&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">	&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-2</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>,num[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLegal</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line"></span><br><span class="line">	 </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">			<span class="comment">//上下 </span></span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">abs</span>(i-x) == <span class="number">1</span> &amp;&amp; j==y &amp;&amp; (num[i][j]==t+<span class="number">1</span> || num[i][j]==t<span class="number">-1</span>))&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//左右 </span></span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">abs</span>(j-y)==<span class="number">1</span> &amp;&amp; i==x &amp;&amp; (num[i][j]==t+<span class="number">1</span> || num[i][j]==t<span class="number">-1</span>))&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//对角</span></span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">abs</span>(j-y)==<span class="number">1</span> &amp;&amp; <span class="built_in">abs</span>(i-x) ==<span class="number">1</span> &amp;&amp; (num[i][j]==t+<span class="number">1</span> || num[i][j]==t<span class="number">-1</span>))&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125; </span><br><span class="line">			</span><br><span class="line">			<span class="comment">//去重</span></span><br><span class="line">			<span class="keyword">if</span>(num[i][j] == t)&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">3</span>)&#123;</span><br><span class="line">		ans ++;</span><br><span class="line">		print();</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		<span class="keyword">if</span>((x==<span class="number">0</span>&amp;&amp;y==<span class="number">0</span>) ||(x==<span class="number">2</span>&amp;&amp;y==<span class="number">3</span>))&#123;</span><br><span class="line">			dfs(x+(y+<span class="number">1</span>)/<span class="number">4</span>,(y+<span class="number">1</span>)%<span class="number">4</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">11</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(isLegal(x,y,i) &amp;&amp; num[x][y] == <span class="number">-1</span>)&#123;</span><br><span class="line">					num[x][y] = i; </span><br><span class="line">					</span><br><span class="line">					dfs(x+(y+<span class="number">1</span>)/<span class="number">4</span>,(y+<span class="number">1</span>)%<span class="number">4</span>);</span><br><span class="line">					</span><br><span class="line">					num[x][y] = <span class="number">-1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h4><p><a href="https://user-gold-cdn.xitu.io/2019/3/16/1698571145f039e2?w=513&amp;h=117&amp;f=png&amp;s=3913" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/3/16/1698571145f039e2?w=513&amp;h=117&amp;f=png&amp;s=3913" alt="输出结果" title="输出结果"></a></p>
]]></content>
      <categories>
        <category>蓝桥杯试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
        <tag>深度优先搜索</tag>
        <tag>全排列</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——凑算式</title>
    <url>/2019/03/15/lanqiao/%E5%87%91%E7%AE%97%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="凑算式"><a href="#凑算式" class="headerlink" title="凑算式"></a>凑算式</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><script type="math/tex; mode=display">A + \frac{B}{C} +\frac{DEF}{GHI}  = 10</script><p>（如果显示有问题，可以参见【图1】）</p>
<p>这个算式中A~I代表1~9的数字，不同的字母代表不同的数字。</p>
<p>比如：<br>6+8/3+952/714 就是一种解法，<br>5+3/1+972/486 是另一种解法。</p>
<p>这个算式一共有多少种解法？<br><a id="more"></a><br>注意：你提交应该是个整数，不要填写任何多余的内容或说明性文字。</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/3/15/16981c3393e424ee?w=736&amp;h=381&amp;f=png&amp;s=18339" data-fancybox="group" data-caption="图1" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/3/15/16981c3393e424ee?w=736&amp;h=381&amp;f=png&amp;s=18339" alt="图1" title="图1"></a></p>
<p> <strong>正确答案    29</strong></p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>使用深度优先搜索进行1-9数字的全排序。然后求和与10比较。</p>
<h4 id="方法一-："><a href="#方法一-：" class="headerlink" title="方法一 ："></a>方法一 ：</h4><p>需要放置的数去找位置：<br>//需要放置的数去找位置 (每一个n对应9个位置)<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getSum</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> sum = num[<span class="number">0</span>] + (<span class="keyword">double</span>)num[<span class="number">1</span>] /num[<span class="number">2</span>] + (<span class="keyword">double</span>) (num[<span class="number">3</span>] *<span class="number">100</span> + num[<span class="number">4</span>] *<span class="number">10</span> +num[<span class="number">5</span>]) / (num[<span class="number">6</span>] *<span class="number">100</span>+num[<span class="number">7</span>] *<span class="number">10</span> + num[<span class="number">8</span>]);</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(getSum()==<span class="number">10</span> &amp;&amp; n == <span class="number">10</span>)&#123;</span><br><span class="line">		t++;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(num[i]==<span class="number">0</span>)&#123;</span><br><span class="line">				num[i] = n;</span><br><span class="line">				dfs(n+<span class="number">1</span>);</span><br><span class="line">				num[i] = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	dfs(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"t = %d\n"</span>,t);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h4 id="方法二-："><a href="#方法二-：" class="headerlink" title="方法二 ："></a>方法二 ：</h4><p>位置上去放数(每一个位置可以放9个数) ， 需要剔除重复放置的数，比如1只能放一遍。</p>
<p>代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getSum</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> sum = num[<span class="number">0</span>] + (<span class="keyword">double</span>)num[<span class="number">1</span>] /num[<span class="number">2</span>] + (<span class="keyword">double</span>) (num[<span class="number">3</span>] *<span class="number">100</span> + num[<span class="number">4</span>] *<span class="number">10</span> +num[<span class="number">5</span>]) / (num[<span class="number">6</span>] *<span class="number">100</span>+num[<span class="number">7</span>] *<span class="number">10</span> + num[<span class="number">8</span>]);</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//位置(n)去放数(每一个位置可以放9个数) </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">9</span> &amp;&amp; getSum() == <span class="number">10</span>)&#123;</span><br><span class="line">		t++;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">				vis[i] = <span class="number">1</span>;</span><br><span class="line">				num[n] = i;</span><br><span class="line">				dfs2(n+<span class="number">1</span>);</span><br><span class="line">				vis[i] = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	dfs2(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"t = %d\n"</span>,t);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h4><p><a href="https://user-gold-cdn.xitu.io/2019/3/15/16981c29afa32d3f?w=718&amp;h=158&amp;f=png&amp;s=7383" data-fancybox="group" data-caption class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/3/15/16981c29afa32d3f?w=718&amp;h=158&amp;f=png&amp;s=7383" alt title></a></p>
]]></content>
      <categories>
        <category>蓝桥杯试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
        <tag>深度优先搜索</tag>
        <tag>全排列</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——数独排列</title>
    <url>/2019/03/14/lanqiao/%E6%95%B0%E7%8B%AC%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<h3 id="数字排列"><a href="#数字排列" class="headerlink" title="数字排列"></a>数字排列</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>你一定听说过“数独”游戏。<br>如【图1.png】，玩家需要根据9×9盘面上的已知数字，推理出所有剩余空格的数字，并满足每一行、每一列、每一个同色九宫内的数字均含1-9，不重复。</p>
<p>数独的答案都是唯一的，所以，多个解也称为无解。</p>
<p>本图的数字据说是芬兰数学家花了3个月的时间设计出来的较难的题目。但对会使用计算机编程的你来说，恐怕易如反掌了。<br><a id="more"></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/3/14/1697b27934a755a1?w=437&amp;h=420&amp;f=png&amp;s=127437" data-fancybox="group" data-caption="图1" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/3/14/1697b27934a755a1?w=437&amp;h=420&amp;f=png&amp;s=127437" alt="图1" title="图1"></a><br>本题的要求就是输入数独题目，程序输出数独的唯一解。我们保证所有已知数据的格式都是合法的，并且题目有唯一的解。</p>
<p>格式要求，输入9行，每行9个数字，0代表未知，其它数字为已知。<br>输出9行，每行9个数字表示数独的解。</p>
<p>例如：<br>输入（即图中题目）：<br><br>005300000<br><br>800000020<br><br>070010500<br><br>400005300<br><br>010070006<br><br>003200080<br><br>060500009<br><br>004000030<br><br>000009700<br></p>
<p>程序应该输出：<br><br>145327698<br><br>839654127<br><br>672918543<br><br>496185372<br><br>218473956<br><br>753296481<br><br>367542819<br><br>984761235<br><br>521839764<br></p>
<p>再例如，输入：<br><br>800000000<br><br>003600000<br><br>070090200<br><br>050007000<br><br>000045700<br><br>000100030<br><br>001000068<br><br>008500010<br><br>090000400<br></p>
<p>程序应该输出：<br><br>812753649<br><br>943682175<br><br>675491283<br><br>154237896<br><br>369845721<br><br>287169534<br><br>521974368<br><br>438526917<br><br>796318452<br></p>
<h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[N][N] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">//输出 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>,num[i][j]);</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//放在指定位置上的数是否合法 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLegal</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ii,jj;</span><br><span class="line">	<span class="comment">//行 </span></span><br><span class="line">	<span class="keyword">for</span>(ii=<span class="number">0</span>;ii&lt;N;ii++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(num[i][ii] == data )&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//列 </span></span><br><span class="line">	<span class="keyword">for</span>(ii=<span class="number">0</span>;ii&lt;N;ii++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(num[ii][j] == data)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//方块 </span></span><br><span class="line">	<span class="keyword">for</span>(ii = i / <span class="number">3</span> *<span class="number">3</span>; ii&lt; i / <span class="number">3</span> *<span class="number">3</span> + <span class="number">3</span>; ii++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(jj = j / <span class="number">3</span> * <span class="number">3</span>; jj&lt;j / <span class="number">3</span> *<span class="number">3</span> + <span class="number">3</span>; jj++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(num[ii][jj] == data)&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">	<span class="comment">//搜索结束 </span></span><br><span class="line">	<span class="keyword">if</span>(row == N)&#123;</span><br><span class="line">		print(); </span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> k;</span><br><span class="line">		<span class="keyword">if</span>(num[row][col]==<span class="number">0</span>)&#123;       <span class="comment">//判断这个位置是否已经被占用 </span></span><br><span class="line">		</span><br><span class="line">			<span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=N;k++)&#123;       <span class="comment">//遍历可能会放置的数 </span></span><br><span class="line">				<span class="keyword">if</span>(isLegal(row,col,k))&#123;      <span class="comment">// 放在指定位置上的数是否合法 </span></span><br><span class="line">					num[row][col] = k;      <span class="comment">//合法就放置 </span></span><br><span class="line">					dfs(row+(col+<span class="number">1</span>)/<span class="number">9</span>,(col+<span class="number">1</span>)%<span class="number">9</span>);   <span class="comment">//搜索下一个或者下一行 </span></span><br><span class="line">					num[row][col] = <span class="number">0</span>;      <span class="comment">//已经搜索过当不合适置 0 </span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			 </span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			dfs(row+(col+<span class="number">1</span>)/<span class="number">9</span>,(col+<span class="number">1</span>)%<span class="number">9</span>);   <span class="comment">//搜索下一个或者下一行 </span></span><br><span class="line">		&#125; </span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;num[i][j]);</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//print(); </span></span><br><span class="line">	dfs(<span class="number">0</span>,<span class="number">0</span>); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果:</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/3/14/1697b267ceef667f?w=497&amp;h=313&amp;f=png&amp;s=9265" data-fancybox="group" data-caption class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/3/14/1697b267ceef667f?w=497&amp;h=313&amp;f=png&amp;s=9265" alt title></a></p>
]]></content>
      <categories>
        <category>蓝桥杯试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
        <tag>深度优先搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——数字排列（今有7对数字）</title>
    <url>/2019/03/13/lanqiao/%E6%95%B0%E5%AD%97%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<h3 id="数字排列"><a href="#数字排列" class="headerlink" title="数字排列"></a>数字排列</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>今有7对数字：两个1，两个2，两个3，…两个7，把它们排成一行。<br>要求，两个1间有1个其它数字，两个2间有2个其它数字，以此类推，两个7之间有7个其它数字。如下就是一个符合要求的排列：</p>
<p>17126425374635</p>
<p>当然，如果把它倒过来，也是符合要求的。</p>
<p>请你找出另一种符合要求的排列法，并且这个排列法是以74开头的。</p>
<p>注意：只填写这个14位的整数，不能填写任何多余的内容，比如说明注释等。<br><a id="more"></a></p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>题目很好理解，就是俺规则放置14个数字。每2个数字有下标规律，并且题目已经说明以74开头，所以其实就是放置1-5五个数字。所有呀，首先想到的手写法，把出现的情况列出来。这个是解法一。另外一个方法就是搜索了。每一个存在的位置都有5中放法。所有采用深度优先搜索的方法。</p>
<h4 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h4><p>列出所有情况：<br>首次写错题目要求的 74开头的序列：</p>
<p>7 4 _ _ _ _ 4 _ 7 _ _ _ _ _</p>
<p>如果直接放置1-3情况较多，所有首先放 6 和 5</p>
<p>所有含有6的情况：</p>
<p>7 4 _ _ _ 6 4 _ 7 _ _ _ 6 _</p>
<p>7 4 _ _ 6 _ 4 _ 7 _ _ 6 _ _</p>
<p>7 4 _ 6 _ _ 4 _ 7 _ 6 _ _ _</p>
<p>7 4 6 _ _ _ 4 _ 7 6 _ _ _ _</p>
<p>如果列出所有含有6和5的情况：</p>
<p>7 4 _ _ _ 6 4 5 7 _ _ _ 6 5</p>
<p>7 4 _ _ 5 6 4 _ 7 _ 5 _ 6 _</p>
<p>7 4 _ 5 _ 6 4 _ 7 5 _ _ 6 _</p>
<p>. . . . . . .</p>
<p>然后放置3 2 1 。<br>最后能得出结果：</p>
<p>7 4 1 5 1 6 4 3 7 5 2 3 6 2</p>
<h4 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h4><p>使用递归试探所有出现的所有种情况，剔除 数值为4和7的情况，并且剔除 下4和7出现所有情况的下标。<code>i=1,i =2,i = 7,i = 9</code>的情况。</p>
<p>按照n=1~7进行DFS：我们每次尝试在当前存在的若干空位中放入n，如果可以放入，就往下搜索n+1；<br>代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">15</span>]= &#123;<span class="number">0</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//跳过n=4的情况 </span></span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">4</span>) &#123;</span><br><span class="line">		dfs(n+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="comment">//已经放满，输出n=7的情况。 </span></span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">7</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="number">14</span>; i++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d"</span>,num[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="number">14</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">1</span> || i==<span class="number">2</span> || i==<span class="number">7</span> || i==<span class="number">9</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//放入的数对应的下一个位置 </span></span><br><span class="line">		<span class="keyword">int</span> bak=i+n+<span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//溢出 </span></span><br><span class="line">		<span class="keyword">if</span>(bak&gt;<span class="number">14</span>) </span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//放置 </span></span><br><span class="line">		<span class="keyword">if</span>(num[i]==<span class="number">0</span> &amp;&amp; num[bak]==<span class="number">0</span>) &#123;</span><br><span class="line">			num[i]=num[bak]=n;</span><br><span class="line">			dfs(n+<span class="number">1</span>);</span><br><span class="line">			num[i]=num[bak]=<span class="number">0</span>;   <span class="comment">//回溯，其中一种情况结束后，把使用的位置恢复为原来的值。  </span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	dfs(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果:</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/3/13/16976ec320638770?w=495&amp;h=111&amp;f=png&amp;s=3975" data-fancybox="group" data-caption class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/3/13/16976ec320638770?w=495&amp;h=111&amp;f=png&amp;s=3975" alt title></a></p>
]]></content>
      <categories>
        <category>蓝桥杯试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——完美的代价</title>
    <url>/2019/02/27/lanqiao/%E5%AE%8C%E7%BE%8E%E7%9A%84%E4%BB%A3%E4%BB%B7/</url>
    <content><![CDATA[<h3 id="完美的代价"><a href="#完美的代价" class="headerlink" title="完美的代价"></a>完美的代价</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。</p>
<p>交换的定义是：交换两个相邻的字符<br><a id="more"></a><br>&emsp;&emsp;例如mamad</p>
<p>&emsp;&emsp;第一次交换 ad : mamda</p>
<p>&emsp;&emsp;第二次交换 md : madma</p>
<p>&emsp;&emsp;第三次交换 ma : madam  (回文！完美！)</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行是一个整数N，表示接下来的字符串的长度(N &lt;= 8000)</p>
<p>第二行是一个字符串，长度为N.只包含小写字母</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果可能，输出最少的交换次数。</p>
<p>否则输出Impossible</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>5</p>
<p>mamad</p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>3</p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">char</span> *s;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	s = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*n);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i,j,k,t,flag,c,sum;     <span class="comment">//i第一个元素下标，j最后一个元素下标 ，k记录已经交换好的元素。 </span></span><br><span class="line">	sum = <span class="number">0</span>;</span><br><span class="line">	flag = <span class="number">0</span>;</span><br><span class="line">	c = <span class="number">-1</span>;</span><br><span class="line">	k = n <span class="number">-1</span>;</span><br><span class="line">	<span class="comment">//使用贪心算法，将每个遍历的字符找到后面与他相同的然后交换到正确的位置时所需的交换次数</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;k; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=k; j&gt;=i; j--)&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(j==i)&#123;          <span class="comment">//没有找到与arr[i]相同的字符</span></span><br><span class="line">			 </span><br><span class="line">				<span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">0</span> || c!=<span class="number">-1</span>)&#123;   <span class="comment">//n为偶数 或者 奇数情况下出现多个独立字符，直接视为Impossible。</span></span><br><span class="line">					flag = <span class="number">1</span>;             </span><br><span class="line">					<span class="keyword">break</span>; </span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					c = <span class="number">1</span>;   <span class="comment">//奇数情况下，出现了一个独立字符。 </span></span><br><span class="line">					sum  = sum + n / <span class="number">2</span> - i;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(s[j] == s[i])&#123;     <span class="comment">//找到字符相同的是情况，进行移动 </span></span><br><span class="line">				<span class="keyword">for</span>(t=j;t&lt;k;t++)&#123;</span><br><span class="line">					s[t] = s[t+<span class="number">1</span>]; </span><br><span class="line">				&#125;</span><br><span class="line">				s[k] = s[i];</span><br><span class="line">				sum = sum + k - j;</span><br><span class="line">				k--;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125; </span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Impossible"</span>); </span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (sum==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>蓝桥杯试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2019/02/27/DataStructure/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="快速排序的定义"><a href="#快速排序的定义" class="headerlink" title="快速排序的定义"></a>快速排序的定义</h3><p>快速排序是交换排序的一种，它的基本思想是：通过一趟排序，把序列中的数组分割为2部分，如果是升序的话，右半边的所有元素都大于左半元素。然后用此方法，把每一部分在分为两个子部分，进行同样的操作。直到排序完成。这个算法是通过递归来完成的。</p>
<a id="more"></a>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>定义变量i，j分别指向序列的第一个元素和最后一个元素，定义key记录键值，这里使用key = arr[0]。</li>
<li><p>若i&lt;j 成立</p>
<p> 从后往前：比较arr[j] 和 key。当找到一个arr[j]&lt;key,使arr[i] =arr[j],否则一直往前移动j。</p>
<p> 从前往后：比较arr[i] 和 key。当找到一个key&lt;arr[j],使arr[j] = arr[i],否则一直往后移动i。</p>
</li>
<li>重复步骤（2），知道i&gt;=j ,然后在使arr[i] = key</li>
</ol>
<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(left&gt;=right)&#123;   <span class="comment">//左边大于右边 排序完成 </span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">int</span> i  = left;</span><br><span class="line">	<span class="keyword">int</span> j = right;</span><br><span class="line">	<span class="keyword">int</span> key = arr[i];             <span class="comment">//key作为比较的数据，一般取数组的第一个元素。 </span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(i&lt;j)&#123;  </span><br><span class="line">		<span class="comment">//从右向左 ，找小于key的。 </span></span><br><span class="line">		<span class="keyword">while</span>(i&lt;j &amp;&amp; arr[j] &gt;= key)&#123;</span><br><span class="line">			j--;</span><br><span class="line">		&#125;</span><br><span class="line">		arr[i] = arr[j];</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//从左向右，找大于key的。 </span></span><br><span class="line">		<span class="keyword">while</span>(i&lt;j &amp;&amp; arr[i]&lt;=key)&#123; </span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		arr[j] = arr[i];</span><br><span class="line">	&#125; </span><br><span class="line">	arr[i] = key;      <span class="comment">//把key值放于指定位置</span></span><br><span class="line">	</span><br><span class="line">	QuickSort(arr,left,i<span class="number">-1</span>);</span><br><span class="line">	QuickSort(arr,i+<span class="number">1</span>,right); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t = a[i];</span><br><span class="line">	a[i] = a[j];</span><br><span class="line">	a[j] = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = p;</span><br><span class="line">    <span class="keyword">int</span> j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x = a[p];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;r &amp;&amp; a[++i]&lt;x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(a[--j]&gt;x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i&gt;=j) </span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">        swap(a,i,j);</span><br><span class="line">    &#125;</span><br><span class="line">	swap(a,p,j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;r)&#123;</span><br><span class="line">        <span class="keyword">int</span> q = partition(a,p,r);</span><br><span class="line">        quicksort(a,p,q<span class="number">-1</span>);</span><br><span class="line">        quicksort(a,q+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">int</span> a[] = &#123;<span class="number">5</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">24</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">19</span>,<span class="number">27</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">17</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> N = <span class="number">12</span>;</span><br><span class="line">	</span><br><span class="line">	quicksort(a, <span class="number">0</span>, N<span class="number">-1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序及其优化方法</title>
    <url>/2019/02/26/DataStructure/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="冒泡排序的思想"><a href="#冒泡排序的思想" class="headerlink" title="冒泡排序的思想"></a>冒泡排序的思想</h3><p> 不停的比较相邻的两个元素，如果不符合预期，就交换两个元素，否则继续比较。如果升序排序时，就是不停的把最大元素放于序列最后。<br> <a id="more"></a></p>
<h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//冒泡排序 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;  			<span class="comment">//确定排序趟数</span></span><br><span class="line">	 	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++)&#123;       <span class="comment">//比较的次数 </span></span><br><span class="line">	 		<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">	 			<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">	 			arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">	 			arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">			 &#125;	</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="优化1"><a href="#优化1" class="headerlink" title="优化1"></a>优化1</h3><p> 经过第n趟后，如果数组已经有序，就不往后执行。定义一个flag，如果有一趟没有进行排序，给flag赋一个值。然后终止这个方法。针对连片有序，整体无序情况。</p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//冒泡排序 优化1 (针对连片有序，整体无序情况，如果一趟中已经有序，就不需要再进行比较)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;  		<span class="comment">//确定排序趟数</span></span><br><span class="line">	 	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">	 		</span><br><span class="line">	 		<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">	 			flag = <span class="number">1</span>;</span><br><span class="line">	 			<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">	 			arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">	 			arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">			 &#125;	</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(!flag)&#123;             <span class="comment">//如果没有交换过元素，则已经有序</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="优化2"><a href="#优化2" class="headerlink" title="优化2"></a>优化2</h3><p>对于前面大部分是无序而后边小半部分有序的数据(1，2，5，7，4，3，6，8，9，10)排序效率也不可观，我们可以继续优化。既我们可以记下最后一次交换的位置，后边没有交换，必然是有序的，然后下一次排序从第一个比较到上次记录的位置结束即可。<br>代码如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun3</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">int</span> flag;</span><br><span class="line">	<span class="keyword">int</span> pos = <span class="number">0</span>;	<span class="comment">//用来记录最后一次交换的位置 </span></span><br><span class="line">	<span class="keyword">int</span> k = n - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;  		<span class="comment">//确定排序趟数</span></span><br><span class="line">		pos = <span class="number">0</span>;</span><br><span class="line">		flag = <span class="number">0</span>; </span><br><span class="line">	 	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">	 		</span><br><span class="line">	 		<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">	 			flag = <span class="number">1</span>;   <span class="comment">//加入标记 </span></span><br><span class="line">	 			<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">	 			arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">	 			arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">	 			pos = j;      <span class="comment">//记录最后一次的交换位置 </span></span><br><span class="line">			 &#125;	</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(!flag)&#123;             <span class="comment">//如果没有交换过元素，则已经有序</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		k = pos;       <span class="comment">//下一次比较到记录位置 </span></span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h3 id="优化3"><a href="#优化3" class="headerlink" title="优化3"></a>优化3</h3><p> 优化二的效率有很大的提升，还有一种优化方法可以继续提高效率。大致思想就是一次排序可以确定两个值，正向扫描找到最大值交换到最后，反向扫描找到最小值交换到最前面。</p>
<h4 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h4> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//冒泡排序 优化3 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun4</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> flag;</span><br><span class="line">	<span class="keyword">int</span> pos = <span class="number">0</span>;	 </span><br><span class="line">	<span class="keyword">int</span> k = n - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;  		</span><br><span class="line">		pos = <span class="number">0</span>;</span><br><span class="line">		flag = <span class="number">0</span>; </span><br><span class="line">		<span class="comment">//正向找最大值  </span></span><br><span class="line">	 	<span class="keyword">for</span>(j=t;j&lt;k;j++)&#123;</span><br><span class="line">	 		</span><br><span class="line">	 		<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">	 			flag = <span class="number">1</span>;   </span><br><span class="line">	 			<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">	 			arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">	 			arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">	 			pos = j;      </span><br><span class="line">			 &#125;	</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(!flag)&#123;             <span class="comment">//如果没有交换过元素，则已经有序</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		k = pos;       <span class="comment">//下一次比较到记录位置 </span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//反向寻找最小值</span></span><br><span class="line">	 	<span class="keyword">for</span>(j=k;j&gt;t;j--)&#123;</span><br><span class="line">	 		</span><br><span class="line">	 		<span class="keyword">if</span>(arr[j] &lt; arr[j<span class="number">-1</span>])&#123;</span><br><span class="line">	 			flag = <span class="number">1</span>;   </span><br><span class="line">	 			<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">	 			arr[j] = arr[j<span class="number">-1</span>];</span><br><span class="line">	 			arr[j<span class="number">-1</span>] = temp;   </span><br><span class="line">			 &#125;	</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		t++; <span class="comment">//找到最大最小值后,t往后移动一位</span></span><br><span class="line">		 </span><br><span class="line">		<span class="keyword">if</span>(!flag)&#123;             </span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>参考文章 <a href="https://blog.csdn.net/hansionz/article/details/80822494" target="_blank" rel="noopener">【排序】：冒泡排序以及三种优化</a></p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>冒泡排序</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——数的读法</title>
    <url>/2019/02/20/lanqiao/%E6%95%B0%E7%9A%84%E8%AF%BB%E6%B3%95/</url>
    <content><![CDATA[<h3 id="数的读法"><a href="#数的读法" class="headerlink" title="数的读法"></a>数的读法</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>Tom教授正在给研究生讲授一门关于基因的课程，有一件事情让他颇为头疼：一条染色体上有成千上万个碱基对，它们从0开始编号，到几百万，几千万，甚至上亿。</p>
<p>比如说，在对学生讲解第1234567009号位置上的碱基时，光看着数字是很难准确的念出来的。所以，他迫切地需要一个系统，然后当他输入1234567009时，会给出相应的念法：<br><a id="more"></a></p>
<p>&emsp;&emsp;<strong>十二亿三千四百五十六万七千零九</strong></p>
<p>用汉语拼音表示为:</p>
<p>&emsp;&emsp;<strong>shi er yi san qian si bai wu shi liu wan qi qian ling jiu</strong></p>
<p>这样他只需要照着念就可以了。</p>
<p>你的任务是帮他设计这样一个系统：给定一个阿拉伯数字串，你帮他按照中文读写的规范转为汉语拼音字串，相邻的两个音节用一个空格符格开。</p>
<p>注意必须严格按照规范，比如说“10010”读作“yi wan ling yi shi”而不是“yi wan ling shi”，“100000”读作“shi wan”而不是“yi shi wan”，“2000”读作“er qian”而不是“liang qian”。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>有一个数字串，数值大小不超过2,000,000,000。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>是一个由小写英文字母，逗号和空格组成的字符串，表示该数的英文读法。</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>1234567009</p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>shi er yi san qian si bai wu shi liu wan qi qian ling jiu</p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span>*num[]= &#123;<span class="string">"ling"</span>,<span class="string">"yi"</span>,<span class="string">"er"</span>,<span class="string">"san"</span>,<span class="string">"si"</span>,<span class="string">"wu"</span>,<span class="string">"liu"</span>,<span class="string">"qi"</span>,<span class="string">"ba"</span>,<span class="string">"jiu"</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span>*wei[]= &#123;<span class="string">"shi"</span>,<span class="string">"bai"</span>,<span class="string">"qian"</span>,<span class="string">"wan"</span>,<span class="string">"yi"</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span>*str[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i,j,k,n,l[<span class="number">2</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	i=<span class="number">0</span>;</span><br><span class="line">	j=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">while</span>(n&gt;<span class="number">0</span>) &#123;</span><br><span class="line">		k = n%<span class="number">10</span>;</span><br><span class="line">		n /= <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span>(k&gt;<span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span>(i&gt;=<span class="number">4</span>&amp;&amp;!l[i/<span class="number">4</span><span class="number">-1</span>])&#123;</span><br><span class="line">					l[i/<span class="number">4</span><span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">					str[j++]=wei[i/<span class="number">4</span>+<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span>(i%<span class="number">4</span>!=<span class="number">0</span>)</span><br><span class="line">					str[j++]=wei[i%<span class="number">4</span><span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">			str[j++]=num[k];</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(j&gt;<span class="number">0</span>&amp;&amp;str[j<span class="number">-1</span>]!=num[<span class="number">0</span>]) &#123;</span><br><span class="line">			str[j++]=num[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!(str[j<span class="number">-1</span>]==<span class="string">"yi"</span>&amp;&amp;j&gt;<span class="number">1</span>&amp;&amp;str[j<span class="number">-2</span>]==<span class="string">"shi"</span>))</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s "</span>,str[j<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(i=j<span class="number">-2</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s "</span>,str[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>蓝桥杯试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——Sine之舞</title>
    <url>/2019/02/18/lanqiao/Sine%E4%B9%8B%E8%88%9E/</url>
    <content><![CDATA[<h3 id="Sine之舞"><a href="#Sine之舞" class="headerlink" title="Sine之舞"></a>Sine之舞</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>最近FJ为他的奶牛们开设了数学分析课，FJ知道若要学好这门课，必须有一个好的三角函数基本功。所以他准备和奶牛们做一个“Sine之舞”的游戏，寓教于乐，提高奶牛们的计算能力。<br>不妨设:</p>
<p>&emsp;&emsp;<script type="math/tex">An=sin(1–sin(2+sin(3–sin(4+...sin(n))...)</script></p>
<p>&emsp;&emsp;<script type="math/tex">Sn=(...(A1+n)A2+n-1)A3+...+2)An+1</script><br><a id="more"></a><br>FJ想让奶牛们计算Sn的值，请你帮助FJ打印出Sn的完整表达式，以方便奶牛们做题。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>仅有一个数：N&lt;201。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>请输出相应的表达式Sn，以一个换行符结束。输出中不得含有多余的空格或换行、回车符。</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>3</p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><script type="math/tex; mode=display">((sin(1)+3)sin(1–sin(2))+2)sin(1–sin(2+sin(3)))+1</script><blockquote>
<p><strong>使用递归解题</strong></p>
</blockquote>
<p>代码如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">( <span class="keyword">int</span> , <span class="keyword">int</span> )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">( <span class="keyword">int</span> , <span class="keyword">int</span> )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n); </span><br><span class="line">    fun1(n , n + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == k)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"sin(%d)"</span>, n );</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"sin(%d"</span>, n);</span><br><span class="line">        <span class="keyword">if</span>( n % <span class="number">2</span> == <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="built_in">printf</span>(<span class="string">"+"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">        fun2(n + <span class="number">1</span>, k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> n , <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( n == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        fun2(n , n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"("</span>);</span><br><span class="line">        fun1(n<span class="number">-1</span>, k);</span><br><span class="line">       	<span class="built_in">printf</span>(<span class="string">")"</span>);</span><br><span class="line">        fun2(<span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"+%d"</span>, k - n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>蓝桥杯试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——FJ的字符串</title>
    <url>/2019/02/17/lanqiao/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98%E2%80%94%E2%80%94FJ%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h3 id="FJ的字符串"><a href="#FJ的字符串" class="headerlink" title="FJ的字符串"></a>FJ的字符串</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>FJ在沙盘上写了这样一些字符串：</p>
<p>A1 = “A”</p>
<p>A2 = “ABA”</p>
<p>A3 = “ABACABA”</p>
<p>A4 = “ABACABADABACABA”</p>
<p>… …<br><a id="more"></a><br>你能找出其中的规律并写所有的数列AN吗？</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>　　仅有一个数：N ≤ 26。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>请输出相应的字符串AN，以一个换行符结束。输出中不得含有多余的空格或换行、回车符。</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>3</p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>ABACABA</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><blockquote>
<p><strong>解法1 使用匹配所有下标的形式，找出所有相同字母下标的出现规律，仔细观察:</strong><br></p>
</blockquote>
<p><script type="math/tex">A -> 2n_1 - 2  = 2^1 - (2^0 *n_1+ 1)</script>  <br></p>
<p><script type="math/tex">B -> 4n_2 - 3   = 2^2 - (2^1 *n_2 + 1)</script><br></p>
<p><script type="math/tex">C -> 8n_3-  5   = 2^3 - (2^2 *n_3+ 1)</script> <br></p>
<p><script type="math/tex">D -> 16n_4 - 9 = 2^4 - (2^3 *n_4+ 1)</script>  <br><br> <strong>又因为：</strong><br></p>
<p> <script type="math/tex">n_1 = 8 = 2^3</script><br></p>
<p> <script type="math/tex">n_2 = 4 = 2^2</script><br></p>
<p> <script type="math/tex">n_3 = 2 = 2^1</script><br></p>
<p> <script type="math/tex">n_4 = 1 = 2^0</script><br></p>
<p> <strong>所以我们只需要外层循环控制ABCD的个数，里层循环控制n的个数，就很容易得出代码。</strong><br><br> <strong>注意点：这里使用指针字符来作为存储字符的方式，能够满足题目要求的字母个数小于26，如果要使用字符数组的话，作为局部变量可以实现数组的动态分配，但是n大于20时会导致数组内存溢出，因为局部变量的内存限制为2M，或者把字符数组当做全局变量来处理，只要初始化分配足够大的也可以处理。</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> i,j;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">char</span> *a;</span><br><span class="line">	a = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,n))<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,i));j++)&#123;</span><br><span class="line">			a[(<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,n-i)) * (j+<span class="number">1</span>)- (<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,n-i<span class="number">-1</span>)) - <span class="number">1</span>] = <span class="string">'A'</span> + n -i - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,n))<span class="number">-1</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%c"</span>,a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><blockquote>
<p><strong>利用递归的方式</strong></p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">""</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		fun(i<span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="string">'A'</span>+i<span class="number">-1</span>);</span><br><span class="line">		fun(i<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	fun(n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><a href="https://upload-images.jianshu.io/upload_images/2514354-5885dfc2fa81b07d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="image.png" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-5885dfc2fa81b07d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="image.png"></a></p>
]]></content>
      <categories>
        <category>蓝桥杯试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——芯片测试</title>
    <url>/2019/02/16/lanqiao/%E8%8A%AF%E7%89%87%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h3 id="芯片测试"><a href="#芯片测试" class="headerlink" title="芯片测试"></a>芯片测试</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>有n（2≤n≤20）块芯片，有好有坏，已知好芯片比坏芯片多。</p>
<p>每个芯片都能用来测试其他芯片。用好芯片测试其他芯片时，能正确给出被测试芯片是好还是坏。而用坏芯片测试其他芯片时，会随机给出好或是坏的测试结果（即此结果与被测试芯片实际的好坏无关）。<br><a id="more"></a><br>给出所有芯片的测试结果，问哪些芯片是好芯片。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入数据第一行为一个整数n，表示芯片个数。</p>
<p>第二行到第n+1行为n*n的一张表，每行n个数据。表中的每个数据为0或1，在这n行中的第i行第j列（1≤i,j≤n）的数据表示用第i块芯片测试第j块芯片时得到的测试结果，1表示好，0表示坏，i=j时一律为1（并不表示该芯片对本身的测试结果。芯片不能对本身进行测试）。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>按从小到大的顺序输出所有好芯片的编号</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>3  <br><br>1 0 1 <br><br>0 1 0 <br><br>1 0 1 <br></p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>1 3</p>
<blockquote>
<h4 id="思路：题目的前提说的是好的芯片一定大于坏的芯片，一个芯片的测试结果相当于一列，，好的芯片在一列中1的数量一定大于0的个数-或者1的数量大于一半-。"><a href="#思路：题目的前提说的是好的芯片一定大于坏的芯片，一个芯片的测试结果相当于一列，，好的芯片在一列中1的数量一定大于0的个数-或者1的数量大于一半-。" class="headerlink" title="思路：题目的前提说的是好的芯片一定大于坏的芯片，一个芯片的测试结果相当于一列，，好的芯片在一列中1的数量一定大于0的个数(或者1的数量大于一半)。"></a>思路：题目的前提说的是好的芯片一定大于坏的芯片，一个芯片的测试结果相当于一列，，好的芯片在一列中1的数量一定大于0的个数(或者1的数量大于一半)。</h4></blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">int</span> y,k;</span><br><span class="line">	y = <span class="number">0</span>;  <span class="comment">//1的个数 </span></span><br><span class="line">	k = <span class="number">0</span>;  <span class="comment">//0的个数 </span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b[i] == <span class="number">1</span>)&#123;</span><br><span class="line">			</span><br><span class="line">			y++;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			k++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(y&gt;k)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">int</span> a[n][n];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> b[n]; </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">			b[j] = a[j][i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> t = fun(b);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(t)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>,i+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：<br><a href="https://user-gold-cdn.xitu.io/2019/2/16/168f66fe51532c7a?w=595&amp;h=131&amp;f=png&amp;s=4636" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/2/16/168f66fe51532c7a?w=595&amp;h=131&amp;f=png&amp;s=4636" alt="输出结果" title="输出结果"></a></p>
]]></content>
      <categories>
        <category>蓝桥杯试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客使用bat脚本自动创建、部署、编辑和免密码部署</title>
    <url>/2019/02/16/Hexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8bat%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%92%8C%E5%85%8D%E5%AF%86%E7%A0%81%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>每次写博客都要新建一个.md文件，然后把博客内存复制进去。然后执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code> ，接着还要输入账号密码，这已经比较麻烦了，然后，你在博客预览的时候如果发现有些小错误，还要进行部署和输入密码一系列操作，很浪费时间。</p>
<p>所以，我就在windows下用bat脚本搭建了一个自动化部署的操作，解决了每次都要输入的重复操作。</p>
<p><strong>脚本包括四部分：新建博客，调试，部署，查找并编辑。</strong><br><a id="more"></a></p>
<h3 id="一、Hexo-bat脚本："><a href="#一、Hexo-bat脚本：" class="headerlink" title="一、Hexo bat脚本："></a>一、Hexo bat脚本：</h3><h4 id="1、新建博客"><a href="#1、新建博客" class="headerlink" title="1、新建博客"></a>1、新建博客</h4><p>在桌面或者文件夹中新建 <code>CreateNewPage.bat</code>文本。<br>使用<code>notepad++</code>或者任意文本编辑器打开输入以下代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bat</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /p name=input pages name:</span><br><span class="line"><span class="built_in">echo</span> name:<span class="variable">%name%</span></span><br><span class="line"><span class="built_in">echo</span> please wait</span><br><span class="line"><span class="built_in">start</span> /d "F:\notepad\Notepad++"   notepad++.exe  "D:\Blog\blog\source\_posts\<span class="variable">%name%</span>.<span class="built_in">md</span>"</span><br></pre></td></tr></table></figure></div>
<p><code>@echo off</code>表示不回显，意思就是说在命令提示符中输入的命令不显示。你也可以设置为 <code>@echo on</code>。</p>
<p><code>set /p name=input pages name:</code> 表示你要输入这篇博客的文件名。使用<code>name</code>变量存储。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start /d &quot;F:\notepad\Notepad++&quot;   notepad++.exe  &quot;D:\Blog\blog\source\_posts\%name%.md&quot;</span><br><span class="line">表示使用这个notepad++来新建这个.md文件。</span><br></pre></td></tr></table></figure></div>
<p>其中<code>&quot;F:\notepad\Notepad++&quot;</code>表示nodepad++的安装位置。<code>D:\Blog\blog\source\_posts\%name%.md</code>表示这个文件的存放位置。</p>
<p><strong>博客路径和文本编辑器位置请改成你自己的。</strong></p>
<p>如图所示：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/2/16/168f59b21efdae35?w=1346&amp;h=663&amp;f=gif&amp;s=358438" data-fancybox="group" data-caption="新建博客" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/2/16/168f59b21efdae35?w=1346&amp;h=663&amp;f=gif&amp;s=358438" alt="新建博客" title="新建博客"></a></p>
<h4 id="2、调试"><a href="#2、调试" class="headerlink" title="2、调试"></a>2、调试</h4><p>新建<code>debug.bat</code>文件<br>内容如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bat</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="function">D:</span></span><br><span class="line"><span class="function"><span class="title">cd</span> <span class="title">D</span>:\<span class="title">Blog</span>\<span class="title">blog</span></span></span><br><span class="line"><span class="function"><span class="title">hexo</span> <span class="title">s</span> -<span class="title">debug</span></span></span><br></pre></td></tr></table></figure></div></p>
<p>表示在博客根目录中运行 hexo s -debug命令。</p>
<p>如图所示：<br><a href="https://user-gold-cdn.xitu.io/2019/2/16/168f5a21011b6d60?w=1339&amp;h=671&amp;f=gif&amp;s=1943677" data-fancybox="group" data-caption="调试" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/2/16/168f5a21011b6d60?w=1339&amp;h=671&amp;f=gif&amp;s=1943677" alt="调试" title="调试"></a></p>
<h4 id="3、部署"><a href="#3、部署" class="headerlink" title="3、部署"></a>3、部署</h4><p>新建Deploy.bat文件<br>内容如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bat</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> on</span><br><span class="line"><span class="function">D:</span></span><br><span class="line"><span class="function"><span class="title">cd</span> <span class="title">D</span>:\<span class="title">Blog</span>\<span class="title">blog</span> </span></span><br><span class="line"><span class="function"><span class="title">hexo</span> <span class="title">clean</span> &amp;&amp; <span class="title">hexo</span> <span class="title">g</span> &amp;&amp; <span class="title">hexo</span> <span class="title">d</span></span></span><br></pre></td></tr></table></figure></div></p>
<p>如果你只使用的http推送的代码，需要手动输入用户名和账号的。下面讲解如果免密部署。</p>
<h4 id="4、查找并编辑"><a href="#4、查找并编辑" class="headerlink" title="4、查找并编辑"></a>4、查找并编辑</h4><p>新建Edit.bat文件<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bat</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">::设置编码方式</span><br><span class="line"><span class="built_in">chcp</span> <span class="number">65001</span></span><br><span class="line"><span class="built_in">set</span> /p name=input blog name: </span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> "FileName=*<span class="variable">%name%</span>*.<span class="built_in">md</span>"</span><br><span class="line"><span class="built_in">set</span> "PathName=D:\Blog\blog\source\_posts"</span><br><span class="line"><span class="built_in">set</span> "EditPath=F:\notepad\Notepad++"</span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%a</span> <span class="keyword">in</span> (<span class="variable">%PathName%</span>) <span class="keyword">do</span> <span class="keyword">for</span> /f "delims=" <span class="variable">%%b</span> <span class="keyword">in</span> ('<span class="built_in">dir</span> /a-d/b/s <span class="variable">%%a</span>\<span class="variable">%FileName%</span>') <span class="keyword">do</span> ( </span><br><span class="line">   <span class="built_in">start</span> /d <span class="variable">%EditPath%</span>notepad++.exe  "<span class="variable">%%b</span>"</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div></p>
<p>输入需要修改的文件名，会自动查找根文件夹及子文件夹下的所有文件，对文件名进行模糊匹配，匹配成功后自动使用指定的文本编辑器打开。您需要自动配置文件根目录<code>PathName</code>，和编辑器路径<code>EditPath</code>，并且把notepad++.exe修改成对应的文本编辑器可执行文件名。</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/2/17/168f9cb1888a12f9?w=1339&amp;h=671&amp;f=gif&amp;s=581071" data-fancybox="group" data-caption class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/2/17/168f9cb1888a12f9?w=1339&amp;h=671&amp;f=gif&amp;s=581071" alt title></a></p>
<h3 id="二、免密码部署："><a href="#二、免密码部署：" class="headerlink" title="二、免密码部署："></a>二、免密码部署：</h3><p>打开博客根目录的config.yml，查看自己博客的部署方式：我这里部署了双平台。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">   type: git</span><br><span class="line">   repo: </span><br><span class="line">      github: https://github.com/ThinkingXuan/thinkingxuan.github.io.git,master</span><br><span class="line">      coding: https://git.coding.net/q1454739828/q1454739828.coding.me.git,master</span><br></pre></td></tr></table></figure></div></p>
<p>这是一般的部署方式，git使用https推送代码，保密性不足，所以需要输入用户名密码。<br>所以我们需要做的改成使用ssh认证。</p>
<p>你需要做的就是在github或者coding中录入你自己的ssh密钥，然后在本地连接认证，一般密钥存储在id_rsa.pub文件。在C:\Users\Administrator\.ssh文件夹里面。如果你没有这个文件，请自行百度生成，连接认证。github和coding基本一样。然后修改config.yml文件：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">   type: git</span><br><span class="line">   repo: </span><br><span class="line">      github: git@github.com:ThinkingXuan/thinkingxuan.github.io.git,master</span><br><span class="line">      coding: git@git.coding.net:q1454739828/q1454739828.coding.me.git</span><br></pre></td></tr></table></figure></div></p>
<p>然后运行脚本。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>bat脚本</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题 —— 龟兔赛跑预测</title>
    <url>/2019/02/16/lanqiao/%E9%BE%9F%E5%85%94%E8%B5%9B%E8%B7%91%E9%A2%84%E6%B5%8B/</url>
    <content><![CDATA[<h3 id="龟兔赛跑预测"><a href="#龟兔赛跑预测" class="headerlink" title="龟兔赛跑预测"></a>龟兔赛跑预测</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>话说这个世界上有各种各样的兔子和乌龟，但是 研究发现，所有的兔子和乌龟都有一个共同的特点——喜欢赛跑。于是世界上各个角落都不断在发生着乌龟和兔子的比赛，小华对此很感兴趣，于是决定研究不同兔 子和乌龟的赛跑。他发现，兔子虽然跑比乌龟快，但它们有众所周知的毛病——骄傲且懒惰，于是在与乌龟的比赛中，一旦任一秒结束后兔子发现自己领先t米或以 上，它们就会停下来休息s秒。对于不同的兔子，t，s的数值是不同的，但是所有的乌龟却是一致——它们不到终点决不停止。<br><a id="more"></a><br>然而有些比赛相当漫长，全程观看会耗费大量时间，而小华发现只要在每场比赛开始后记录下兔子和乌龟的数据——兔子的速度v1（表示每秒兔子能跑v1 米），乌龟的速度v2，以及兔子对应的t，s值，以及赛道的长度l——就能预测出比赛的结果。但是小华很懒，不想通过手工计算推测出比赛的结果，于是他找 到了你——清华大学计算机系的高才生——请求帮助，请你写一个程序，对于输入的一场比赛的数据v1，v2，t，s，l，预测该场比赛的结果。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入只有一行，包含用空格隔开的五个正整数v1，v2，t，s，l，其中(v1,v2&lt; =100;t&lt; =300;s&lt; =10;l&lt; =10000且为v1,v2的公倍数)  </p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出包含两行，第一行输出比赛结果——一个大写字母“T”或“R”或“D”，分别表示乌龟获胜，兔子获胜，或者两者同时到达终点。</p>
<p>第二行输出一个正整数，表示获胜者（或者双方同时）到达终点所耗费的时间（秒数）。</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>10 5 5 2 20</p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>D <br><br>4</p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> v1,v2,t,s,l;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d"</span>,&amp;v1,&amp;v2,&amp;t,&amp;s,&amp;l); </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> time = <span class="number">0</span>;<span class="comment">// 双放花费的时间</span></span><br><span class="line">	<span class="keyword">int</span> roadv1 = <span class="number">0</span>; <span class="comment">//兔子跑的路程 </span></span><br><span class="line">	<span class="keyword">int</span> roadv2 = <span class="number">0</span>; <span class="comment">//乌龟跑的路程 </span></span><br><span class="line">	<span class="keyword">int</span> s2 = <span class="number">0</span>;   <span class="comment">//兔子休息的时间 </span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(roadv1&lt;l &amp;&amp; roadv2&lt;l)&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span>(s2&gt;<span class="number">0</span>)&#123;             <span class="comment">//乌龟跑，兔子休息，计时 </span></span><br><span class="line">			s2-- ;</span><br><span class="line">			roadv2 = roadv2 + v2;</span><br><span class="line">			time++;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(roadv1 - roadv2 &gt;= t)&#123;     <span class="comment">//计算兔子休息时间 </span></span><br><span class="line">			s2 = s;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;                <span class="comment">//乌龟和兔子都跑 </span></span><br><span class="line">			roadv1 = roadv1+ v1;</span><br><span class="line">			roadv2 = roadv2+ v2;</span><br><span class="line">			time++;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">char</span> r; </span><br><span class="line">	<span class="keyword">if</span>(roadv1 &gt; roadv2)&#123;</span><br><span class="line">		r = <span class="string">'R'</span>; </span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(roadv1 == roadv2)&#123;</span><br><span class="line">		r = <span class="string">'D'</span>; </span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		r = <span class="string">'T'</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%c\n"</span>,r);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,time);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：<br><a href="https://user-gold-cdn.xitu.io/2019/2/16/168f5177c407e7aa?w=428&amp;h=73&amp;f=png&amp;s=1318" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/2/16/168f5177c407e7aa?w=428&amp;h=73&amp;f=png&amp;s=1318" alt="输出结果" title="输出结果"></a></p>
]]></content>
      <categories>
        <category>蓝桥杯试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题 —— 回形取数</title>
    <url>/2019/02/15/lanqiao/%E5%9B%9E%E5%BD%A2%E5%8F%96%E6%95%B0/</url>
    <content><![CDATA[<h3 id="回形取数"><a href="#回形取数" class="headerlink" title="回形取数"></a>回形取数</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　回形取数就是沿矩阵的边取数，若当前方向上无数可取或已经取过，则左转90度。一开始位于矩阵左上角，方向向下。<br><a id="more"></a></p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>　　输入第一行是两个不超过200的正整数m, n，表示矩阵的行和列。接下来m行每行n个整数，表示这个矩阵。 </p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>　　输出只有一行，共mn个数，为输入矩阵回形取数得到的结果。数之间用一个空格分隔，行末不要有多余的空格。 </p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>3 3 <br><br>1 2 3 <br><br>4 5 6 <br><br>7 8 9 </p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>1 4 7 8 9 6 3 2 5 </p>
<h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><p>3 2 <br><br>1 2 <br><br>3 4 <br><br>5 6 </p>
<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><p>1 3 5 6 4 2</p>
<h3 id="解法思路："><a href="#解法思路：" class="headerlink" title="解法思路："></a>解法思路：</h3><blockquote>
<p><strong>按回型的方式走步，先找出二维矩阵的层数<code>num</code>,其实就是行和列较小值<code>min</code>，较小值为偶数时，<code>num = min / 2</code> ,为奇数时<code>num = min / 2 + 1</code>,然后每一层走四步。</strong></p>
</blockquote>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> **a, <span class="keyword">int</span> *b,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i,j,k,num,min,index;</span><br><span class="line">		min = n &gt; m ? m : n; <span class="comment">//找到n,m较小值 </span></span><br><span class="line">		num = min % <span class="number">2</span> == <span class="number">0</span> ? min / <span class="number">2</span> : min / <span class="number">2</span> + <span class="number">1</span>;  <span class="comment">//计算循环次数</span></span><br><span class="line">		index = <span class="number">0</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;num;k++)&#123;</span><br><span class="line">			<span class="comment">//往下 </span></span><br><span class="line">			j = k;</span><br><span class="line">			<span class="keyword">for</span>(i=k;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">				b[index++] = *((<span class="keyword">int</span>*)a + m*i + j);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//往右</span></span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m<span class="number">-1</span>;j++)&#123;</span><br><span class="line">				b[index++] = *((<span class="keyword">int</span>*)a + m*i + j);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//往上</span></span><br><span class="line">			<span class="keyword">for</span>(;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">				b[index++] = *((<span class="keyword">int</span>*)a + m*i + j);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//往左</span></span><br><span class="line">			<span class="keyword">for</span>(;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">				b[index++] = *((<span class="keyword">int</span>*)a + m*i + j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m,i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">int</span> a[n][m];</span><br><span class="line">	<span class="keyword">int</span> b[n*m];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fun(a,b,n,m);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n*m;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,b[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/2/15/168f118929be9e82?w=456&amp;h=99&amp;f=png&amp;s=2206" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/2/15/168f118929be9e82?w=456&amp;h=99&amp;f=png&amp;s=2206" alt="输出结果" title="输出结果"></a></p>
]]></content>
      <categories>
        <category>蓝桥杯试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
      </tags>
  </entry>
  <entry>
    <title>算法入门 —— 报时助手</title>
    <url>/2019/02/15/lanqiao/basic8/</url>
    <content><![CDATA[<h3 id="报时助手"><a href="#报时助手" class="headerlink" title="报时助手"></a>报时助手</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>&emsp;&emsp;给定当前的时间，请用英文的读法将它读出来。<br>时间用时h和分m表示，在英文的读法中，读一个时间的方法是：如果m为0，则将时读出来，然后加上“o’clock”，如3:00读作“three o’clock”。如果m不为0，则将时读出来，然后将分读出来，如5:30读作“five thirty”。<br><a id="more"></a><br>&emsp;&emsp;时和分的读法使用的是英文数字的读法，其中0~20读作：0:zero, 1: one, 2:two, 3:three, 4:four, 5:five, 6:six, 7:seven, 8:eight, 9:nine, 10:ten, 11:eleven, 12:twelve, 13:thirteen, 14:fourteen,15:fifteen, 16:sixteen, 17:seventeen, 18:eighteen, 19:nineteen, 20:twenty。30读作thirty，40读作forty，50读作fifty。</p>
<p>&emsp;&emsp;对于大于20小于60的数字，首先读整十的数，然后再加上个位数。如31首先读30再加1的读法，读作“thirty one”。按上面的规则21:54读作“twenty one fifty four”，9:07读作“nine seven”，0:15读作“zero fifteen”。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含两个非负整数h和m，表示时间的时和分。非零的数字前没有前导0。h小于24，m小于60。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出时间时刻的英文。</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>0 15</p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>zero fifteen</p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timePrint</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">char</span>* a[<span class="number">24</span>] = &#123;<span class="string">"zero"</span>,<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>,<span class="string">"four"</span>,<span class="string">"five"</span>,<span class="string">"six"</span>,<span class="string">"seven"</span>,<span class="string">"eight"</span>,<span class="string">"nine"</span>,<span class="string">"ten"</span>,<span class="string">"eleven"</span>,</span><br><span class="line">                <span class="string">"twelve"</span>,<span class="string">"thirteen"</span>,<span class="string">"fourteen"</span>,<span class="string">"fifteen"</span>,<span class="string">"sixteen"</span>,<span class="string">"seventeen"</span>,<span class="string">"eighteen"</span>,<span class="string">"nineteen"</span>,<span class="string">"twenty"</span>,</span><br><span class="line">                <span class="string">"thirty"</span>,<span class="string">"forty"</span>,<span class="string">"fifty"</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line">	<span class="keyword">if</span>(a&gt;=<span class="number">0</span> &amp;&amp; a&lt;=<span class="number">20</span> )&#123;</span><br><span class="line">		timePrint(a);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		timePrint(<span class="number">20</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">		timePrint(b%<span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">	<span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"o'clock"</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(b&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">		timePrint(b);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(b&lt;<span class="number">30</span>)&#123;</span><br><span class="line">		timePrint(<span class="number">20</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">		timePrint(b%<span class="number">10</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(b==<span class="number">30</span>)&#123;</span><br><span class="line">		timePrint(<span class="number">21</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(b&lt;<span class="number">40</span>)&#123;</span><br><span class="line">		timePrint(<span class="number">21</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">		timePrint(b%<span class="number">10</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(b==<span class="number">40</span>)&#123;</span><br><span class="line">		timePrint(<span class="number">22</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(b&lt;<span class="number">50</span>)&#123;</span><br><span class="line">		timePrint(<span class="number">22</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">		timePrint(b%<span class="number">10</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">50</span>)&#123;</span><br><span class="line">		timePrint(<span class="number">23</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		timePrint(<span class="number">23</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">		timePrint(b%<span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/2/15/168f0b627d2ce51f?w=481&amp;h=90&amp;f=png&amp;s=3988" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/2/15/168f0b627d2ce51f?w=481&amp;h=90&amp;f=png&amp;s=3988" alt="输出结果" title="输出结果"></a></p>
]]></content>
      <categories>
        <category>蓝桥杯试题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
      </tags>
  </entry>
  <entry>
    <title>算法入门 —— 2N皇后问题</title>
    <url>/2019/02/14/lanqiao/basic7/</url>
    <content><![CDATA[<h3 id="2n皇后问题"><a href="#2n皇后问题" class="headerlink" title="2n皇后问题"></a>2n皇后问题</h3><blockquote>
<p><strong>这个题目是经典题目N皇后的延伸，如果您对N皇后还不太了解，请<a href="https://www.you3xuan.top/2019/02/14/lanqiao/basic6/" target="_blank" rel="noopener">点击这</a>。</strong></p>
</blockquote>
<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　给定一个 n*n 的棋盘，棋盘中有一些位置不能放皇后。现在要向棋盘中放入n个黑皇后和n个白皇后，使任意的两个黑皇后都不在同一行、同一列或同一条对角线上，任意的两个白皇后都不在同一行、同一列或同一条对角线上。问总共有多少种放法？n小于等于8。</p>
<a id="more"></a>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>　　输入的第一行为一个整数n，表示棋盘的大小。</p>
<p>　　接下来n行，每行n个0或1的整数，如果一个整数为1，表示对应的位置可以放皇后，如果一个整数为0，表示对应的位置不可以放皇后。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>　　输出一个整数，表示总共有多少种放法。</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>4</p>
<p>1 1 1 1</p>
<p>1 1 1 1</p>
<p>1 1 1 1</p>
<p>1 1 1 1</p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>2</p>
<h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><p>4</p>
<p>1 0 1 1</p>
<p>1 1 1 1</p>
<p>1 1 1 1</p>
<p>1 1 1 1</p>
<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><p>0</p>
<h4 id="题目讲解"><a href="#题目讲解" class="headerlink" title="题目讲解"></a>题目讲解</h4><p>&emsp;&emsp;看过上一篇的同学们，应该知道用递归解决N皇后的具体方法，通过一个二维数组的第一列或者直接用一个一维数组存储每一行中皇后的位置。本题中，需要放置两个不同类型的皇后，我的思路是先放黑皇后，然后放白皇后。这个两个皇后的放法其实大同小异，但是当我们放置完黑皇后只后，需要保持黑皇后放置的状态，这里我使用二维数组<code>status</code>来保存，放置黑皇后的位置置1，当递归的一个流程执行完成后，然后把这个位置置0，进行第二次递归。</p>
<p>&emsp;&emsp;这个为了简化流程，我用两个一维数组来保存两个皇后在对应行中的放置位置。</p>
<h4 id="具体代码如下："><a href="#具体代码如下：" class="headerlink" title="具体代码如下："></a>具体代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a 存储棋盘情况  status存储黑皇后的放置情况  b存储黑皇后对应行的放置位置  w存储白皇后对应行的放置位置   </span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">11</span>][<span class="number">11</span>],status[<span class="number">11</span>][<span class="number">11</span>],b[<span class="number">11</span>],w[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> num,n;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否合适 (不在同一列，不在同一对角线) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLegal</span><span class="params">(<span class="keyword">int</span> * b, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;x;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b[i] == y || <span class="built_in">abs</span>(x-i) == <span class="built_in">abs</span>(y - b[i]))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//搜索二维数组，放置白皇后 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSWhite</span><span class="params">(<span class="keyword">int</span> row)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(row == n)&#123;</span><br><span class="line">		num++;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="comment">//判断该位置可以放置白皇后 ，且这个位置不能有黑皇后 </span></span><br><span class="line">			<span class="keyword">if</span>(a[row][i]!=<span class="number">0</span> &amp;&amp; status[row][i]==<span class="number">0</span> &amp;&amp; isLegal(w,row,i))&#123;</span><br><span class="line">				w[row] = i;</span><br><span class="line">				DFSWhite(row+<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//搜索二维数组，先放置黑皇后</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSBlack</span><span class="params">(<span class="keyword">int</span> row)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(row == n)&#123;       <span class="comment">//黑皇后放置完成，放置白皇后 </span></span><br><span class="line">		DFSWhite(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//判断该位置可以放置皇后 </span></span><br><span class="line">			<span class="keyword">if</span>(a[row][i]!=<span class="number">0</span> &amp;&amp; isLegal(b,row,i))&#123;</span><br><span class="line">				b[row] = i;</span><br><span class="line">				status[row][i] = <span class="number">1</span>;         <span class="comment">//放置黑皇后的位置置1 </span></span><br><span class="line">				DFSBlack(row+<span class="number">1</span>);</span><br><span class="line">				status[row][i] = <span class="number">0</span>;        <span class="comment">// 两类皇后的放置，把黑皇后的这个位置的 置0 </span></span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">			status[i][j] = <span class="number">0</span>; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		b[i] = <span class="number">0</span>;</span><br><span class="line">		w[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	DFSBlack(<span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,num);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/2/14/168ec6c24f7f0059?w=359&amp;h=173&amp;f=png&amp;s=2467" data-fancybox="group" data-caption="输出结果1" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/2/14/168ec6c24f7f0059?w=359&amp;h=173&amp;f=png&amp;s=2467" alt="输出结果1" title="输出结果1"></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/2/14/168ec6ca669ce0af?w=357&amp;h=167&amp;f=png&amp;s=2183" data-fancybox="group" data-caption="输出结果2" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/2/14/168ec6ca669ce0af?w=357&amp;h=167&amp;f=png&amp;s=2183" alt="输出结果2" title="输出结果2"></a></p>
<p>更多测试用例：</p>
<h5 id="input-1"><a href="#input-1" class="headerlink" title="input 1"></a>input 1</h5><p>3     <br><br>1 1 0 <br><br>1 1 1 <br><br>1 1 0 <br></p>
<h5 id="output1"><a href="#output1" class="headerlink" title="output1"></a>output1</h5><p>0</p>
<h5 id="input2"><a href="#input2" class="headerlink" title="input2"></a>input2</h5><p>4<br><br>1 1 1 1 <br><br>1 0 1 1 <br><br>1 1 1 1 <br><br>1 1 1 1 <br></p>
<h5 id="output2"><a href="#output2" class="headerlink" title="output2"></a>output2</h5><p>2</p>
<h5 id="input-3"><a href="#input-3" class="headerlink" title="input 3"></a>input 3</h5><p>5<br><br>1 1 1 1 1 <br><br>1 0 1 1 1 <br><br>1 1 1 1 1 <br><br>1 0 1 1 1 <br><br>1 1 1 1 1 <br></p>
<h5 id="output3"><a href="#output3" class="headerlink" title="output3"></a>output3</h5><p>12</p>
<h5 id="input4"><a href="#input4" class="headerlink" title="input4"></a>input4</h5><p>6<br><br>1 1 1 1 1 1 <br><br>1 1 1 1 1 1 <br><br>1 1 1 1 1 1 <br><br>1 1 1 1 1 1 <br><br>1 1 1 1 1 1 <br><br>1 1 1 1 1 1 <br></p>
<h5 id="output4"><a href="#output4" class="headerlink" title="output4"></a>output4</h5><p>12</p>
<h5 id="input5"><a href="#input5" class="headerlink" title="input5"></a>input5</h5><p>7<br><br>1 1 1 1 1 1 0 <br><br>1 1 1 1 1 1 1 <br><br>1 1 1 1 1 1 1 <br><br>1 1 1 1 1 1 1 <br><br>1 1 1 1 1 1 1 <br><br>1 1 1 1 1 1 1 <br><br>1 1 1 1 1 1 1 <br></p>
<h5 id="output"><a href="#output" class="headerlink" title="output"></a>output</h5><p>408</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
        <tag>深度优先搜索</tag>
        <tag>2N皇后</tag>
      </tags>
  </entry>
  <entry>
    <title>算法入门 —— N皇后问题</title>
    <url>/2019/02/14/lanqiao/basic6/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>&emsp;&emsp;在N*N的方格棋盘放置了N个皇后，使得它们不相互攻击（即任意2个皇后不允许处在同一排，同一列，也不允许处在与棋盘边框成45角的斜线上。<br>你的任务是，对于给定的N，求出有多少种合法的放置方法。</p>
<a id="more"></a>
<p>&emsp;&emsp;如图所示，这是个4*4棋盘皇后的放置方法：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/2/14/168ea7ab01740c6a?w=706&amp;h=329&amp;f=png&amp;s=5748" data-fancybox="group" data-caption="4*4棋盘皇后" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/2/14/168ea7ab01740c6a?w=706&amp;h=329&amp;f=png&amp;s=5748" alt="4*4棋盘皇后" title="4*4棋盘皇后"></a></p>
<h3 id="解决方法1："><a href="#解决方法1：" class="headerlink" title="解决方法1："></a>解决方法1：</h3><p>&emsp;&emsp;解决N皇后的问题，一般都是采用递归搜索的方式，普通暴力方法太耗时，不在本文章的讨论范围之内。</p>
<h4 id="1、搜索所有位置："><a href="#1、搜索所有位置：" class="headerlink" title="1、搜索所有位置："></a>1、搜索所有位置：</h4><p>&emsp;&emsp;若想遍历所有摆法而无一遗漏，可以逐行<strong>先从左至右，在从上至下（按行搜索，一行搜索完或者找到一个可以放置皇后的位置就换行）</strong>尝试棋子的摆放，<code>方法名为DFS()</code>。</p>
<h4 id="2、判断是否可以摆放："><a href="#2、判断是否可以摆放：" class="headerlink" title="2、判断是否可以摆放："></a>2、判断是否可以摆放：</h4><p>&emsp;&emsp;每次分配的棋盘多出一行和一列，第一列存储所在行的皇后放置的位置。如a[2][0] = 2  ,表示皇后放置在第3行的第3列(从0开始计算)， <code>方法名为isLegal()</code>。</p>
<p>&emsp;&emsp;因为采用的是按行搜索，判断本位置可以放置皇后就换行，所以不会出现一行出现多个皇后， 因而只需判断列和对角线。</p>
<p>(1) 不在同一列：对比第一列中的元素（a[i][0]）。<br><br>(2) 不在对角线：即有两棋子坐标分别为(X1,Y1),(X2,Y2)，则|X1-X2|!=|Y1-Y2|</p>
<h4 id="3、搜索流程"><a href="#3、搜索流程" class="headerlink" title="3、搜索流程"></a>3、搜索流程</h4><p><a href="https://user-gold-cdn.xitu.io/2019/2/14/168eaa62f909ed58?w=906&amp;h=463&amp;f=png&amp;s=36108" data-fancybox="group" data-caption="搜索流程" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/2/14/168eaa62f909ed58?w=906&amp;h=463&amp;f=png&amp;s=36108" alt="搜索流程" title="搜索流程"></a><br>所以总共能搜索出两种情况。如题目描述中。</p>
<h4 id="4、递归流程"><a href="#4、递归流程" class="headerlink" title="4、递归流程"></a>4、递归流程</h4><p><a href="https://user-gold-cdn.xitu.io/2019/2/14/168eaafab7140650?w=771&amp;h=398&amp;f=png&amp;s=39456" data-fancybox="group" data-caption class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/2/14/168eaafab7140650?w=771&amp;h=398&amp;f=png&amp;s=39456" alt title></a><br>&emsp;&emsp;当每一个流程执行同之后，代表一个情况，这里，用 <code>row = n +1 = 5</code>(开始寻找第五行时)是作为递归的结束条件。 </p>
<h4 id="5、代码"><a href="#5、代码" class="headerlink" title="5、代码"></a>5、代码</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//N皇后问题</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">11</span>][<span class="number">11</span>]; <span class="comment">//皇后其棋盘，第一行和第一列来存储 每一行的皇后的列坐标</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">11</span>]; <span class="comment">//打表所用的数组</span></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断第x行第y列放置皇后是否合法。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLegal</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;   </span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;x; i++) &#123;</span><br><span class="line">	 </span><br><span class="line">		<span class="keyword">if</span>(a[i][<span class="number">0</span>] == y || <span class="built_in">abs</span>(x-i) == <span class="built_in">abs</span>(y-a[i][<span class="number">0</span>])) &#123;  <span class="comment">//在同一列或者同一对角线 </span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;n+<span class="number">1</span>;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j == a[i][<span class="number">0</span>])&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"1 "</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"0 "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> m)</span> </span>&#123; <span class="comment">//n代表搜索到第几行，m代表皇后的数量</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(row == m+<span class="number">1</span>) &#123;       <span class="comment">//搜索结束条件(皇后放置完成)</span></span><br><span class="line">		num++;</span><br><span class="line">		print(m);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(isLegal(row,i)) &#123;</span><br><span class="line">				a[row][<span class="number">0</span>] = i;</span><br><span class="line">				DFS(row+<span class="number">1</span>,m);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;<span class="number">6</span>; i++) &#123;</span><br><span class="line">		num = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d * %d 时\n"</span>,i,i);</span><br><span class="line">		DFS(<span class="number">1</span>,i);</span><br><span class="line">		b[i] = num;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"共有%d种情况\n\n"</span>,num);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/2/14/168eaba1184e1271?w=184&amp;h=387&amp;f=png&amp;s=5950" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/2/14/168eaba1184e1271?w=184&amp;h=387&amp;f=png&amp;s=5950" alt="输出结果" title="输出结果"></a></p>
<h3 id="解决方法2：空间复杂度优化"><a href="#解决方法2：空间复杂度优化" class="headerlink" title="解决方法2：空间复杂度优化"></a>解决方法2：空间复杂度优化</h3><p>&emsp;&emsp;因为二维数组里面并不是真的存储皇后，只是便于理解而已，真正用到的存储空间只有二维数组中的第一列。正好使用一个一维数组表示，这样空间复杂度从<script type="math/tex">O(n ^2)</script> 降到了 <script type="math/tex">n</script>。代码中只需把所有有关二维数组后面[]去掉即可。<br>代码如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//N皇后问题</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">11</span>]; <span class="comment">//皇后其棋盘，相当于二维数组中的第一列，只存储本行皇后的放置位置 </span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">11</span>]; <span class="comment">//打表所用的数组</span></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断第x行第y列放置皇后是否合法。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLegal</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;   </span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;x; i++) &#123;</span><br><span class="line">	 </span><br><span class="line">		<span class="keyword">if</span>(a[i] == y || <span class="built_in">abs</span>(x-i) == <span class="built_in">abs</span>(y-a[i])) &#123;  <span class="comment">//在同一列或者同一对角线 </span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;n+<span class="number">1</span>;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j == a[i])&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"1 "</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"0 "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> m)</span> </span>&#123; <span class="comment">//n代表搜索到第几行，m代表皇后的数量</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(row == m+<span class="number">1</span>) &#123;       <span class="comment">//搜索结束条件(皇后放置完成)</span></span><br><span class="line">		num++;</span><br><span class="line">		print(m);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(isLegal(row,i)) &#123;</span><br><span class="line">				a[row] = i;</span><br><span class="line">				DFS(row+<span class="number">1</span>,m);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;<span class="number">6</span>; i++) &#123;</span><br><span class="line">		num = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d * %d 时\n"</span>,i,i);</span><br><span class="line">		DFS(<span class="number">1</span>,i);</span><br><span class="line">		b[i] = num;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"共有%d种情况\n\n"</span>,num);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>深度优先搜索</tag>
        <tag>N皇后</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——基础练习16</title>
    <url>/2019/02/13/lanqiao/basic5/</url>
    <content><![CDATA[<h3 id="1、Huffuman树"><a href="#1、Huffuman树" class="headerlink" title="1、Huffuman树"></a>1、Huffuman树</h3><a id="more"></a>
<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　Huffman树在编码中有着广泛的应用。在这里，我们只关心Huffman树的构造过程。<br>　　给出一列数{pi}={p0, p1, …, pn-1}，用这列数构造Huffman树的过程如下：<br><br>　　1. 找到{pi}中最小的两个数，设为pa和pb，将pa和pb从{pi}中删除掉，然后将它们的和加入到{pi}中。这个过程的费用记为pa +pb。<br><br>　　2. 重复步骤1，直到{pi}中只剩下一个数。<br><br>　　在上面的操作过程中，把所有的费用相加，就得到了构造Huffman树的总费用。<br><br>　　本题任务：对于给定的一个数列，现在请你求出用该数列构造Huffman树的总费用。</p>
<p>　　例如，对于数列{pi}={5, 3, 8, 2, 9}，Huffman树的构造过程如下：<br><br>　　1. 找到{5, 3, 8, 2,<br> 9}中最小的两个数，分别是2和3，从{pi}中删除它们并将和5加入，得到{5, 8, 9, 5}，费用为5。<br><br>　　2. 找到{5, 8, 9,5}中最小的两个数，分别是5和5，从{pi}中删除它们并将和10加入，得到{8, 9, 10}，费用为10。<br><br>　　3. 找到{8, 9, 10}中最小的两个数，分别是8和9，从{pi}中删除它们并将和17加入，得到{10, 17}，费用为17。<br><br>　　4. 找到{10, 17}中最小的两个数，分别是10和17，从{pi}中删除它们并将和27加入，得到{27}，费用为27。<br><br>　　5. 现在，数列中只剩下一个数27，构造过程结束，总费用为5+10+17+27=59。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式<br></h4><p>　　输入的第一行包含一个正整数n（n&lt;=100）。<br>　　接下来是n个正整数，表示p0, p1, …, pn-1，每个数不超过1000。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>　　输出用这些数构造Huffman树的总费用。</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>5<br><br>5 3 8 2 9<br></p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出<br></h4><p>59</p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=i;j&lt;length;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i]&gt;arr[j])&#123;</span><br><span class="line">				<span class="keyword">int</span> t = arr[i];</span><br><span class="line">				arr[i] = arr[j];</span><br><span class="line">				arr[j] = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,i,sum,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">int</span> arr[n];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(arr,n);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	j = <span class="number">0</span>;</span><br><span class="line">	sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(j&lt;n<span class="number">-1</span>)&#123;</span><br><span class="line">		sum = sum + arr[j] + arr[j+<span class="number">1</span>];</span><br><span class="line">		arr[j+<span class="number">1</span>] = arr[j] + arr[j+<span class="number">1</span>];</span><br><span class="line">		arr[j] = <span class="number">-1</span>;</span><br><span class="line">		sort(arr,n);</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2、2n皇后问题"><a href="#2、2n皇后问题" class="headerlink" title="2、2n皇后问题"></a>2、2n皇后问题</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　给定一个n*n的棋盘，棋盘中有一些位置不能放皇后。现在要向棋盘中放入n个黑皇后和n个白皇后，使任意的两个黑皇后都不在同一行、同一列或同一条对角线上，任意的两个白皇后都不在同一行、同一列或同一条对角线上。问总共有多少种放法？n小于等于8。</p>
<h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>　　输入的第一行为一个整数n，表示棋盘的大小。</p>
<p>　　接下来n行，每行n个0或1的整数，如果一个整数为1，表示对应的位置可以放皇后，如果一个整数为0，表示对应的位置不可以放皇后。</p>
<h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>　　输出一个整数，表示总共有多少种放法。</p>
<h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><p>4</p>
<p>1 1 1 1</p>
<p>1 1 1 1</p>
<p>1 1 1 1</p>
<p>1 1 1 1</p>
<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><p>2</p>
<h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><p>4</p>
<p>1 0 1 1</p>
<p>1 1 1 1</p>
<p>1 1 1 1</p>
<p>1 1 1 1</p>
<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><p>0</p>
<blockquote>
<p>篇幅较长，详见下一篇</p>
</blockquote>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——基础练习11-15</title>
    <url>/2019/01/27/lanqiao/basic4/</url>
    <content><![CDATA[<h3 id="1、字母图形"><a href="#1、字母图形" class="headerlink" title="1、字母图形"></a>1、字母图形</h3><h3 id="2、01字串"><a href="#2、01字串" class="headerlink" title="2、01字串"></a>2、01字串</h3><h3 id="3、闰年判断"><a href="#3、闰年判断" class="headerlink" title="3、闰年判断"></a>3、闰年判断</h3><h3 id="4、阶乘计算"><a href="#4、阶乘计算" class="headerlink" title="4、阶乘计算"></a>4、阶乘计算</h3><h3 id="5、高精度加法"><a href="#5、高精度加法" class="headerlink" title="5、高精度加法"></a>5、高精度加法</h3><a id="more"></a>
<h3 id="1、字母图形-1"><a href="#1、字母图形-1" class="headerlink" title="1、字母图形"></a>1、字母图形</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>利用字母可以组成一些美丽的图形，下面给出了一个例子：</p>
<p>ABCDEFG</p>
<p>BABCDEF</p>
<p>CBABCDE</p>
<p>DCBABCD</p>
<p>EDCBABC</p>
<p>这是一个5行7列的图形，请找出这个图形的规律，并输出一个n行m列的图形。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一行，包含两个整数n和m，分别表示你要输出的图形的行数的列数。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出n行，每个m个字符，为你的图形。</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>5 7</p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>ABCDEFG</p>
<p>BABCDEF</p>
<p>CBABCDE</p>
<p>DCBABCD</p>
<p>EDCBABC</p>
<h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>1 &lt;= n, m &lt;= 26。</p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="built_in">abs</span>(i-j)+<span class="number">65</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2、01字串-1"><a href="#2、01字串-1" class="headerlink" title="2、01字串"></a>2、01字串</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>对于长度为5位的一个01串，每一位都可能是0或1，一共有32种可能。它们的前几个是：</p>
<p>00000</p>
<p>00001</p>
<p>00010</p>
<p>00011</p>
<p>00100</p>
<p>请按从小到大的顺序输出这32种01串。</p>
<h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>本试题没有输入。</p>
<h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出32行，按从小到大的顺序每行一个长度为5的01串。</p>
<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><p>00000</p>
<p>00001</p>
<p>00010</p>
<p>00011</p>
<p>&lt;以下部分省略&gt;</p>
<blockquote>
<h4 id="分析：仔细观察可以想到输出的顺序其实就是0-31的二进制表示，所以可以遍历0-31，求二进制求解。题目规定的精度也不高，直接int存储二进制就可以了-前面的补0-可以使用C语言的-05d格式化输出。"><a href="#分析：仔细观察可以想到输出的顺序其实就是0-31的二进制表示，所以可以遍历0-31，求二进制求解。题目规定的精度也不高，直接int存储二进制就可以了-前面的补0-可以使用C语言的-05d格式化输出。" class="headerlink" title="分析：仔细观察可以想到输出的顺序其实就是0-31的二进制表示，所以可以遍历0-31，求二进制求解。题目规定的精度也不高，直接int存储二进制就可以了,前面的补0,可以使用C语言的%05d格式化输出。"></a>分析：仔细观察可以想到输出的顺序其实就是0-31的二进制表示，所以可以遍历0-31，求二进制求解。题目规定的精度也不高，直接int存储二进制就可以了,前面的补0,可以使用C语言的%05d格式化输出。</h4></blockquote>
<h4 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		i = n % <span class="number">2</span>;</span><br><span class="line">		t = t  + i *b;</span><br><span class="line">		n = n / <span class="number">2</span>;</span><br><span class="line">		b = b * <span class="number">10</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%05d\n"</span>,fun(i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="3、闰年判断-1"><a href="#3、闰年判断-1" class="headerlink" title="3、闰年判断"></a>3、闰年判断</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个年份，判断这一年是不是闰年。</p>
<p>当以下情况之一满足时，这一年是闰年：</p>
<ol>
<li><p>年份是4的倍数而不是100的倍数；</p>
</li>
<li><p>年份是400的倍数。</p>
</li>
</ol>
<p>其他的年份都不是闰年。</p>
<h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含一个整数y，表示当前的年份。</p>
<h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行，如果给定的年份是闰年，则输出yes，否则输出no。<br>说明：当试题指定你输出一个字符串作为结果（比如本题的yes或者no，你需要严格按照试题中给定的大小写，写错大小写将不得分。</p>
<h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><p>2013</p>
<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><p>no</p>
<h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><p>2016</p>
<h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h4><p>yes</p>
<h4 id="数据规模与约定-1"><a href="#数据规模与约定-1" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>1990 &lt;= y &lt;= 2050。</p>
<h4 id="代码如下：-2"><a href="#代码如下：-2" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> year;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;year);</span><br><span class="line">	<span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span> || (year%<span class="number">100</span>!=<span class="number">0</span> &amp;&amp; year%<span class="number">4</span>==<span class="number">0</span>))&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"yes\n"</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"no\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="4、阶乘计算-1"><a href="#4、阶乘计算-1" class="headerlink" title="4、阶乘计算"></a>4、阶乘计算</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　输入一个正整数n，输出n!的值。<br>　　其中n!=1*2*3*…*n。</p>
<h4 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h4><p>　　n!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组A来表示一个大整数a，A[0]表示a的个位，A[1]表示a的十位，依次类推。<br>　　将a乘以一个整数k变为将数组A的每一个元素都乘以k，请注意处理相应的进位。<br>　　首先将a设为1，然后乘2，乘3，当乘到n时，即得到了n!的值。</p>
<h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>　　输入包含一个正整数n，n&lt;=1000。</p>
<h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>　　输出n!的准确值。</p>
<h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h4><p>10</p>
<h4 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h4><p>3628800</p>
<h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,i,j,t,k = <span class="number">0</span>;</span><br><span class="line">	j = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">10000</span>];</span><br><span class="line">	arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	arr[<span class="number">1</span>] = <span class="number">-1</span>;  <span class="comment">//-1 记录末尾 </span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;            </span><br><span class="line">		j = <span class="number">0</span>;</span><br><span class="line">		k = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(arr[j]!=<span class="number">-1</span>)&#123;            <span class="comment">//使用 i * arr[j] </span></span><br><span class="line">			t = arr[j] * i + k;       <span class="comment">// k存储上次进位 </span></span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(t&lt;<span class="number">10</span>)&#123;                  </span><br><span class="line">				arr[j] = t;</span><br><span class="line">				k = <span class="number">0</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">				arr[j] = t % <span class="number">10</span>;</span><br><span class="line">				k = t / <span class="number">10</span>; </span><br><span class="line">			&#125;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//处理最后一次进位k ,k有可能很大，所有用循环赋值。 </span></span><br><span class="line">		<span class="keyword">if</span>(k&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">while</span>(k)&#123;</span><br><span class="line">				arr[j++] = k % <span class="number">10</span>;</span><br><span class="line">				k = k / <span class="number">10</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			arr[j] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 用i指向末尾 </span></span><br><span class="line">	i =<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(arr[i]!=<span class="number">-1</span>)&#123;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(j = i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,arr[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="5、高精度加法-1"><a href="#5、高精度加法-1" class="headerlink" title="5、高精度加法"></a>5、高精度加法</h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　输入两个整数a和b，输出这两个整数的和。a和b都不超过100位。</p>
<h4 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h4><p>　　由于a和b都比较大，所以不能直接使用语言中的标准数据类型来存储。对于这种问题，一般使用数组来处理。<br><br>　　定义一个数组A，A[0]用于存储a的个位，A[1]用于存储a的十位，依此类推。同样可以用一个数组B来存储b。<br><br>　　计算c = a + b的时候，首先将A[0]与B[0]相加，如果有进位产生，则把进位（即和的十位数）存入r，把和的个位数存入C[0]，即C[0]等于(A[0]+B[0])%10。然后计算A[1]与B[1]相加，这时还应将低位进上来的值r也加起来，即C[1]应该是A[1]、B[1]和r三个数的和．如果又有进位产生，则仍可将新的进位存入到r中，和的个位存到C[1]中。依此类推，即可求出C的所有位。<br><br>　　最后将C输出即可。
　　</p>
<h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>　　输入包括两行，第一行为一个非负整数a，第二行为一个非负整数b。两个整数都不超过100位，两数的最高位都不是0。</p>
<h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>　　输出一行，表示a + b的值。</p>
<h4 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h4><p>20100122201001221234567890 <br><br>2010012220100122</p>
<h4 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h4><p>20100122203011233454668012</p>
<h4 id="代码如下：-3"><a href="#代码如下：-3" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr1[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">char</span> arr2[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">int</span> sum[<span class="number">101</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, arr1);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, arr2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录两个字符长度</span></span><br><span class="line">    <span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(arr1);</span><br><span class="line">    <span class="keyword">int</span> len2 = <span class="built_in">strlen</span>(arr2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录最大长度，方便输出</span></span><br><span class="line">    <span class="keyword">int</span> max = len1 &gt; len2 ? len1 : len2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sum的下标(因为必须从后往前加)</span></span><br><span class="line">    <span class="keyword">int</span> index = max - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//arr1的下标</span></span><br><span class="line">    <span class="keyword">int</span> i = len1 - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//arr2的下标</span></span><br><span class="line">    <span class="keyword">int</span> j = len2 - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相加时的中间数</span></span><br><span class="line">    <span class="keyword">int</span> t, k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;         <span class="comment">//第一个数组遍历完成</span></span><br><span class="line">            t = arr2[j] - <span class="string">'0'</span> + k;</span><br><span class="line">            j--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j&lt;<span class="number">0</span>)&#123;  <span class="comment">//第二个数组遍历完成</span></span><br><span class="line">            t = arr1[i] - <span class="string">'0'</span> + k;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;            <span class="comment">//两个数组同时遍历</span></span><br><span class="line">            t = arr1[i] - <span class="string">'0'</span> + arr2[j] - <span class="string">'0'</span> + k;</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//相加处理</span></span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            sum[index--] = t;</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum[index--] = t % <span class="number">10</span>;</span><br><span class="line">            k = t / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先输出k，因为这有可能是进位数</span></span><br><span class="line">    <span class="keyword">if</span>(k&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, sum[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——基础练习6-10</title>
    <url>/2019/01/26/lanqiao/basic3/</url>
    <content><![CDATA[<h3 id="1、-回文数"><a href="#1、-回文数" class="headerlink" title="1、 回文数"></a>1、 回文数</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>　　按从小到大的顺序输出满足条件的四位十进制数。<br><a id="more"></a></p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="keyword">int</span> a = i;</span><br><span class="line">	t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i)&#123;</span><br><span class="line">		t = i % <span class="number">10</span>  + t * <span class="number">10</span>;</span><br><span class="line">		i = i / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(t == a)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1000</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(fun(i))&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2、特殊的数字"><a href="#2、特殊的数字" class="headerlink" title="2、特殊的数字"></a>2、特殊的数字</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　153是一个非常特殊的数，它等于它的每位数字的立方和，即153=1*1*1+5*5*5+3*3*3。编程求所有满足这种条件的三位十进制数。</p>
<h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>　　按从小到大的顺序输出满足条件的三位十进制数，每个数占一行。</p>
<h4 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">int</span> a,b,c;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">100</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">		a = i / <span class="number">100</span>;</span><br><span class="line">		b = i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">		c = i % <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span>((a*a*a+b*b*b+c*c*c) == i)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="3、杨辉三角形"><a href="#3、杨辉三角形" class="headerlink" title="3、杨辉三角形"></a>3、杨辉三角形</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。<br>它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。</p>
<p>下面给出了杨辉三角形的前4行：</p>
<p>1</p>
<p>1 1</p>
<p>1 2 1</p>
<p>1 3 3 1</p>
<p>　　<br>给出n，输出它的前n行。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含一个数n。</p>
<h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>4</p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>1</p>
<p>1 1</p>
<p>1 2 1</p>
<p>1 3 3 1</p>
<h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>1 &lt;= n &lt;= 34。</p>
<blockquote>
<h4 id="分析：直接用两层循环不是很好找规律，因为是内部数与数之间的关系，所以使用二维数组。"><a href="#分析：直接用两层循环不是很好找规律，因为是内部数与数之间的关系，所以使用二维数组。" class="headerlink" title="分析：直接用两层循环不是很好找规律，因为是内部数与数之间的关系，所以使用二维数组。"></a>分析：直接用两层循环不是很好找规律，因为是内部数与数之间的关系，所以使用二维数组。</h4></blockquote>
<h4 id="代码如下：-2"><a href="#代码如下：-2" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">int</span> arr[n][n];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j==<span class="number">0</span>||i==j)&#123;</span><br><span class="line">				arr[i][j] = <span class="number">1</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&gt;j)&#123;</span><br><span class="line">				arr[i][j] = arr[i<span class="number">-1</span>][j] + arr[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">			&#125; </span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;=j)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d "</span>,arr[i][j]);</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="4、查找整数"><a href="#4、查找整数" class="headerlink" title="4、查找整数"></a>4、查找整数</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。</p>
<h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含一个整数n。</p>
<p>第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。</p>
<p>第三行包含一个整数a，为待查找的数。</p>
<h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。</p>
<h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><p>6 <br><br>1 9 4 8 3 9 <br><br>9</p>
<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><p>2</p>
<h4 id="数据规模与约定-1"><a href="#数据规模与约定-1" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>1 &lt;= n &lt;= 1000。</p>
<h4 id="代码如下：-3"><a href="#代码如下：-3" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,i,a;</span><br><span class="line">	<span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">int</span> arr[n];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d "</span>,&amp;arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a == arr[i])&#123;</span><br><span class="line">			index = i + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,index);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="5、数列特征"><a href="#5、数列特征" class="headerlink" title="5、数列特征"></a>5、数列特征</h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><p>给出n个数，找出这n个数的最大值，最小值，和。</p>
<h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行为整数n，表示数的个数。</p>
<p>第二行有n个数，为给定的n个数，每个数的绝对值都小于10000。</p>
<h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出三行，每行一个整数。第一行表示这些数中的最大值，第二行表示这些数中的最小值，第三行表示这些数的和。</p>
<h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><p>5 <br><br>1 3 -2 4 5</p>
<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><p>5 <br><br>-2 <br><br>11 </p>
<h4 id="数据规模与约定-2"><a href="#数据规模与约定-2" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>1 &lt;= n &lt;= 10000。</p>
<h4 id="代码如下：-4"><a href="#代码如下：-4" class="headerlink" title="代码如下："></a>代码如下：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,i,max,min,sum;</span><br><span class="line">	sum = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">int</span> arr[n];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[i]);</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">			max = arr[i];</span><br><span class="line">			min = arr[i];</span><br><span class="line">			sum = arr[i];</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			sum = sum + arr[i];</span><br><span class="line">			<span class="keyword">if</span>(arr[i]&gt;max)&#123;</span><br><span class="line">				max = arr[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(arr[i]&lt;min)&#123;</span><br><span class="line">				min = arr[i];</span><br><span class="line">			&#125; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n%d\n%d\n"</span>,max,min,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——基础练习1-5</title>
    <url>/2019/01/26/lanqiao/basic2/</url>
    <content><![CDATA[<h3 id="1、数列排序"><a href="#1、数列排序" class="headerlink" title="1、数列排序"></a>1、数列排序</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;=n&lt;=200</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>　　第一行为一个整数n。<br>　　第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>　　输出一行，按从小到大的顺序输出排序后的数列。<br><br><a id="more"></a><br>代码如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;length;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">array</span>[i]&gt;<span class="built_in">array</span>[j])&#123;</span><br><span class="line">				<span class="keyword">int</span> t = <span class="built_in">array</span>[i];</span><br><span class="line">				<span class="built_in">array</span>[i] = <span class="built_in">array</span>[j];</span><br><span class="line">				<span class="built_in">array</span>[j] = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,i;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">array</span>[n];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="built_in">array</span>[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(<span class="built_in">array</span>,n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,<span class="built_in">array</span>[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h3 id="2、十六进制转八进制"><a href="#2、十六进制转八进制" class="headerlink" title="2、十六进制转八进制"></a>2、十六进制转八进制</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　给定n个十六进制正整数，输出它们对应的八进制数。</p>
<h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>　　输入的第一行为一个正整数n （1&lt;=n&lt;=10）。<br>　　接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。</p>
<h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>　　输出n行，每行为输入对应的八进制正整数。</p>
<p>　　【注意】<br>　　输入的十六进制数不会有前导0，比如012A。<br>　　输出的八进制数也不能有前导0。</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>　　2<br>　　39<br>　　123ABC</p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>　　71<br>　　4435274</p>
<blockquote>
<h4 id="分析：题目规定输入的十六进制数长度要低于100000，转换为二进制长度就是要兼容400000，使用long-long-也根本无法兼容。所以使用字符串来存储16进制数，转换为二进制也用字符串。最后把二进制转为8进制。"><a href="#分析：题目规定输入的十六进制数长度要低于100000，转换为二进制长度就是要兼容400000，使用long-long-也根本无法兼容。所以使用字符串来存储16进制数，转换为二进制也用字符串。最后把二进制转为8进制。" class="headerlink" title="分析：题目规定输入的十六进制数长度要低于100000，转换为二进制长度就是要兼容400000，使用long long 也根本无法兼容。所以使用字符串来存储16进制数，转换为二进制也用字符串。最后把二进制转为8进制。"></a>分析：题目规定输入的十六进制数长度要低于100000，转换为二进制长度就是要兼容400000，使用long long 也根本无法兼容。所以使用字符串来存储16进制数，转换为二进制也用字符串。最后把二进制转为8进制。</h4></blockquote>
<p>简单做法(不符合题意)：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,i;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%I64x"</span>,&amp;t);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%I64o\n"</span>,t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>正确做法：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> s[<span class="number">500000</span>];         <span class="comment">//存储输入的16进制数 </span></span><br><span class="line">	<span class="keyword">int</span> n,i,j;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">		<span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);   </span><br><span class="line">		<span class="keyword">char</span> p[len*<span class="number">4</span>];       <span class="comment">//存储输入的16进制数对应的二进制 </span></span><br><span class="line">		convet16to2(s,p);  </span><br><span class="line">		convert2to8(p,len*<span class="number">4</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把十六进制转换为二进制</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">convet16to2</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">char</span> *p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> length = <span class="built_in">strlen</span>(s); <span class="comment">//获取输入的长度 </span></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">char</span> *t;</span><br><span class="line">	<span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">	p[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">		<span class="keyword">switch</span>(s[i])&#123; </span><br><span class="line">			<span class="keyword">case</span> <span class="string">'0'</span>:t = <span class="string">"0000"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'1'</span>:t = <span class="string">"0001"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'2'</span>:t = <span class="string">"0010"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'3'</span>:t = <span class="string">"0011"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'4'</span>:t = <span class="string">"0100"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'5'</span>:t = <span class="string">"0101"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'6'</span>:t = <span class="string">"0110"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'7'</span>:t = <span class="string">"0111"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'8'</span>:t = <span class="string">"1000"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'9'</span>:t = <span class="string">"1001"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'A'</span>:t = <span class="string">"1010"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'B'</span>:t = <span class="string">"1011"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'C'</span>:t = <span class="string">"1100"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'D'</span>:t = <span class="string">"1101"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'E'</span>:t = <span class="string">"1110"</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'F'</span>:t = <span class="string">"1111"</span>;<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">strcat</span>(p,t);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//把二进制进制转换为八进制 421</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">convert2to8</span><span class="params">(<span class="keyword">char</span> c[],<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> len8 =length%<span class="number">3</span>==<span class="number">0</span>?length/<span class="number">3</span>:length/<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> d[len8];        <span class="comment">//存储8进制 </span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=length<span class="number">-1</span>;i&gt;<span class="number">0</span>;i=i<span class="number">-3</span>)&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> a;</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">			a = (c[i] - <span class="number">48</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">			a = (c[i<span class="number">-1</span>] - <span class="number">48</span>)*<span class="number">10</span> + (c[i] - <span class="number">48</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			a = (c[i<span class="number">-2</span>] - <span class="number">48</span>) *<span class="number">100</span> + (c[i<span class="number">-1</span>] - <span class="number">48</span>)*<span class="number">10</span> + (c[i] - <span class="number">48</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> t;</span><br><span class="line">		<span class="keyword">switch</span>(a)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>: t=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>: t=<span class="number">1</span>;<span class="keyword">break</span>; </span><br><span class="line">			<span class="keyword">case</span> <span class="number">10</span>: t=<span class="number">2</span>;<span class="keyword">break</span>; </span><br><span class="line">			<span class="keyword">case</span> <span class="number">11</span>: t=<span class="number">3</span>;<span class="keyword">break</span>; </span><br><span class="line">			<span class="keyword">case</span> <span class="number">100</span>: t=<span class="number">4</span>;<span class="keyword">break</span>; </span><br><span class="line">			<span class="keyword">case</span> <span class="number">101</span>: t=<span class="number">5</span>;<span class="keyword">break</span>; </span><br><span class="line">			<span class="keyword">case</span> <span class="number">110</span>: t=<span class="number">6</span>;<span class="keyword">break</span>; </span><br><span class="line">			<span class="keyword">case</span> <span class="number">111</span>: t=<span class="number">7</span>;<span class="keyword">break</span>; </span><br><span class="line">		&#125;</span><br><span class="line">		d[j++] = t;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(j=j<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,d[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h3 id="3、十六进制转十进制"><a href="#3、十六进制转十进制" class="headerlink" title="3、十六进制转十进制"></a>3、十六进制转十进制</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。<br>　　注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。</p>
<h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><p>FFFF</p>
<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><p>65535</p>
<blockquote>
<h4 id="题目要求的精度比较低，较为简单"><a href="#题目要求的精度比较低，较为简单" class="headerlink" title="题目要求的精度比较低，较为简单"></a>题目要求的精度比较低，较为简单</h4></blockquote>
<p>代码如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%I64x"</span>,&amp;a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h3 id="4、十进制转十六进制"><a href="#4、十进制转十六进制" class="headerlink" title="4、十进制转十六进制"></a>4、十进制转十六进制</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。<br>　　给出一个非负整数，将它表示成十六进制的形式。</p>
<h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>　　输入包含一个非负整数a，表示要转换的数。0&lt;=a&lt;=2147483647</p>
<h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>　　输出这个整数的16进制表示
　　</p>
<blockquote>
<h4 id="分析：题目要求的精度比较低，较为简单"><a href="#分析：题目要求的精度比较低，较为简单" class="headerlink" title="分析：题目要求的精度比较低，较为简单"></a>分析：题目要求的精度比较低，较为简单</h4></blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%I64X\n"</span>,a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="5、特殊回文数"><a href="#5、特殊回文数" class="headerlink" title="5、特殊回文数"></a>5、特殊回文数</h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　123321是一个非常特殊的数，它从左边读和从右边读是一样的。<br>　　输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。</p>
<h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>　　输入一行，包含一个正整数n。</p>
<h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>　　按从小到大的顺序输出满足条件的整数，每个整数占一行。</p>
<h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><p>　　52</p>
<h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><p>　　899998 <br><br>　　989989 <br><br>　　998899 <br><br>　　数据规模和约定<br><br>　　1&lt;=n&lt;=54。<br></p>
<blockquote>
<h4 id="分析：这题比较比较容易，题目要求五位和六位数，就是在-10000-1000000-之间，先判断是否是回文，然后在判断位数上的数相加是否等于n即可。"><a href="#分析：这题比较比较容易，题目要求五位和六位数，就是在-10000-1000000-之间，先判断是否是回文，然后在判断位数上的数相加是否等于n即可。" class="headerlink" title="分析：这题比较比较容易，题目要求五位和六位数，就是在[10000,1000000)之间，先判断是否是回文，然后在判断位数上的数相加是否等于n即可。"></a>分析：这题比较比较容易，题目要求五位和六位数，就是在[10000,1000000)之间，先判断是否是回文，然后在判断位数上的数相加是否等于n即可。</h4><p>代码如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否是回文数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> b = a;</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(a&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		t = t * <span class="number">10</span> + a % <span class="number">10</span>;</span><br><span class="line">		a = a / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(b == t)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算个个位数上的数相加和 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun2</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="keyword">while</span>(a)&#123; </span><br><span class="line">		t = a %<span class="number">10</span>;</span><br><span class="line">		sum = sum + t;</span><br><span class="line">		a  = a / <span class="number">10</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">10000</span>;i&lt;<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(fun(i)&amp;&amp;fun2(i)==n )&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
</blockquote>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯试题——基础篇</title>
    <url>/2019/01/24/lanqiao/basic/</url>
    <content><![CDATA[<h2 id="1、-A-B问题"><a href="#1、-A-B问题" class="headerlink" title="1、 A+B问题"></a>1、 A+B问题</h2><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>输入A、B，输出A+B。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行包括两个整数，由空格分隔，分别表示A、B。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行，包括一个整数，表示A+B的值。<br><a id="more"></a><br>代码：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, a+b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h2 id="2、序列求和"><a href="#2、序列求和" class="headerlink" title="2、序列求和"></a>2、序列求和</h2><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>求1+2+3+…+n的值。</p>
<h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包括一个整数n。</p>
<h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行，包括一个整数，表示1+2+3+…+n的值。</p>
<h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>1 &lt;= n &lt;= 1,000,000,000。</p>
<p>分析：因为n要求的数据规模很大，所以直接循环累加的方式不能满足要求，所以采用求等差数列前n和公式 <script type="math/tex">S(n) = \frac{(a_1 + a_n)*n}{2}</script></p>
<p>代码：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> n,i;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	sum = ((<span class="number">1</span>+n) * n)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h2 id="3、圆的面积"><a href="#3、圆的面积" class="headerlink" title="3、圆的面积"></a>3、圆的面积</h2><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定圆的半径r，求圆的面积。</p>
<h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含一个整数r，表示圆的半径。</p>
<h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。</p>
<h4 id="数据规模与约定-1"><a href="#数据规模与约定-1" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>1 &lt;= r &lt;= 10000。</p>
<h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>本题对精度要求较高，请注意π的值应该取较精确的值。你可以使用常量来表示π，比如PI=3.14159265358979323，也可以使用数学公式来求π，比如PI=atan(1.0)*4。</p>
<p>代码：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> r;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;r);</span><br><span class="line">	<span class="keyword">double</span> PI=<span class="number">3.14159265358979323</span>;</span><br><span class="line">	<span class="keyword">double</span> c = r * r * PI;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%.7lf\n"</span>,c);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h2 id="4、Fibonacci数列"><a href="#4、Fibonacci数列" class="headerlink" title="4、Fibonacci数列"></a>4、Fibonacci数列</h2><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。</p>
<p>当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。</p>
<h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含一个整数n。</p>
<h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行，包含一个整数，表示Fn除以10007的余数。</p>
<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p>在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。</p>
<h4 id="数据规模与约定-2"><a href="#数据规模与约定-2" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>1 &lt;= n &lt;= 1,000,000。</p>
<h3 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h3><p>直接通过Fn=Fn-1+Fn-2 累加 求第Fn个数，然后取余，n增大时，数会变得很大，超过了C语言规定的长度。<br>所以看提示:求取余的结果累加。</p>
<p>代码如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> a,b,n;</span><br><span class="line">	a = <span class="number">1</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">long</span> sum = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%ld"</span>,&amp;n); </span><br><span class="line">	<span class="keyword">long</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		sum = (a + b)%<span class="number">10007</span>;</span><br><span class="line">		a = b;</span><br><span class="line">		b = sum;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%ld "</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>蓝桥杯试题</tag>
      </tags>
  </entry>
  <entry>
    <title>漫谈数据结构(四)——字符串的模式匹配</title>
    <url>/2019/01/24/DataStructure/dataStructure7/</url>
    <content><![CDATA[<h2 id="1、字符串匹配的用处"><a href="#1、字符串匹配的用处" class="headerlink" title="1、字符串匹配的用处"></a>1、字符串匹配的用处</h2><p>&emsp;&emsp;在进行字符串操作，经常会出现定位操作，比如寻找字符串p是否在字符串s中，存在则返回p在s中第一个字符出现的下标。我们把串s称为主串，把串p称为模式串。一些语言中也内置了这个函数，比如C语言中头文件string.h中<code>strstr()</code>方法，Java中的<code>indexOf()</code>方法。本篇文章用3种方法来讲解这个算法的实现。<br><a id="more"></a></p>
<h2 id="2、匹配方法："><a href="#2、匹配方法：" class="headerlink" title="2、匹配方法："></a>2、匹配方法：</h2><h3 id="2-1-朴素的模式匹配："><a href="#2-1-朴素的模式匹配：" class="headerlink" title="2.1 朴素的模式匹配："></a>2.1 朴素的模式匹配：</h3><p>&emsp;&emsp;又称(Brute Force)，其实就是暴力破解的意思。具体思路是同时遍历主串和模式串，先比较<code>s</code>和<code>p</code>的第一个字符，如果相等继续比较第二个字符，如果不相等，<code>s</code>从第二个字符开始比较<code>p</code>的第一个字符。如果相等，继续往下比较，如果不相等，<code>s</code>从第三个字符开始比较<code>p</code>的第一个字符，以此类推，直到模式串第一次匹配完毕终止。</p>
<p>&emsp;&emsp;用<code>i</code>表示主串s下标，用<code>j</code>表示模式串p下标。字符相等时就<code>i++; j++;</code>,不相等是就 <code>i = i - j + 1; j=0;</code> 如图所示：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/24/1687e9340acdf4c0?w=425&amp;h=239&amp;f=png&amp;s=5997" data-fancybox="group" data-caption class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/24/1687e9340acdf4c0?w=425&amp;h=239&amp;f=png&amp;s=5997" alt title></a><br>&emsp;&emsp;当<code>s[3]!=p[2]</code>时，因为这次比较是从<code>i=1</code>开始比较的，所以<code>i</code>要回溯到<code>i=2 也就是 i = i - j + 1</code>, <code>j</code>要回溯到<code>j = 0</code>。<br>代码如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//暴力破解法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">char</span> *p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> lens = <span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="keyword">int</span> lenp = <span class="built_in">strlen</span>(p);</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(i&lt;lens &amp;&amp; j&lt;lenp)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(s[i]!=p[j])&#123;</span><br><span class="line">			i = i - j + <span class="number">1</span>;      <span class="comment">//主串从下一个位置开始 </span></span><br><span class="line">			j = <span class="number">0</span>;             <span class="comment">//模式串从0开始 </span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			i++;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(j==lenp)&#123;    <span class="comment">//匹配成功 </span></span><br><span class="line">		<span class="keyword">return</span> i-j; <span class="comment">//j代表p的长度减1 , i为s中搜索的字符个数减1 。i-j为p在s中匹配成功后第一个字符的开始下标</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123; 			<span class="comment">//没有匹配成功 </span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>时间复杂度：O(n*m)</p>
<h3 id="2-2-动态规划算法："><a href="#2-2-动态规划算法：" class="headerlink" title="2.2 动态规划算法："></a>2.2 动态规划算法：</h3><p>&emsp;&emsp;使用二维数组记录匹配的所有情况，如图所示：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/24/1687ea5f0ac550bd?w=366&amp;h=449&amp;f=png&amp;s=8725" data-fancybox="group" data-caption class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/24/1687ea5f0ac550bd?w=366&amp;h=449&amp;f=png&amp;s=8725" alt title></a><br>&emsp;&emsp;先匹配第一行，第一列。相等记为1，不等记为0。然后往里比较，如果相等，取主对角线的前一位加一,不等记为0。等数组中出现的数字也模式串p的长度相等时，匹配结束。代码如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态规划 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dynamicSearch</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">char</span> *p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> lens = <span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="keyword">int</span> lenp = <span class="built_in">strlen</span>(p);</span><br><span class="line">	<span class="keyword">int</span> temp[lens][lenp];</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;lens;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;lenp;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j==<span class="number">0</span>||i==<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(p[j] == s[i])&#123;</span><br><span class="line">					temp[i][j] = <span class="number">1</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					temp[i][j] = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(p[j] == s[i])&#123;</span><br><span class="line">					temp[i][j] = temp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					temp[i][j] = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(temp[i][j] == lenp)&#123;</span><br><span class="line">				<span class="keyword">return</span> i - lenp + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>算法复杂度：O(n*m)</p>
<h3 id="2-3-KMP算法："><a href="#2-3-KMP算法：" class="headerlink" title="2.3 KMP算法："></a>2.3 KMP算法：</h3><p>&emsp;&emsp;当模式串为<code>p = &quot;abcabd&quot;</code>，主串为<code>s = &quot;abcabgabey&quot;</code>时，如图所示：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/24/1687ed082d41b645?w=697&amp;h=241&amp;f=png&amp;s=8603" data-fancybox="group" data-caption class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/24/1687ed082d41b645?w=697&amp;h=241&amp;f=png&amp;s=8603" alt title></a><br>&emsp;&emsp;当<code>s[5]!=p[5]</code>,如果按照之前的方法，i要回溯到1，p要回溯到0，但是仔细想想，真的有这个必要吗？观察p串，有相同子符<code>ab</code>。推出：</p>
<p><script type="math/tex">p[0] = p[3] 且 p[1] = p[4]</script> <br></p>
<p><script type="math/tex">p[3] = s[3] 且 p[4] = s[4]</script> <br></p>
<p><script type="math/tex">=> p[0] = s[3] 且p[1] = s[4]</script> <br></p>
<p>&emsp;&emsp;所以，<code>i</code>不需要回溯，只需对比<code>p[2]</code> 是否等于 <code>s[5]</code>,这样i直接从0跳到了5，省略了许多不必要的重复步骤。那么问题的关键就是如何确定<code>p</code>匹配失败时<code>j</code>回到哪一个最恰当的位置。仔细观察一下，只有出现重复子串时，才会出现这种情况。如果没有重复子串,j只能取0。</p>
<p>&emsp;&emsp;它的效率提高的地方是无需回溯s的下标<code>i</code>，只需回溯<code>j</code>，匹配时，直接<code>i++</code>，<code>j</code>找到合适的位置，依次比对下去。</p>
<p>&emsp;&emsp;那如何找到j的恰当位置呢，这时要引入一个整形数组<code>next[]</code>，<code>next</code>下标与<code>p</code>的下标对应，存储是的是这个 <strong>字符之前(不包含自己)</strong> 的子串的前缀和后缀(包含最后一个字符的子串)相等时字符的个数。</p>
<blockquote>
<p>前缀(包含第一个字符的子串) <br><br>后缀(包含最后一个字符的子串)</p>
</blockquote>
<p>其中 <strong>规定next[0] = -1</strong>，所以 <code>p = &quot;abcabd&quot;</code> 对应的next数组为<code>next= [-1,0,0,0,1,2]</code>，这样其实就已经结束了，但是为了追求更少的对比次数。可以把next数组在优化一下。因为<code>p[3] = p[0] = &#39;a&#39;</code>,<code>p[3]</code>之前的字符不重复， 所以无需取<code>j</code>,直接让i继续走。所以`next= [-1,0,0,-1,0,2];</p>
<h4 id="2-3-1-求Next数组："><a href="#2-3-1-求Next数组：" class="headerlink" title="2.3.1 求Next数组："></a>2.3.1 求Next数组：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">char</span>* p, <span class="keyword">int</span> next[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pLen = <span class="built_in">strlen</span>(p);</span><br><span class="line">	next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (j &lt; pLen - <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="comment">//p[k]表示前缀，p[j]表示后缀  </span></span><br><span class="line">		<span class="keyword">if</span> (k == <span class="number">-1</span> || p[j] == p[k])&#123;</span><br><span class="line">			++j;</span><br><span class="line">			++k;</span><br><span class="line">			<span class="comment">//较之前next数组求法，改动在下面4行</span></span><br><span class="line">			<span class="keyword">if</span> (p[j] != p[k])</span><br><span class="line">				next[j] = k;   <span class="comment">//之前只有这一行</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="comment">//因为不能出现p[j] = p[ next[j ]]，所以当出现时需要继续递归，k = next[k] = next[next[k]]</span></span><br><span class="line">				next[j] = next[k];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			k = next[k];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-3-2-KMP算法代码："><a href="#2-3-2-KMP算法代码：" class="headerlink" title="2.3.2 KMP算法代码："></a>2.3.2 KMP算法代码：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmpSearch</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">char</span> *p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> lens = <span class="built_in">strlen</span>(s);</span><br><span class="line">	<span class="keyword">int</span> lenp = <span class="built_in">strlen</span>(p);</span><br><span class="line">	<span class="keyword">int</span> next[lenp];</span><br><span class="line">	getNext(p,next);</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;lens &amp;&amp; j&lt;lenp)&#123;</span><br><span class="line">		<span class="keyword">if</span>(j==<span class="number">-1</span>||s[i]==p[j])&#123;</span><br><span class="line">			i++;</span><br><span class="line">			j++;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			j = next[j];</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(j==lenp)&#123;    </span><br><span class="line">		<span class="keyword">return</span> i-j; </span><br><span class="line">	&#125;<span class="keyword">else</span>&#123; 	</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>算法复杂度 O(n+m)</p>
<h2 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *s = <span class="string">"abcabgabcabay"</span>;</span><br><span class="line">	<span class="keyword">char</span> *p = <span class="string">"abcaba"</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"s = \"abcabgabcabay\"  p = \"abcaba\"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"朴素的模式匹配：\n"</span>); </span><br><span class="line">	<span class="keyword">int</span> pos = search(s,p);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"pos = %d\n"</span>,pos);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"动态规划算法：\n"</span>);</span><br><span class="line">	pos = kmpSearch(s,p);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"pos = %d\n"</span>,pos);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"KMP算法：\n"</span>);</span><br><span class="line">	pos = dynamicSearch(s,p);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"pos = %d\n"</span>,pos);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/24/1687f17ce327bb42?w=462&amp;h=129&amp;f=png&amp;s=4904" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/24/1687f17ce327bb42?w=462&amp;h=129&amp;f=png&amp;s=4904" alt="输出结果" title="输出结果"></a></p>
<h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>&emsp;&emsp;综合来说这三种方法各有优劣，如果追求效率的话，KMP算法最好，算法复杂度最低，但是也难理解。如果您感觉KMP算法效率还是不符合您的要求，请<a href="https://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener">点击这里</a>，里面介绍了BM算法和Sunday算法，效率更好，算法复杂度减少到了O(n)。</p>
<hr>
<blockquote>
<p>作者个人博客   <a href="https://www.you3xuan.top/" target="_blank" rel="noopener">https://www.you3xuan.top/</a> 查看原文。<br><br> 源码地址: <a href="https://github.com/ThinkingXuan/DataStructure" target="_blank" rel="noopener">https://github.com/ThinkingXuan/DataStructure</a> <br><br>如果对您有帮助，随手一个Star吧。</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>漫谈数据结构(四)——串</title>
    <url>/2019/01/22/DataStructure/dataStructure6/</url>
    <content><![CDATA[<h2 id="1、什么是串"><a href="#1、什么是串" class="headerlink" title="1、什么是串"></a>1、什么是串</h2><p>&emsp;&emsp;串又称字符串，是比较常见的一个数据结构，它由0或多个字符构成，一般定义为<code>s=&quot;abcdegf&quot;</code>。字符的个数称为串的长度。长度为0的串为空串，记为<code>s=&quot;&quot;</code>，由空格组成的串为空格串，空格也是字符，记为<code>s=&quot;   &quot;</code>。<br><a id="more"></a><br>&emsp;&emsp;目前，随着科学技术的发展，非数值处理的情况越来越多，学好字符串的处理变得尤为重要，本文将介绍字符串处理的几个基本方法。</p>
<h2 id="2、串的顺序存储"><a href="#2、串的顺序存储" class="headerlink" title="2、串的顺序存储"></a>2、串的顺序存储</h2><p>&emsp;&emsp;在串的顺序存储结构中，用一组地址连续的空间，即数组来存储字符串中的字符，串中的每一个字符占据一个空间，如图所示：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/21/168707058eb1c18b?w=536&amp;h=169&amp;f=png&amp;s=3645" data-fancybox="group" data-caption="串的顺序存储" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/21/168707058eb1c18b?w=536&amp;h=169&amp;f=png&amp;s=3645" alt="串的顺序存储" title="串的顺序存储"></a></p>
<h3 id="2-1-创建和赋值"><a href="#2-1-创建和赋值" class="headerlink" title="2.1 创建和赋值"></a>2.1 创建和赋值</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建String类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">str</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> *str;      <span class="comment">//串指针 </span></span><br><span class="line">	<span class="keyword">int</span> length;	<span class="comment">//串的长度	</span></span><br><span class="line">&#125;String; </span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strAssign</span><span class="params">(String * s,<span class="keyword">char</span> *p)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取p的长度 </span></span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(p[i]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//给str分配内存，多分配一个空间存储'\0'</span></span><br><span class="line">	s-&gt;str = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (i+<span class="number">1</span>));</span><br><span class="line">	<span class="comment">//赋值</span></span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">		s-&gt;str[j] = p[j]; </span><br><span class="line">	&#125; </span><br><span class="line">	s-&gt;str[j] = <span class="string">'\0'</span>;</span><br><span class="line">	s-&gt;length = i;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-2-获取串的长度"><a href="#2-2-获取串的长度" class="headerlink" title="2.2 获取串的长度"></a>2.2 获取串的长度</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(String *s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> s-&gt;length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-3-复制串"><a href="#2-3-复制串" class="headerlink" title="2.3 复制串"></a>2.3 复制串</h3><p>&emsp;&emsp;先重新为str分配需要的内存，然后memset赋‘\0’。最后循环赋值。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//复制串,将t复制到s中 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">strCopy</span><span class="params">(String *s,String *t)</span></span>&#123;</span><br><span class="line">	s-&gt;str = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (t-&gt;length+<span class="number">1</span>));</span><br><span class="line">	<span class="built_in">memset</span>(s-&gt;str,<span class="string">'\0'</span>,t-&gt;length+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;t-&gt;length;i++)&#123;</span><br><span class="line">		s-&gt;str[i] = t-&gt;str[i];</span><br><span class="line">	&#125;</span><br><span class="line">	s-&gt;length = t-&gt;length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h3 id="2-4-判断两个串是否相等"><a href="#2-4-判断两个串是否相等" class="headerlink" title="2.4 判断两个串是否相等"></a>2.4 判断两个串是否相等</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断两个串是否相等</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strEqual</span><span class="params">(String *s1,String *s2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *ss1 = s1-&gt;str;</span><br><span class="line">	<span class="keyword">char</span> *ss2 = s2-&gt;str; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(s1-&gt;length != s2-&gt;length)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(*ss1++ != *ss2++)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-5-连接两个串"><a href="#2-5-连接两个串" class="headerlink" title="2.5 连接两个串"></a>2.5 连接两个串</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//连接两个串</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strConnect</span><span class="params">(String *s,String *p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = s-&gt;length + p-&gt;length;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//临时空间 </span></span><br><span class="line">	<span class="keyword">char</span> *temp = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (len+<span class="number">1</span>));</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//拷贝s </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;s-&gt;length;i++)&#123;</span><br><span class="line">		temp[i] = s-&gt;str[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝p </span></span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;p-&gt;length;j++)&#123;</span><br><span class="line">		temp[j+i] = p-&gt;str[j];</span><br><span class="line">	&#125;</span><br><span class="line">	temp[j+i] = <span class="string">'\0'</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//字符串指向temp </span></span><br><span class="line">	s-&gt;str = temp;</span><br><span class="line">	s-&gt;length = len;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-6-比较两个串的大小"><a href="#2-6-比较两个串的大小" class="headerlink" title="2.6 比较两个串的大小"></a>2.6 比较两个串的大小</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比较两个串的大小 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strCompete</span><span class="params">(String *s,String *p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> slen = s-&gt;length;</span><br><span class="line">	<span class="keyword">int</span> plen = p-&gt;length;</span><br><span class="line">	<span class="keyword">char</span> *s1 = s-&gt;str;</span><br><span class="line">	<span class="keyword">char</span> *p1 = p-&gt;str;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//同时遍历两个字符串，有一个为空时结束循环。 </span></span><br><span class="line">	<span class="keyword">while</span>(*s1!=<span class="string">'\0'</span> &amp;&amp; *p1!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">		<span class="comment">// s &gt; p </span></span><br><span class="line">		<span class="keyword">if</span>(*s1 &gt; *p1)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//s &lt; p </span></span><br><span class="line">		<span class="keyword">if</span>(*s1 &lt; *p1)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">		&#125;</span><br><span class="line">		s1++;</span><br><span class="line">		p1++;  </span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">//两个字符串前n个字符相等时，比较长度 </span></span><br><span class="line">	<span class="keyword">if</span>(slen == plen)&#123;  <span class="comment">//s=p </span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(slen&gt;plen)&#123;  <span class="comment">//s&gt;p</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(slen&lt;plen)&#123;  <span class="comment">//s&lt;p </span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-7-插入串"><a href="#2-7-插入串" class="headerlink" title="2.7 插入串"></a>2.7 插入串</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入串  将字符串p插入到s的指定位置上 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strInsert</span><span class="params">(String *s,String *p,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">	<span class="comment">//位置判断</span></span><br><span class="line">	<span class="keyword">if</span>(pos&lt;<span class="number">0</span>||pos&gt;s-&gt;length)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"insert position error!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> len = s-&gt;length + p-&gt;length;</span><br><span class="line">	<span class="keyword">char</span> * temp = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(len+<span class="number">1</span>));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//插入 s的左边部分 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;pos;i++)&#123;</span><br><span class="line">		temp[i] = s-&gt;str[i];</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="comment">//插入 p </span></span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;p-&gt;length;j++)&#123;</span><br><span class="line">		temp[j+pos] = p-&gt;str[j];</span><br><span class="line">	&#125;</span><br><span class="line"> 	<span class="comment">//插入 s的右边部分 </span></span><br><span class="line">	<span class="keyword">for</span>(;i&lt;s-&gt;length;i++)&#123;</span><br><span class="line">		temp[j+i] = s-&gt;str[i];</span><br><span class="line">	&#125; </span><br><span class="line">	temp[j+i] = <span class="string">'\0'</span>;</span><br><span class="line">	s-&gt;str = temp;</span><br><span class="line">	s-&gt;length = len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-8-删除指定串"><a href="#2-8-删除指定串" class="headerlink" title="2.8 删除指定串"></a>2.8 删除指定串</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strDelete</span><span class="params">(String *s, <span class="keyword">int</span> pos, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">	<span class="comment">//位置判断</span></span><br><span class="line">	<span class="keyword">if</span>(pos&lt;<span class="number">0</span>||pos&gt;s-&gt;length)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"delete position error!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> len = s-&gt;length - length;</span><br><span class="line">	<span class="keyword">char</span> * temp = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(len+<span class="number">1</span>));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;pos;i++)&#123;</span><br><span class="line">		temp[i] = s-&gt;str[i]; </span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	j = pos+length;</span><br><span class="line">	<span class="keyword">for</span>(;j&lt;s-&gt;length;j++)&#123;</span><br><span class="line">		temp[i] = s-&gt;str[j];</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	temp[i] = <span class="string">'\0'</span>;</span><br><span class="line">	s-&gt;str = temp;</span><br><span class="line">	s-&gt;length = len;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-9-测试"><a href="#2-9-测试" class="headerlink" title="2.9 测试"></a>2.9 测试</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//串的顺序存储</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Create String:\n"</span>);</span><br><span class="line">	String * s = (String *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(String));</span><br><span class="line">	<span class="keyword">char</span> *s1 = <span class="string">"abcdefg"</span>;</span><br><span class="line">	strAssign(s,s1); </span><br><span class="line">	<span class="built_in">puts</span>(s-&gt;str);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Length = %d\n"</span>,getLength(s));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">	String * p = (String *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(String));	</span><br><span class="line">	<span class="keyword">char</span> *p1 = <span class="string">"abc"</span>;</span><br><span class="line">	strAssign(p,p1); </span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Copy String %s to %s:\n"</span>,s-&gt;str,p-&gt;str);</span><br><span class="line">	strCopy(p,s);</span><br><span class="line">	<span class="built_in">puts</span>(s-&gt;str);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"是否相等：%d\n"</span>,strEqual(s,p));</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Insert String %s to %s:\n"</span>,p-&gt;str,s-&gt;str);</span><br><span class="line">	strInsert(s,p,<span class="number">2</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">puts</span>(s-&gt;str);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Delete String:\n"</span>);</span><br><span class="line">	strDelete(s,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">puts</span>(s-&gt;str);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：<br><a href="https://user-gold-cdn.xitu.io/2019/1/22/168741d21543e0b0?w=634&amp;h=225&amp;f=png&amp;s=8220" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/22/168741d21543e0b0?w=634&amp;h=225&amp;f=png&amp;s=8220" alt="输出结果" title="输出结果"></a></p>
<h2 id="3、串的链式存储"><a href="#3、串的链式存储" class="headerlink" title="3、串的链式存储"></a>3、串的链式存储</h2><p>&emsp;&emsp;串的链式存储可以使用单链表来存储字符，每一个结点存储1个字符(密度为1)，有利于串的插入或删除，但它的空间利用率太低。如果一个结点存储多个字符，对字符串的操作又会变得相当麻烦，得不偿失。串的链式存储的实用率很低，使用起来也不灵活，所以，一般都是使用串的顺序存储。</p>
<hr>
<blockquote>
<p>作者个人博客   <a href="https://www.you3xuan.top/" target="_blank" rel="noopener">https://www.you3xuan.top/</a> 查看原文。<br><br> 源码地址: <a href="https://github.com/ThinkingXuan/DataStructure" target="_blank" rel="noopener">https://github.com/ThinkingXuan/DataStructure</a> <br><br>如果对您有帮助，随手一个Star吧。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>漫谈数据结构(三)——队列</title>
    <url>/2019/01/20/DataStructure/dataStructure5/</url>
    <content><![CDATA[<p><a href="https://upload-images.jianshu.io/upload_images/2514354-291d7c1bbdc8c0ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="风景图" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-291d7c1bbdc8c0ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="风景图" title="风景图"></a></p>
<h2 id="1、什么是队列"><a href="#1、什么是队列" class="headerlink" title="1、什么是队列"></a>1、什么是队列</h2><p>&emsp;&emsp;队列是一个先进先出的线性表，它只允许在一端进行插入，在另一端进行删除操作。允许删除的称为队头，允许插入的称为队尾，分别由队头指针和队尾指针来维护队列。</p>
<p>&emsp;&emsp;队头指针指向第一个元素。当有元素出队（删除）时，队头指针向后移动一位，指向下一个元素。</p>
<p>&emsp;&emsp;队尾指针指向<strong>最后一个元素的之后的空指针</strong>，当有元素入队（插入）时，添加完元素后，队尾指针往后移动一位。<br><a id="more"></a><br>&emsp;&emsp;如图所示：<br><a href="https://user-gold-cdn.xitu.io/2019/1/20/1686b198bb235fe4?w=736&amp;h=284&amp;f=png&amp;s=7803" data-fancybox="group" data-caption="队列" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686b198bb235fe4?w=736&amp;h=284&amp;f=png&amp;s=7803" alt="队列" title="队列"></a></p>
<h2 id="2、顺序队列的实现"><a href="#2、顺序队列的实现" class="headerlink" title="2、顺序队列的实现"></a>2、顺序队列的实现</h2><p>&emsp;&emsp;使用顺序表实现的队列被称为顺序队列。它的实现和顺序表的实现比较相似，只是只能一端删除，一端插入。如图所示，是一个顺序队列图。</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/20/1686b24214b6d9ae?w=990&amp;h=399&amp;f=png&amp;s=12462" data-fancybox="group" data-caption="顺序队列" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686b24214b6d9ae?w=990&amp;h=399&amp;f=png&amp;s=12462" alt="顺序队列" title="顺序队列"></a></p>
<p>顺序队列的溢出：</p>
<p>真溢出：顺序表分配的空间已满，无法再入队。</p>
<p>假溢出：顺序表分配的空间未满，有出队元素，指针rear已经到达内存的最后一个空间(已经达到了最大下标)，无法再入队。</p>
<p>顺序队列的溢出可以用循环队列来解决，下面会讲到。</p>
<h3 id="2-1-创建"><a href="#2-1-创建" class="headerlink" title="2.1 创建"></a>2.1 创建</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> front;      <span class="comment">//队头指针 </span></span><br><span class="line">	<span class="keyword">int</span> rear;		<span class="comment">//队尾指针 </span></span><br><span class="line">	<span class="keyword">int</span> data[MAXSIZE]; </span><br><span class="line">&#125;SeqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建队列 </span></span><br><span class="line"><span class="function">SeqQueue* <span class="title">createSeqQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">	SeqQueue * <span class="built_in">queue</span> = (SeqQueue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqQueue));</span><br><span class="line">	<span class="built_in">queue</span>-&gt;front = <span class="built_in">queue</span>-&gt;rear = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">memset</span>(<span class="built_in">queue</span>-&gt;data,<span class="number">0</span>,MAXSIZE*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">queue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-2-判断是否为空"><a href="#2-2-判断是否为空" class="headerlink" title="2.2 判断是否为空"></a>2.2 判断是否为空</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否为空 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">(SeqQueue *<span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>-&gt;front == <span class="built_in">queue</span>-&gt;rear)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-3-获取长度"><a href="#2-3-获取长度" class="headerlink" title="2.3 获取长度"></a>2.3 获取长度</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取长度 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(SeqQueue * <span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">queue</span>))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">queue</span>-&gt;rear - <span class="built_in">queue</span>-&gt;front; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-4-入队"><a href="#2-4-入队" class="headerlink" title="2.4 入队"></a>2.4 入队</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pushQueue</span><span class="params">(SeqQueue *<span class="built_in">queue</span>,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//已满 </span></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>-&gt;rear == MAXSIZE <span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"the queue already full ,not push!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">queue</span>))&#123;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;rear] = data;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;rear++;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;front = <span class="built_in">queue</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;rear] = data;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;rear++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-5-出队"><a href="#2-5-出队" class="headerlink" title="2.5 出队"></a>2.5 出队</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">outQueue</span><span class="params">(SeqQueue *<span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">queue</span>))&#123;</span><br><span class="line">		<span class="keyword">int</span> temp = <span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;front];</span><br><span class="line">		<span class="built_in">queue</span>-&gt;front++;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"queue is null!"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-6-获取队头"><a href="#2-6-获取队头" class="headerlink" title="2.6 获取队头"></a>2.6 获取队头</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取队头 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHead</span><span class="params">(SeqQueue *<span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">queue</span>))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;front];</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"queue is null!"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-7-其他"><a href="#2-7-其他" class="headerlink" title="2.7 其他"></a>2.7 其他</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clearQueue</span><span class="params">(SeqQueue *<span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">queue</span>))&#123;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;front = <span class="built_in">queue</span>-&gt;rear = <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁队列 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">destoryQueue</span><span class="params">(SeqQueue *<span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(<span class="built_in">queue</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(SeqQueue *<span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"队头-----------队尾\n"</span>); </span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="built_in">queue</span>-&gt;front;i&lt;<span class="built_in">queue</span>-&gt;rear;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,<span class="built_in">queue</span>-&gt;data[i]); </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"     length = %d"</span>,getLength(<span class="built_in">queue</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-8-测试"><a href="#2-8-测试" class="headerlink" title="2.8 测试"></a>2.8 测试</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序表实现队列</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1024 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Create Seq Queue：\n"</span>); </span><br><span class="line">	SeqQueue * <span class="built_in">queue</span> = createSeqQueue();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n\n"</span>,<span class="built_in">queue</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Push Seq Queue：\n"</span>); </span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">		pushQueue(<span class="built_in">queue</span>,i);</span><br><span class="line">	&#125;</span><br><span class="line">	print(<span class="built_in">queue</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Out Seq Queue：\n"</span>); </span><br><span class="line">	outQueue(<span class="built_in">queue</span>);</span><br><span class="line">	print(<span class="built_in">queue</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Get Head from Queue：\n"</span>); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,getHead(<span class="built_in">queue</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"clear Queue：\n"</span>); </span><br><span class="line">	clearQueue(<span class="built_in">queue</span>);</span><br><span class="line">	print(<span class="built_in">queue</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Destory Queue：\n"</span>); </span><br><span class="line">	<span class="keyword">int</span> flag = destoryQueue(<span class="built_in">queue</span>);</span><br><span class="line">	<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Destory Success!\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：<br><a href="https://user-gold-cdn.xitu.io/2019/1/20/1686b3090adca5c7?w=605&amp;h=332&amp;f=png&amp;s=11007" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686b3090adca5c7?w=605&amp;h=332&amp;f=png&amp;s=11007" alt="输出结果" title="输出结果"></a></p>
<h2 id="3、链式队列的实现"><a href="#3、链式队列的实现" class="headerlink" title="3、链式队列的实现"></a>3、链式队列的实现</h2><p>&emsp;&emsp;用链表来实现的队列称为链式队列，它也是通过队头指针和队尾指针来操作结点。不用出现溢出问题。如图所示：<br><a href="https://user-gold-cdn.xitu.io/2019/1/20/1686b7bc4db66588?w=983&amp;h=356&amp;f=png&amp;s=19041" data-fancybox="group" data-caption="链式队列" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686b7bc4db66588?w=983&amp;h=356&amp;f=png&amp;s=19041" alt="链式队列" title="链式队列"></a></p>
<h3 id="3-1-实现"><a href="#3-1-实现" class="headerlink" title="3.1 实现"></a>3.1 实现</h3><p>实现步骤同顺序队列，这里只给出实现代码和测试代码。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链式队列 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">queue</span>&#123;</span></span><br><span class="line">	Node * front;</span><br><span class="line">	Node * rear;</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建队列 </span></span><br><span class="line"><span class="function">LinkQueue* <span class="title">createLinkQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">	LinkQueue * <span class="built_in">queue</span> = (LinkQueue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkQueue));</span><br><span class="line">	<span class="built_in">queue</span>-&gt;front = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">queue</span>-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">queue</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">queue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为空 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">(LinkQueue *<span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>-&gt;length==<span class="number">0</span> )&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取长度 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(LinkQueue * <span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">queue</span>))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">queue</span>-&gt;length; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//入队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pushQueue</span><span class="params">(LinkQueue *<span class="built_in">queue</span>,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Node * newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	newNode-&gt;data = data;</span><br><span class="line">	 </span><br><span class="line">	 </span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">queue</span>))&#123;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;rear-&gt;next = newNode;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;rear = newNode;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;length++;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;front = newNode;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;rear = newNode;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;length++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//出队列</span></span><br><span class="line"><span class="function">Node * <span class="title">outQueue</span><span class="params">(LinkQueue *<span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">queue</span>))&#123;</span><br><span class="line">		Node * node = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;front = <span class="built_in">queue</span>-&gt;front-&gt;next;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;length--;</span><br><span class="line">		<span class="keyword">return</span> node;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"queue is null!"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//获取队头 </span></span><br><span class="line"><span class="function">Node *  <span class="title">getHead</span><span class="params">(LinkQueue *<span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">queue</span>))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"queue is null!"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clearQueue</span><span class="params">(LinkQueue *<span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">queue</span>))&#123;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;front = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁队列 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">destoryQueue</span><span class="params">(LinkQueue *<span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(<span class="built_in">queue</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkQueue *<span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"队头-----------队尾\n"</span>); </span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">queue</span>))&#123;</span><br><span class="line">		Node *curNode = <span class="built_in">queue</span>-&gt;front; </span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">queue</span>-&gt;length;i++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>,curNode-&gt;data); </span><br><span class="line">			curNode = curNode-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"     length = %d"</span>,getLength(<span class="built_in">queue</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h3 id="3-2-测试"><a href="#3-2-测试" class="headerlink" title="3.2 测试"></a>3.2 测试</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Create Link Queue：\n"</span>); </span><br><span class="line">	LinkQueue * <span class="built_in">queue</span> = createLinkQueue();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n\n"</span>,<span class="built_in">queue</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Push Link Queue：\n"</span>); </span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">		pushQueue(<span class="built_in">queue</span>,i);</span><br><span class="line">	&#125;</span><br><span class="line">	print(<span class="built_in">queue</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Out Link Queue：\n"</span>); </span><br><span class="line">	outQueue(<span class="built_in">queue</span>);</span><br><span class="line">	print(<span class="built_in">queue</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Get Head from Link Queue：\n"</span>); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,getHead(<span class="built_in">queue</span>)-&gt;data);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"clear Queue：\n"</span>); </span><br><span class="line">	clearQueue(<span class="built_in">queue</span>);</span><br><span class="line">	print(<span class="built_in">queue</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Destory Queue：\n"</span>); </span><br><span class="line">	<span class="keyword">int</span> flag = destoryQueue(<span class="built_in">queue</span>);</span><br><span class="line">	<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Destory Success!\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：<br><a href="https://user-gold-cdn.xitu.io/2019/1/20/1686b83c64f8d9d3?w=634&amp;h=320&amp;f=png&amp;s=10910" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686b83c64f8d9d3?w=634&amp;h=320&amp;f=png&amp;s=10910" alt="输出结果" title="输出结果"></a></p>
<h2 id="4、循环队列的实现"><a href="#4、循环队列的实现" class="headerlink" title="4、循环队列的实现"></a>4、循环队列的实现</h2><p>&emsp;&emsp;为了解决顺序队列的假溢出问题，充分利用数组的空间，可以将队列首尾相连，构成一个循环队列。如图所示：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/20/1686ba65bdcf1720?w=706&amp;h=495&amp;f=png&amp;s=29227" data-fancybox="group" data-caption="循环队列" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/20/1686ba65bdcf1720?w=706&amp;h=495&amp;f=png&amp;s=29227" alt="循环队列" title="循环队列"></a><br><strong>注意点:</strong></p>
<ol>
<li><code>front==rear</code>时会出现两种情况，队列空和队列满，所以规定最后一个位置不存储数据，当rear在front前一个位置，判断队列已满。</li>
<li>判断空： <code>front==rear</code></li>
<li>判断已满：  <code>(rear+1) % MAXSIZE == front</code></li>
<li>求队列长度：<code>(rear + MAXSIZE - front) % MAXSIZE</code> 因为rear可能会出现在front前面，导致它们相减可能为负。</li>
</ol>
<p><strong>由于循环队列其他操作与顺序队列基本一致，故不再贴出相同的代码，如需要完整代码，<a href="https://github.com/ThinkingXuan/DataStructure" target="_blank" rel="noopener">点击这里</a></strong>。</p>
<h3 id="4-1-部分代码"><a href="#4-1-部分代码" class="headerlink" title="4.1 部分代码:"></a>4.1 部分代码:</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pushQueue</span><span class="params">(CircleQueue *<span class="built_in">queue</span>,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//已满 </span></span><br><span class="line">	<span class="keyword">int</span> rear = <span class="built_in">queue</span>-&gt;rear;</span><br><span class="line">	<span class="keyword">int</span> front  = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">	<span class="keyword">if</span>((rear+<span class="number">1</span>) % MAXSIZE == front)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"the queue already full ,not push!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">queue</span>))&#123;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;rear] = data;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;rear = (<span class="built_in">queue</span>-&gt;rear+<span class="number">1</span>) % MAXSIZE;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;front = <span class="built_in">queue</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;rear] = data;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;rear++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//出队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">outQueue</span><span class="params">(CircleQueue *<span class="built_in">queue</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init queue!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">queue</span>))&#123;</span><br><span class="line">		<span class="keyword">int</span> temp = <span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;front];</span><br><span class="line">		<span class="built_in">queue</span>-&gt;front = (<span class="built_in">queue</span>-&gt;front+<span class="number">1</span>) % MAXSIZE;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"queue is null!"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="4-2-测试"><a href="#4-2-测试" class="headerlink" title="4.2 测试:"></a>4.2 测试:</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Create Circle Queue：\n"</span>); </span><br><span class="line">	CircleQueue * <span class="built_in">queue</span> = createCircleQueue();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n\n"</span>,<span class="built_in">queue</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Push Circle Queue：\n"</span>); </span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">		pushQueue(<span class="built_in">queue</span>,i);</span><br><span class="line">	&#125;</span><br><span class="line">	print(<span class="built_in">queue</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Out Circle Queue：\n"</span>); </span><br><span class="line">	outQueue(<span class="built_in">queue</span>);</span><br><span class="line">	print(<span class="built_in">queue</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Get Head from Queue：\n"</span>); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,getHead(<span class="built_in">queue</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"clear Queue：\n"</span>); </span><br><span class="line">	clearQueue(<span class="built_in">queue</span>);</span><br><span class="line">	print(<span class="built_in">queue</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Destory Queue：\n"</span>); </span><br><span class="line">	<span class="keyword">int</span> flag = destoryQueue(<span class="built_in">queue</span>);</span><br><span class="line">	<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Destory Success!\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：<br><a href="https://upload-images.jianshu.io/upload_images/2514354-cf7fff80ccb52a58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-cf7fff80ccb52a58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出结果" title="输出结果"></a></p>
<blockquote>
<p>作者个人博客   <a href="https://www.you3xuan.top/" target="_blank" rel="noopener">https://www.you3xuan.top/</a> 查看原文。<br><br> 源码地址: <a href="https://github.com/ThinkingXuan/DataStructure" target="_blank" rel="noopener">https://github.com/ThinkingXuan/DataStructure</a> <br><br>如果对您有帮助，随手一个Star吧。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>漫谈数据结构(三)——栈</title>
    <url>/2019/01/19/DataStructure/dataStructure4/</url>
    <content><![CDATA[<p><a href="https://user-gold-cdn.xitu.io/2019/1/19/16866662a51c78aa?w=635&amp;h=310&amp;f=png&amp;s=230107" data-fancybox="group" data-caption="图片" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/19/16866662a51c78aa?w=635&amp;h=310&amp;f=png&amp;s=230107" alt="图片" title="图片"></a></p>
<h2 id="1、什么是栈"><a href="#1、什么是栈" class="headerlink" title="1、什么是栈"></a>1、什么是栈</h2><p>&emsp;&emsp;栈是一个先进后出的线性表，仅允许在栈的一端进行插入和删除操作。栈中允许插入删除的一端叫做栈顶，另一端叫做栈底。元素的删除叫做出栈，元素的插入叫做入栈。栈满时不能入栈，栈空时不能出栈。</p>
<p>&emsp;&emsp;栈通过一个栈顶指针来执行各种操作，入栈时栈顶指针上移，出栈时栈顶指针下移。如图所示：<br><a id="more"></a><br><a href="https://user-gold-cdn.xitu.io/2019/1/19/16864931d1ae802f?w=453&amp;h=462&amp;f=png&amp;s=13490" data-fancybox="group" data-caption="栈" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/19/16864931d1ae802f?w=453&amp;h=462&amp;f=png&amp;s=13490" alt="栈" title="栈"></a><br>&emsp;&emsp;栈的常见操作：</p>
<ol>
<li>创建栈</li>
<li>判断是否是空</li>
<li>出栈</li>
<li>入栈</li>
<li>获取栈顶元素</li>
<li>销毁栈</li>
</ol>
<h2 id="2、栈的实现"><a href="#2、栈的实现" class="headerlink" title="2、栈的实现"></a>2、栈的实现</h2><h3 id="2-1-顺序表实现"><a href="#2-1-顺序表实现" class="headerlink" title="2.1 顺序表实现"></a>2.1 顺序表实现</h3><h4 id="2-1-1-创建栈"><a href="#2-1-1-创建栈" class="headerlink" title="2.1.1 创建栈"></a>2.1.1 创建栈</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[MAXSIZE];   </span><br><span class="line">	<span class="keyword">int</span> top; 		<span class="comment">//栈顶指针 </span></span><br><span class="line">&#125;SeqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建栈 </span></span><br><span class="line"><span class="function">SeqStack * <span class="title">createSeqStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">	SeqStack *<span class="built_in">stack</span> = (SeqStack *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqStack));</span><br><span class="line">	<span class="built_in">stack</span>-&gt;top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-2-判断是否是空"><a href="#2-1-2-判断是否是空" class="headerlink" title="2.1.2 判断是否是空"></a>2.1.2 判断是否是空</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">(SeqStack *<span class="built_in">stack</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init stack!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span>-&gt;top == <span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-3-入栈"><a href="#2-1-3-入栈" class="headerlink" title="2.1.3 入栈"></a>2.1.3 入栈</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入栈 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pushStack</span><span class="params">(SeqStack *<span class="built_in">stack</span>,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init stack!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//判断是否栈满</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span>-&gt;top == MAXSIZE<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"stacl already full!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">stack</span>-&gt;top++;</span><br><span class="line">	<span class="built_in">stack</span>-&gt;data[<span class="built_in">stack</span>-&gt;top] = data;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-4-出栈"><a href="#2-1-4-出栈" class="headerlink" title="2.1.4 出栈"></a>2.1.4 出栈</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出栈 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">popStack</span><span class="params">(SeqStack *<span class="built_in">stack</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init stack!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">stack</span>))&#123;</span><br><span class="line">		 <span class="keyword">return</span> <span class="built_in">stack</span>-&gt;data[<span class="built_in">stack</span>-&gt;top--];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-5-获取栈顶元素"><a href="#2-1-5-获取栈顶元素" class="headerlink" title="2.1.5 获取栈顶元素"></a>2.1.5 获取栈顶元素</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTopStack</span><span class="params">(SeqStack *<span class="built_in">stack</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init stack!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">stack</span>))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">stack</span>-&gt;data[<span class="built_in">stack</span>-&gt;top];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-6-销毁栈"><a href="#2-1-6-销毁栈" class="headerlink" title="2.1.6 销毁栈"></a>2.1.6 销毁栈</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//销毁栈</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">destoryStack</span><span class="params">(SeqStack *<span class="built_in">stack</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init stack!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">stack</span>))&#123;</span><br><span class="line">		 <span class="built_in">free</span>(<span class="built_in">stack</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-7-打印"><a href="#2-1-7-打印" class="headerlink" title="2.1.7 打印"></a>2.1.7 打印</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(SeqStack *<span class="built_in">stack</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init stack!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="built_in">stack</span>-&gt;top;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,<span class="built_in">stack</span>-&gt;data[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-8-测试"><a href="#2-1-8-测试" class="headerlink" title="2.1.8 测试"></a>2.1.8 测试</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序表实现栈 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1024</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Create Stack：\n"</span>); </span><br><span class="line">	SeqStack * <span class="built_in">stack</span> = createSeqStack();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n\n"</span>,<span class="built_in">stack</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Push Stack：\n"</span>); </span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">		pushStack(<span class="built_in">stack</span>,i);</span><br><span class="line">	&#125;</span><br><span class="line">	print(<span class="built_in">stack</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Pop Stack：\n"</span>); </span><br><span class="line">	popStack(<span class="built_in">stack</span>);</span><br><span class="line">	print(<span class="built_in">stack</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Get top from stack：\n"</span>); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,getTopStack(<span class="built_in">stack</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Destory stack：\n"</span>); </span><br><span class="line">	<span class="keyword">int</span> flag = destoryStack(<span class="built_in">stack</span>);</span><br><span class="line">	<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Destory Success!\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果:<br><a href="https://user-gold-cdn.xitu.io/2019/1/19/16864af350f1d0fb?w=462&amp;h=242&amp;f=png&amp;s=1652" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/19/16864af350f1d0fb?w=462&amp;h=242&amp;f=png&amp;s=1652" alt="输出结果" title="输出结果"></a></p>
<h3 id="2-2-单链表实现"><a href="#2-2-单链表实现" class="headerlink" title="2.2 单链表实现"></a>2.2 单链表实现</h3><p>&emsp;&emsp;栈的链式存储称为链栈，它和链表的存储方式一样，都可以使用内存中的闲余空间，它用指针来构建结点之间的关系。链栈需要设置一个栈顶指针<code>Top</code>，指向栈顶。链栈是一个单向操作的链表，只能从一端进行操作。</p>
<p>&emsp;&emsp;如图所示：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/19/16865cff2e656431?w=444&amp;h=499&amp;f=png&amp;s=19931" data-fancybox="group" data-caption="链栈" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/19/16865cff2e656431?w=444&amp;h=499&amp;f=png&amp;s=19931" alt="链栈" title="链栈"></a></p>
<h4 id="2-1-1-创建栈-1"><a href="#2-1-1-创建栈-1" class="headerlink" title="2.1.1 创建栈"></a>2.1.1 创建栈</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> size;                <span class="comment">//栈大小 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">top</span>;</span>		<span class="comment">//栈顶指针 </span></span><br><span class="line">&#125;LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkStack * <span class="title">createLinkStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">	LinkStack *<span class="built_in">stack</span> = (LinkStack *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkStack));</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span>!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">stack</span>-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">stack</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">stack</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-2-判断是否是空-1"><a href="#2-1-2-判断是否是空-1" class="headerlink" title="2.1.2 判断是否是空"></a>2.1.2 判断是否是空</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init stack!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span>-&gt;top == <span class="literal">NULL</span> || <span class="built_in">stack</span>-&gt;size &lt;=<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-3-入栈-1"><a href="#2-1-3-入栈-1" class="headerlink" title="2.1.3 入栈"></a>2.1.3 入栈</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入栈 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pushStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init stack!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Node * node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	node-&gt;data = data;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">stack</span>))&#123; <span class="comment">//不是空 </span></span><br><span class="line">		node-&gt;next = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">		<span class="built_in">stack</span>-&gt;top = node;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123; 				<span class="comment">//是空 </span></span><br><span class="line">		<span class="built_in">stack</span>-&gt;top =  node;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">stack</span>-&gt;size++;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-4-出栈-1"><a href="#2-1-4-出栈-1" class="headerlink" title="2.1.4 出栈"></a>2.1.4 出栈</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出栈 </span></span><br><span class="line"><span class="function">Node * <span class="title">popStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init stack!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">stack</span>))&#123;</span><br><span class="line">		Node * topNode = <span class="built_in">stack</span>-&gt;top; </span><br><span class="line">		<span class="built_in">stack</span>-&gt;top = <span class="built_in">stack</span>-&gt;top-&gt;next;</span><br><span class="line">		<span class="built_in">stack</span>-&gt;size--;</span><br><span class="line">		<span class="keyword">return</span> topNode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-5-获取栈顶元素-1"><a href="#2-1-5-获取栈顶元素-1" class="headerlink" title="2.1.5 获取栈顶元素"></a>2.1.5 获取栈顶元素</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取栈顶元素</span></span><br><span class="line"><span class="function">Node* <span class="title">getTopStack</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init stack!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(!isEmpty(<span class="built_in">stack</span>))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-6-打印"><a href="#2-1-6-打印" class="headerlink" title="2.1.6 打印"></a>2.1.6 打印</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkStack *<span class="built_in">stack</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">stack</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init stack!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	Node * curNode = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//curNode指向栈底 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"栈顶&lt;----------栈底\n"</span>); </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">stack</span>-&gt;size;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,curNode-&gt;data); </span><br><span class="line">		curNode = curNode-&gt;next; </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-7-测试"><a href="#2-1-7-测试" class="headerlink" title="2.1.7 测试"></a>2.1.7 测试</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单链表实现栈 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Create Link Stack：\n"</span>); </span><br><span class="line">	LinkStack * <span class="built_in">stack</span> = createLinkStack();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n\n"</span>,<span class="built_in">stack</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Push Link Stack：\n"</span>); </span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">		pushStack(<span class="built_in">stack</span>,i);</span><br><span class="line">	&#125;</span><br><span class="line">	print(<span class="built_in">stack</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Pop Stack：\n"</span>); </span><br><span class="line">	popStack(<span class="built_in">stack</span>);</span><br><span class="line">	print(<span class="built_in">stack</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Get top from stack：\n"</span>); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,getTopStack(<span class="built_in">stack</span>)-&gt;data);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Destory stack：\n"</span>); </span><br><span class="line">	<span class="keyword">int</span> flag = destoryStack(<span class="built_in">stack</span>);</span><br><span class="line">	print(<span class="built_in">stack</span>);</span><br><span class="line">	<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Destory Success!\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/19/16865dfaa06797f9?w=716&amp;h=329&amp;f=png&amp;s=13507" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/19/16865dfaa06797f9?w=716&amp;h=329&amp;f=png&amp;s=13507" alt="输出结果" title="输出结果"></a></p>
<h2 id="3、栈的应用"><a href="#3、栈的应用" class="headerlink" title="3、栈的应用"></a>3、栈的应用</h2><h3 id="3-1-用栈实现四则运算"><a href="#3-1-用栈实现四则运算" class="headerlink" title="3.1 用栈实现四则运算"></a>3.1 用栈实现四则运算</h3><h3 id="3-2-栈的递归调用"><a href="#3-2-栈的递归调用" class="headerlink" title="3.2 栈的递归调用"></a>3.2 栈的递归调用</h3><blockquote>
<p>作者个人博客   <a href="https://www.you3xuan.top/" target="_blank" rel="noopener">https://www.you3xuan.top/</a> 查看原文。<br><br> 源码地址: <a href="https://github.com/ThinkingXuan/DataStructure" target="_blank" rel="noopener">https://github.com/ThinkingXuan/DataStructure</a> <br><br>如果对您有帮助，随手一个Star吧。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>漫谈数据结构(二)——线性表2</title>
    <url>/2019/01/18/DataStructure/dataStructure3/</url>
    <content><![CDATA[<p><a href="https://user-gold-cdn.xitu.io/2019/1/17/1685abcec4e28f67?w=652&amp;h=349&amp;f=png&amp;s=376020" data-fancybox="group" data-caption="风景图" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685abcec4e28f67?w=652&amp;h=349&amp;f=png&amp;s=376020" alt="风景图" title="风景图"></a></p>
<blockquote>
<p>作者个人博客   <a href="https://www.you3xuan.top/" target="_blank" rel="noopener">https://www.you3xuan.top/</a> 查看原文。</p>
</blockquote>
<h2 id="1、线性表的链式存储"><a href="#1、线性表的链式存储" class="headerlink" title="1、线性表的链式存储"></a>1、线性表的链式存储</h2><p>&emsp;&emsp;在链式存储中，结点之间的内存单元地址是不连续的。它的每一个结点包括数据域和下一个结点的地址。头结点的数据域只存放结点的长度，并指向第一个元素。尾结点指向NULL。如图所示：<br><a id="more"></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/18/1685ebd34fb061ef?w=868&amp;h=250&amp;f=png&amp;s=12953" data-fancybox="group" data-caption="链表" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/18/1685ebd34fb061ef?w=868&amp;h=250&amp;f=png&amp;s=12953" alt="链表" title="链表"></a><br>&emsp;&emsp;因为内存单元不连续，所以哪里空闲的内存，都可以分配一个结点，提高了内存的利用率。又因为结点之间只通过地址连接，所以删除和插入结点效率高。又因为没有索引与结点对应，查找一个结点的时候，必须找到上一个结点，所以查询效率不高。</p>
<h2 id="2、链式存储的实现"><a href="#2、链式存储的实现" class="headerlink" title="2、链式存储的实现"></a>2、链式存储的实现</h2><h3 id="2-1-创建单链表"><a href="#2-1-创建单链表" class="headerlink" title="2.1 创建单链表"></a>2.1 创建单链表</h3><p>&emsp;&emsp;分为三部分，创建头结点，创建普通结点，创建单链表。</p>
<ol>
<li><p>创建头结点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建头结点，length存储链表的长度 next指向下一个结点 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Header</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Header</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;Head;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建普通结点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个结点，data存放数据，next指向下一个结点 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span> </span><br><span class="line">&#125;ListNode;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>创建链表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个链表，返回头结点 </span></span><br><span class="line"><span class="function">Head * <span class="title">createList</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Head *phead = (Head*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Head));</span><br><span class="line">	phead-&gt;length = <span class="number">0</span>;</span><br><span class="line">	phead-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> phead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h3 id="2-2-获取链表长度"><a href="#2-2-获取链表长度" class="headerlink" title="2.2 获取链表长度"></a>2.2 获取链表长度</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 获取链表长度</span><br><span class="line">int getLength(Head * phead)&#123;</span><br><span class="line">	if(phead==NULL)&#123;</span><br><span class="line">		printf(&quot;not init headnode!\n&quot;);</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;</span><br><span class="line">	return phead-&gt;length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-3-添加结点"><a href="#2-3-添加结点" class="headerlink" title="2.3 添加结点"></a>2.3 添加结点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加数据，,默认添加在末尾 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addData</span><span class="params">(Head * phead, <span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(phead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init head node!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建当前结点，并指向链表最后一个结点</span></span><br><span class="line">	ListNode * curNode = phead;</span><br><span class="line">	<span class="keyword">while</span>(curNode-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		curNode = curNode-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建新结点 </span></span><br><span class="line">	ListNode * newNode = (ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">	newNode-&gt;data = data;</span><br><span class="line">	newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//连接结点</span></span><br><span class="line">	curNode-&gt;next = newNode;</span><br><span class="line">	phead-&gt;length++;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;如图所示，添加结点需要两个结点，一个当前结点，指向尾结点，另一个是要添加的新结点，指向<code>NULL</code>,使用当前结点的<code>next</code>指向新结点，就完成了添加结点的操作。因为当前结点是指向尾结点的，当前结点的<code>next</code>就相当于尾结点的<code>next</code>，所有就相当于尾结点的next指向了新结点。最后别忘把头结点的<code>length</code>加1。</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/18/1685ed7e130e23f3?w=879&amp;h=291&amp;f=png&amp;s=19706" data-fancybox="group" data-caption="结点" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/18/1685ed7e130e23f3?w=879&amp;h=291&amp;f=png&amp;s=19706" alt="结点" title="结点"></a></p>
<h3 id="2-4-插入结点"><a href="#2-4-插入结点" class="headerlink" title="2.4 插入结点"></a>2.4 插入结点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入数据 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertData</span><span class="params">(Head * pHead, <span class="keyword">int</span> data, <span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pHead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init head node!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pos &lt; <span class="number">0</span>||pos &gt; pHead-&gt;length)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"insert postion error!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建新结点 </span></span><br><span class="line">	ListNode * newNode = (ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">	newNode-&gt;data = data;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建当前结点</span></span><br><span class="line">	ListNode * curNode = pHead;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;pos;i++)&#123;</span><br><span class="line">		curNode = curNode-&gt;next;	</span><br><span class="line">	&#125;</span><br><span class="line">	newNode-&gt;next = curNode-&gt;next;</span><br><span class="line">	curNode-&gt;next = newNode;	</span><br><span class="line">	</span><br><span class="line">	pHead-&gt;length++;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/18/1685eee50f6acd8c?w=874&amp;h=337&amp;f=png&amp;s=23743" data-fancybox="group" data-caption="插入" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/18/1685eee50f6acd8c?w=874&amp;h=337&amp;f=png&amp;s=23743" alt="插入" title="插入"></a></p>
<p>&emsp;&emsp;同样，插入也需要两个结点，一个结点指向要插入的位置的前一个结点，起名为当前结点。另一个为新结点。主要就是两行代码：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">newNode-&gt;next = curNode-&gt;next;</span><br><span class="line">curNode-&gt;next = newNode;</span><br></pre></td></tr></table></figure></div></p>
<p>&emsp;&emsp;当前结点指向待插入位置的前一个结点，起名为前结点(lastNode)。以上代码相当于：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">newNode-&gt;next = lastNode-&gt;next;</span><br><span class="line">lastNode-&gt;next = newNode;</span><br></pre></td></tr></table></figure></div></p>
<p>&emsp;&emsp;因为<code>lastNode-&gt;next</code>指向下一个结点。现在使用<code>newNode-&gt;next</code>指向下一个结点。然后使用<code>lastNode-&gt;next</code>指向<code>newNode</code>。就完成了插入操作。<br>&emsp;&emsp;两行代码不可颠倒位置，因为先执行第二行代码的话，会导致后面结点全部丢失。</p>
<h3 id="2-5-删除结点"><a href="#2-5-删除结点" class="headerlink" title="2.5 删除结点"></a>2.5 删除结点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除数据 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteData</span><span class="params">(Head * pHead,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pHead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init head node!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pos &lt; <span class="number">0</span>||pos &gt;= pHead-&gt;length)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"delete postion error!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建当前结点</span></span><br><span class="line">	ListNode * curNode = pHead;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;pos;i++)&#123;</span><br><span class="line">		curNode = curNode-&gt;next;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	curNode-&gt;next = curNode-&gt;next-&gt;next;</span><br><span class="line">	pHead-&gt;length--;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/18/1685f017eb087870?w=821&amp;h=291&amp;f=png&amp;s=20200" data-fancybox="group" data-caption="删除" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/18/1685f017eb087870?w=821&amp;h=291&amp;f=png&amp;s=20200" alt="删除" title="删除"></a><br>&emsp;&emsp;当前结点指定要删除位置的上一个结点(前结点)，把前结点的next指向下一个结点的<code>next</code>,<code>curNode-&gt;next = curNode-&gt;next-&gt;next</code>,就完成了删除操作。</p>
<h3 id="2-6-获取指定位置的结点"><a href="#2-6-获取指定位置的结点" class="headerlink" title="2.6 获取指定位置的结点"></a>2.6 获取指定位置的结点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取数据 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getData</span><span class="params">(Head * pHead,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pHead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init head node!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pos &lt; <span class="number">0</span>||pos &gt;= pHead-&gt;length)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"postion error!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建当前结点</span></span><br><span class="line">	ListNode * curNode = pHead;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=pos;i++)&#123;</span><br><span class="line">		curNode = curNode-&gt;next;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> curNode-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="2-7-打印所有结点"><a href="#2-7-打印所有结点" class="headerlink" title="2.7 打印所有结点"></a>2.7 打印所有结点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Head * phead)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(phead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init headnode!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ListNode * node = phead-&gt;next;</span><br><span class="line">	<span class="keyword">while</span>(node-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d-&gt;"</span>,node-&gt;data);</span><br><span class="line">		node = node-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d  length=%d\n"</span>,node-&gt;data,phead-&gt;length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;为了让打印效果更好，想法去掉了最后一个-&gt;，并且输出链表的长度。</p>
<h3 id="2-8-测试"><a href="#2-8-测试" class="headerlink" title="2.8 测试"></a>2.8 测试</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"create ListNode:\n"</span>);</span><br><span class="line">	Head* pHead = createList();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"length=%d\n\n"</span>,pHead-&gt;length);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"add data:\n"</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">		addData(pHead,i);</span><br><span class="line">	&#125;</span><br><span class="line">	print(pHead) ;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"insert data:\n"</span>);</span><br><span class="line">	insertData(pHead,<span class="number">100</span>,<span class="number">3</span>);</span><br><span class="line">	print(pHead);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"delete data:\n"</span>);</span><br><span class="line">	deleteData(pHead,<span class="number">3</span>);</span><br><span class="line">	print(pHead);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"get data:\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,getData(pHead,<span class="number">5</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/18/1685f09bba15da27?w=531&amp;h=232&amp;f=png&amp;s=7847" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/18/1685f09bba15da27?w=531&amp;h=232&amp;f=png&amp;s=7847" alt="输出结果" title="输出结果"></a></p>
<h2 id="3、双链表实现链式存储"><a href="#3、双链表实现链式存储" class="headerlink" title="3、双链表实现链式存储"></a>3、双链表实现链式存储</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>&emsp;&emsp;前面使用单链表实现了线性表的链式存储。但是单链表有个缺点，无法访问前驱结点。当查找到一个元素结点时，如果想要找到前面的元素结点，需要从头开始遍历，比较麻烦。所有双链表有开辟了一个空间,存储结点前驱结点的地址。如图所示：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/18/168603be28d801cc?w=680&amp;h=150&amp;f=png&amp;s=13359" data-fancybox="group" data-caption="双链表" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/18/168603be28d801cc?w=680&amp;h=150&amp;f=png&amp;s=13359" alt="双链表" title="双链表"></a></p>
<p>&emsp;&emsp;双链表的实现和单链表类似，当我们插入一个新结点时，如果这个结点有后驱结点时，要是后驱结点的pre 指向新结点，新结点的pre也要指向它的前驱结点。其他操作类似，这里只贴出代码，就不详细解释了。</p>
<h3 id="3-1-创建双链表"><a href="#3-1-创建双链表" class="headerlink" title="3.1  创建双链表"></a>3.1  创建双链表</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Header</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Header</span> * <span class="title">pre</span>;</span>  <span class="comment">//为了方便，在头结点添加一个pre ，不然无法指向 Node,在Head后面添加结点时就需要单独判断。 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Header</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;Head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pre</span>;</span>          </span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;NodeList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建 </span></span><br><span class="line"><span class="function">Head * <span class="title">createDouNodeList</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Head * pHead = (Head*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Head));</span><br><span class="line">	<span class="keyword">if</span>(pHead == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"create failure!\n"</span>); </span><br><span class="line">	&#125; </span><br><span class="line">	pHead-&gt;length = <span class="number">0</span>;</span><br><span class="line">	pHead-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> pHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="3-2-获取链表长度"><a href="#3-2-获取链表长度" class="headerlink" title="3.2  获取链表长度"></a>3.2  获取链表长度</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取链表长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(Head * pHead)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pHead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init head node!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> pHead-&gt;length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="3-3-判断是否为空"><a href="#3-3-判断是否为空" class="headerlink" title="3.3  判断是否为空"></a>3.3  判断是否为空</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">(Head *pHead)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pHead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init head node!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pHead-&gt;length==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="3-4-添加结点"><a href="#3-4-添加结点" class="headerlink" title="3.4  添加结点"></a>3.4  添加结点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加结点，,默认添加在末尾 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addDataDou</span><span class="params">(Head * pHead, <span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pHead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init head node!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="comment">//创建当前结点，并指向链表最后一个结点</span></span><br><span class="line">	NodeList * curNode = pHead; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(curNode-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		curNode = curNode-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建新结点 </span></span><br><span class="line">	NodeList * newNode = (NodeList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NodeList));</span><br><span class="line">	newNode-&gt;data = data; </span><br><span class="line">	newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	</span><br><span class="line">	curNode-&gt;next = newNode;</span><br><span class="line">	newNode-&gt;pre = curNode;</span><br><span class="line">	pHead-&gt;length++;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="3-5-插入结点"><a href="#3-5-插入结点" class="headerlink" title="3.5  插入结点"></a>3.5  插入结点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertDou</span><span class="params">(Head *pHead,<span class="keyword">int</span> data,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(pHead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init head node!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">if</span>(pos&lt;=<span class="number">0</span>||pos&gt;=pHead-&gt;length)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"insert positon error!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2</span>;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//创建新结点</span></span><br><span class="line">	NodeList * newNode = (NodeList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NodeList));</span><br><span class="line">	newNode-&gt;data = data;</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">//创建当前结点,并指向 指定位置之前的那个结点 </span></span><br><span class="line">	NodeList * curNode = pHead;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;pos;i++)&#123;</span><br><span class="line">		curNode = curNode-&gt;next;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//连接 </span></span><br><span class="line">	newNode-&gt;next = curNode-&gt;next;</span><br><span class="line">	curNode-&gt;next-&gt;pre = newNode;</span><br><span class="line">	newNode-&gt;pre = curNode;</span><br><span class="line">	curNode-&gt;next = newNode;</span><br><span class="line">	</span><br><span class="line">	pHead-&gt;length++;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="3-6-删除结点"><a href="#3-6-删除结点" class="headerlink" title="3.6  删除结点"></a>3.6  删除结点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteDataDou</span><span class="params">(Head * pHead,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pHead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init head node!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pos &lt; <span class="number">0</span>||pos &gt;= pHead-&gt;length)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"delete postion error!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建当前结点</span></span><br><span class="line">	NodeList * curNode = pHead;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;pos;i++)&#123;</span><br><span class="line">		curNode = curNode-&gt;next;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	curNode-&gt;next = curNode-&gt;next-&gt;next;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//要删除最后一个结点时判断 </span></span><br><span class="line">	<span class="keyword">if</span>(curNode-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		curNode-&gt;next-&gt;pre = curNode; </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	pHead-&gt;length--;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="3-7-获取指定元素的结点"><a href="#3-7-获取指定元素的结点" class="headerlink" title="3.7  获取指定元素的结点"></a>3.7  获取指定元素的结点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找某个元素，返回它的结点 </span></span><br><span class="line"><span class="function">NodeList * <span class="title">findNodeDou</span><span class="params">(Head *pHead,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pHead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init head node!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	NodeList *curNode = pHead-&gt;next;</span><br><span class="line">	<span class="keyword">do</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(curNode-&gt;data == val)&#123;</span><br><span class="line">			<span class="keyword">return</span> curNode;</span><br><span class="line">		&#125;</span><br><span class="line">		curNode = curNode-&gt;next;</span><br><span class="line">		</span><br><span class="line">	&#125;<span class="keyword">while</span>(curNode-&gt;next!=<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="3-8-打印所有结点"><a href="#3-8-打印所有结点" class="headerlink" title="3.8  打印所有结点"></a>3.8  打印所有结点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Head * pHead)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pHead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init head node!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	NodeList * node = pHead-&gt;next;</span><br><span class="line">	<span class="keyword">while</span>(node-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d&lt;-&gt;"</span>,node-&gt;data);</span><br><span class="line">		node = node-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d  length=%d\n"</span>,node-&gt;data,pHead-&gt;length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="3-9-测试"><a href="#3-9-测试" class="headerlink" title="3.9 测试"></a>3.9 测试</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//双链表实现链式存储</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Create Double Node List: \n"</span>); </span><br><span class="line">	Head  *pHead =  createDouNodeList();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"length = %d\n"</span>,pHead-&gt;length);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Add Data: \n"</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">		addDataDou(pHead,i); </span><br><span class="line">	&#125;</span><br><span class="line">	print(pHead);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Insert Data: \n"</span>);</span><br><span class="line">	insertDou(pHead,<span class="number">100</span>,<span class="number">3</span>);</span><br><span class="line">	print(pHead);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"delete Data: \n"</span>);</span><br><span class="line">	deleteDataDou(pHead,<span class="number">3</span>);</span><br><span class="line">	print(pHead);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"find Node: \n"</span>);</span><br><span class="line">	NodeList * node = findNodeDou(pHead,<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"node is %d\n"</span>,node);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/18/168604b7df9b9db5?w=576&amp;h=244&amp;f=png&amp;s=9740" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/18/168604b7df9b9db5?w=576&amp;h=244&amp;f=png&amp;s=9740" alt="输出结果" title="输出结果"></a></p>
<h2 id="4、循环链表"><a href="#4、循环链表" class="headerlink" title="4、循环链表"></a>4、循环链表</h2><p>&emsp;&emsp;链表还有一种常用的形式，那就是循环链表。循环链表首尾相接，形成一个环，从链表任何一个结点出发，都能够找到其他所有结点。</p>
<p>&emsp;&emsp;循环链表分为单向循环链表，双循环链表，多重循环链表。如图所示：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/18/1686092c4003af50?w=744&amp;h=203&amp;f=png&amp;s=11731" data-fancybox="group" data-caption="单向循环链表" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/18/1686092c4003af50?w=744&amp;h=203&amp;f=png&amp;s=11731" alt="单向循环链表" title="单向循环链表"></a><br>&emsp;&emsp;上图是单向循环链表，形成一个闭合环，有一个方向。<br><a href="https://user-gold-cdn.xitu.io/2019/1/18/16860948bde316fe?w=809&amp;h=348&amp;f=png&amp;s=31637" data-fancybox="group" data-caption="双循环链表" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/18/16860948bde316fe?w=809&amp;h=348&amp;f=png&amp;s=31637" alt="双循环链表" title="双循环链表"></a><br>&emsp;&emsp;上图是双向循环链表，形成一个闭合环，有两个方向。<br><a href="https://user-gold-cdn.xitu.io/2019/1/18/168609864448c237?w=1041&amp;h=374&amp;f=png&amp;s=34426" data-fancybox="group" data-caption="多重循环链表" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/18/168609864448c237?w=1041&amp;h=374&amp;f=png&amp;s=34426" alt="多重循环链表" title="多重循环链表"></a><br>&emsp;&emsp;上图是多重循环链表，形成了两个闭合环。</p>
<p>&emsp;&emsp;<strong>本教程只讲解单向循环链表，其他两种比较复杂，如需要的话，自行搜索。</strong> 循环链表的创建和查找基本和单链表一样，这里就不过多讲解了，只讲解插入和删除。如果您还不太清楚，请认真阅读前面的知识。</p>
<h3 id="4-1-插入结点"><a href="#4-1-插入结点" class="headerlink" title="4.1 插入结点"></a>4.1 插入结点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertCircleList</span><span class="params">(Head * pHead,<span class="keyword">int</span> data,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pHead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init head node!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pos &lt; <span class="number">0</span>||pos &gt; pHead-&gt;length)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"insert postion error!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建新结点 </span></span><br><span class="line">	NodeList * newNode = (NodeList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NodeList));</span><br><span class="line">	newNode-&gt;data = data;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//如果是空 </span></span><br><span class="line">	<span class="keyword">if</span>(isEmpty(pHead))&#123;</span><br><span class="line">		pHead-&gt;next = newNode;   <span class="comment">//直接插入到头结点后面</span></span><br><span class="line">		newNode-&gt;next = newNode; <span class="comment">//自己指向自己 </span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		</span><br><span class="line">		NodeList *curNode = pHead-&gt;next;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//因为pos ==0为涉及到头结点，单独处理 </span></span><br><span class="line">		<span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//curNode指向尾结点</span></span><br><span class="line">			<span class="keyword">while</span>(curNode-&gt;next!=pHead-&gt;next)&#123;</span><br><span class="line">				curNode = curNode-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			newNode-&gt;next =pHead-&gt;next;</span><br><span class="line">			pHead-&gt;next = newNode;</span><br><span class="line">			curNode-&gt;next = newNode; </span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">//使curNode指向插入位置的前一个结点 </span></span><br><span class="line">			<span class="keyword">int</span> i;</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;pos;i++)&#123;</span><br><span class="line">				curNode = curNode-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			newNode-&gt;next = curNode-&gt;next;</span><br><span class="line">			curNode-&gt;next = newNode; </span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	pHead-&gt;length++;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="4-2-删除结点"><a href="#4-2-删除结点" class="headerlink" title="4.2 删除结点"></a>4.2 删除结点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteCircleNode</span><span class="params">(Head *pHead,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pHead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init head node!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pos &lt; <span class="number">0</span>||pos &gt; pHead-&gt;length)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"insert postion error!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	NodeList *curNode = pHead-&gt;next;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(isEmpty(pHead))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(pos==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">while</span>(curNode-&gt;next!=pHead-&gt;next)&#123;</span><br><span class="line">				curNode = curNode-&gt;next;</span><br><span class="line">			&#125; </span><br><span class="line">			</span><br><span class="line">			curNode-&gt;next = curNode -&gt;next-&gt;next;</span><br><span class="line">			pHead-&gt;next = curNode -&gt;next;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">int</span> i;</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;pos;i++)&#123;</span><br><span class="line">				curNode = curNode-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			curNode -&gt;next = curNode-&gt;next-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	pHead-&gt;length--;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="4-3-其他代码"><a href="#4-3-其他代码" class="headerlink" title="4.3 其他代码"></a>4.3 其他代码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建头结点，length存储链表的长度 next指向下一个结点 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Header</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Header</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;Head;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个结点，data存放数据，next指向下一个结点 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span> </span><br><span class="line">&#125;NodeList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个链表，返回头结点 </span></span><br><span class="line"><span class="function">Head * <span class="title">createList</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Head *phead = (Head*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Head));</span><br><span class="line">	phead-&gt;length = <span class="number">0</span>;</span><br><span class="line">	phead-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> phead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">(Head *pHead)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pHead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init head node!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pHead-&gt;length==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Head *pHead)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pHead==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init headnode!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	NodeList * node = pHead-&gt;next;</span><br><span class="line">	<span class="keyword">do</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d-&gt;"</span>,node-&gt;data);</span><br><span class="line">		node = node-&gt;next;</span><br><span class="line">	&#125;<span class="keyword">while</span>(node!=pHead-&gt;next);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"   length=%d\n"</span>,pHead-&gt;length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="4-4-测试"><a href="#4-4-测试" class="headerlink" title="4.4 测试"></a>4.4 测试</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//循环链表</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Create Circle Node List: \n"</span>);</span><br><span class="line">	Head * pHead = createList();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"length = %d\n"</span>,pHead-&gt;length);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Insert Node: \n"</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)&#123;</span><br><span class="line">		insertCircleList(pHead,i,i);</span><br><span class="line">	&#125;</span><br><span class="line">	print(pHead);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Delete Node: \n"</span>);</span><br><span class="line">	deleteCircleNode(pHead,<span class="number">0</span>);</span><br><span class="line">	print(pHead);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>输出结果：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/18/168616d53e483a55?w=542&amp;h=152&amp;f=png&amp;s=5742" data-fancybox="group" data-caption="输出结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/18/168616d53e483a55?w=542&amp;h=152&amp;f=png&amp;s=5742" alt="输出结果" title="输出结果"></a></p>
<blockquote>
<p>作者个人博客   <a href="https://www.you3xuan.top/" target="_blank" rel="noopener">https://www.you3xuan.top/</a> 查看原文。<br><br> 源码地址: <a href="https://github.com/ThinkingXuan/DataStructure" target="_blank" rel="noopener">https://github.com/ThinkingXuan/DataStructure</a> <br><br>如果对您有帮助，随手一个Star吧。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>漫谈数据结构(二)——线性表1</title>
    <url>/2019/01/17/DataStructure/dataStructure2/</url>
    <content><![CDATA[<p><a href="https://user-gold-cdn.xitu.io/2019/1/16/16856baec5b0a7dd?w=892&amp;h=445&amp;f=png&amp;s=730563" data-fancybox="group" data-caption="风景图" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/16/16856baec5b0a7dd?w=892&amp;h=445&amp;f=png&amp;s=730563" alt="风景图" title="风景图"></a></p>
<h2 id="1、线性表的定义和特征"><a href="#1、线性表的定义和特征" class="headerlink" title="1、线性表的定义和特征"></a>1、线性表的定义和特征</h2><h4 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h4><p>&emsp;&emsp;线性表是具有<strong>相同类型元素</strong>组成的一个线性序列。元素的个数即为元素的长度，元素为0时称为空表。如下：</p>
<p><center>(A,B,C,D,E,F,G)</center><br>&emsp;&emsp;这就表示一个线性表。</p>
<a id="more"></a>
<h4 id="1-2-特征"><a href="#1-2-特征" class="headerlink" title="1.2 特征"></a>1.2 特征</h4><ol>
<li>有且只有一个头结点，头结点没有前驱结点。</li>
<li>有且只有一个尾结点, 尾结点没有后继节点。</li>
<li>除头尾结点外，其他结点都有一个前驱结点和后继节点。</li>
</ol>
<h4 id="1-3-存储特征"><a href="#1-3-存储特征" class="headerlink" title="1.3 存储特征"></a>1.3 存储特征</h4><p>&emsp;&emsp;线性表的存储结构分为顺序存储和链式存储，它们都具有如下特点：</p>
<ol>
<li>唯一性：一个线性表只能存储一种类型的元素</li>
<li>有序性：各元素在线性表中的位置只取决于它的序号，数据元素之间的相对位置为线性的（并不是内存结构上的有序）。</li>
</ol>
<h4 id="1-4-基本操作"><a href="#1-4-基本操作" class="headerlink" title="1.4 基本操作"></a>1.4 基本操作</h4><ol>
<li>创建 create()</li>
<li>初始化  init()</li>
<li>添加数据 addData()</li>
<li>获取长度 getLength()</li>
<li>获取指定元素 get()</li>
<li>插入 insert()</li>
<li>删除 delete()</li>
<li>清空表 clear()</li>
</ol>
<p>这8种只是线性表的最基本操作，如果想要进阶，请自己谷歌。</p>
<h2 id="2、线性表的顺序存储"><a href="#2、线性表的顺序存储" class="headerlink" title="2、线性表的顺序存储"></a>2、线性表的顺序存储</h2><p>&emsp;&emsp;数据被存储在指定长度的连续存储单元，通过对应的索引(一般从0开始)找到对应的元素。在高级语言中，顺序存储可以用数组表示。</p>
<p>&emsp;&emsp;前面提到过线性表的顺序存储查询效率高，插入和删除效率低。适合存储需要连续存取的数据。</p>
<h3 id="2-1-顺序存储的实现"><a href="#2-1-顺序存储的实现" class="headerlink" title="2.1 顺序存储的实现"></a>2.1 顺序存储的实现</h3><h4 id="2-1-1-创建顺序表并初始化"><a href="#2-1-1-创建顺序表并初始化" class="headerlink" title="2.1.1 创建顺序表并初始化"></a>2.1.1 创建顺序表并初始化</h4><p>&emsp;&emsp;使用结构体创建一个结点，这个结点存储了这个顺序表的基本信息，包括capacity,length,node。为了简单起见，只存储整形数据，其中用到了malloc和memset函数 ，代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SeqList</span> &#123;</span>       <span class="comment">//包含表的各种属性</span></span><br><span class="line">	<span class="keyword">int</span> capacity;          <span class="comment">// 容量</span></span><br><span class="line">	<span class="keyword">int</span> length; 		<span class="comment">//长度</span></span><br><span class="line">	<span class="keyword">int</span> * node;       	<span class="comment">//指针数组</span></span><br><span class="line">&#125; HSeqList;</span><br></pre></td></tr></table></figure></div>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建顺序表</span></span><br><span class="line"><span class="function">HSeqList * <span class="title">createSeqList</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ret;</span><br><span class="line">	HSeqList * head = (HSeqList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HSeqList));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		ret = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"create seqList error %d\n"</span>,ret);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(HSeqList));       <span class="comment">//清空头结点</span></span><br><span class="line">	head-&gt;capacity = capacity;</span><br><span class="line">	head-&gt;length = <span class="number">0</span>;</span><br><span class="line">	head-&gt;node = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">void</span> *)*capacity);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(head-&gt;node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		ret = <span class="number">2</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"create seqList error %d\n"</span>,ret);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-2-获取长度，容量并且封装打印方法。"><a href="#2-1-2-获取长度，容量并且封装打印方法。" class="headerlink" title="2.1.2 获取长度，容量并且封装打印方法。"></a>2.1.2 获取长度，容量并且封装打印方法。</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求顺序表容量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">(HSeqList * <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">	HSeqList * temp = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	temp = <span class="built_in">list</span>;</span><br><span class="line">	<span class="keyword">return</span> temp-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求顺序表长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(HSeqList * <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">	HSeqList * temp = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	temp = <span class="built_in">list</span>;</span><br><span class="line">	<span class="keyword">return</span> temp-&gt;length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(HSeqList * <span class="built_in">list</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init SeqList\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> length = getLength(<span class="built_in">list</span>);</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"["</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d,"</span>,<span class="built_in">list</span>-&gt;node[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d]\n"</span>,<span class="built_in">list</span>-&gt;node[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-3-添加数据"><a href="#2-1-3-添加数据" class="headerlink" title="2.1.3 添加数据"></a>2.1.3 添加数据</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addData</span><span class="params">(HSeqList * <span class="built_in">list</span>,<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init SeqList\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">list</span>-&gt;length&gt;=<span class="built_in">list</span>-&gt;capacity)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"SeqList is full,not add data,current data is %d\n"</span>,data);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> index = <span class="built_in">list</span>-&gt;length;</span><br><span class="line">	<span class="built_in">list</span>-&gt;node[index] = data; </span><br><span class="line">	<span class="built_in">list</span>-&gt;length++;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="2-1-4-插入"><a href="#2-1-4-插入" class="headerlink" title="2.1.4 插入"></a>2.1.4 插入</h4><p>&emsp;&emsp;如果要在顺序表中插入数据，则需要将该位置后的所有元素往后移动。<br>例如，在[A,B,C,D,E,F]中把G插入到第二个位置。要先移位然后插入。如图所示：<br><a href="https://user-gold-cdn.xitu.io/2019/1/17/1685a0931c524da4?w=434&amp;h=192&amp;f=png&amp;s=6080" data-fancybox="group" data-caption="插入1" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685a0931c524da4?w=434&amp;h=192&amp;f=png&amp;s=6080" alt="插入1" title="插入1"></a><br><a href="https://user-gold-cdn.xitu.io/2019/1/17/1685a0a82dd38a8b?w=500&amp;h=120&amp;f=png&amp;s=2788" data-fancybox="group" data-caption="移位" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685a0a82dd38a8b?w=500&amp;h=120&amp;f=png&amp;s=2788" alt="移位" title="移位"></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/17/1685a0b2c4475862?w=464&amp;h=122&amp;f=png&amp;s=2897" data-fancybox="group" data-caption="插入2" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685a0b2c4475862?w=464&amp;h=122&amp;f=png&amp;s=2897" alt="插入2" title="插入2"></a></p>
<p>代码如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(HSeqList *<span class="built_in">list</span>,<span class="keyword">int</span> data,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init SeqList\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">list</span>-&gt;length&gt;=<span class="built_in">list</span>-&gt;capacity)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"SeqList is full,not insert data,current data is %d\n"</span>,data);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//如何插入位置在length之前，则默认插入到最后一位 </span></span><br><span class="line">	<span class="keyword">if</span>(pos&gt;<span class="built_in">list</span>-&gt;length)&#123;</span><br><span class="line">		pos = <span class="built_in">list</span>-&gt;length;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//从后往前移位，防止数据丢失 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="built_in">list</span>-&gt;length;i&gt;pos;i--)&#123;</span><br><span class="line">		<span class="built_in">list</span>-&gt;node[i] = <span class="built_in">list</span>-&gt;node[i<span class="number">-1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//插入数据 </span></span><br><span class="line">	<span class="built_in">list</span>-&gt;node[i] = data;</span><br><span class="line">	<span class="comment">//增加长度 </span></span><br><span class="line">	<span class="built_in">list</span>-&gt;length ++;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h4 id="2-1-5-删除"><a href="#2-1-5-删除" class="headerlink" title="2.1.5 删除"></a>2.1.5 删除</h4><p>&emsp;&emsp;删除指定位置的元素后，该位置往后的元素依次往前移动。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">delete</span>(HSeqList *<span class="built_in">list</span>, <span class="keyword">int</span> pos) &#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init SeqList!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">list</span>-&gt;length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"SeqList not data!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(pos &lt; <span class="number">0</span> || pos &gt;<span class="built_in">list</span>-&gt;length)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"delete position error!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=pos; i&lt;=<span class="built_in">list</span>-&gt;length;i++)&#123;</span><br><span class="line">		<span class="built_in">list</span>-&gt;node[i] = <span class="built_in">list</span>-&gt;node[i+<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">list</span>-&gt;length--;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>2.1.6 查找某个位置上的指定元素</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找某个位置上的指定元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getData</span><span class="params">(HSeqList *<span class="built_in">list</span>,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init SeqList!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pos &lt; <span class="number">0</span> || pos &gt;=<span class="built_in">list</span>-&gt;length)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"position error!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">list</span>-&gt;node[pos];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>2.1.7 清空表<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空表</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clear</span><span class="params">(HSeqList *<span class="built_in">list</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"not init SeqList!\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">list</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(<span class="built_in">list</span>-&gt;node,<span class="number">0</span>,(<span class="built_in">list</span>-&gt;capacity * <span class="keyword">sizeof</span>(<span class="keyword">void</span> *)));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>2.1.8 测试代码<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"init:\n"</span>);</span><br><span class="line">	<span class="keyword">int</span> capacity = <span class="number">100</span>;</span><br><span class="line">	HSeqList *<span class="built_in">list</span> = createSeqList(capacity);</span><br><span class="line">	<span class="keyword">int</span> s = getCapacity(<span class="built_in">list</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Capacity = %d\n"</span>,s);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"addData:\n"</span>);</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">		addData(<span class="built_in">list</span>,i);</span><br><span class="line">	&#125;</span><br><span class="line">	print(<span class="built_in">list</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"insert:\n"</span>);</span><br><span class="line">	insert(<span class="built_in">list</span>,<span class="number">100</span>,<span class="number">3</span>);</span><br><span class="line">	print(<span class="built_in">list</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"delete:\n"</span>);</span><br><span class="line">	<span class="keyword">delete</span>(<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line">	print(<span class="built_in">list</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"getData:\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"index %d is %d\n"</span>,<span class="number">0</span>,getData(<span class="built_in">list</span>,<span class="number">0</span>));</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"clear:\n"</span>);</span><br><span class="line">	clear(<span class="built_in">list</span>);</span><br><span class="line">	print(<span class="built_in">list</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>输出结果：</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/17/1685a41249220d20?w=463&amp;h=197&amp;f=png&amp;s=5904" data-fancybox="group" data-caption="输入结果" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/17/1685a41249220d20?w=463&amp;h=197&amp;f=png&amp;s=5904" alt="输入结果" title="输入结果"></a></p>
<blockquote>
<p>作者个人博客   <a href="https://www.you3xuan.top/" target="_blank" rel="noopener">https://www.you3xuan.top/</a> 查看原文。<br><br> 源码地址: <a href="https://github.com/ThinkingXuan/DataStructure" target="_blank" rel="noopener">https://github.com/ThinkingXuan/DataStructure</a> <br><br>如果对您有帮助，随手一个Star吧。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>漫谈数据结构(一)—— 概述</title>
    <url>/2019/01/16/DataStructure/dataStructure1/</url>
    <content><![CDATA[<p><a href="https://upload-images.jianshu.io/upload_images/2514354-8a33232654a654cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="风景图" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-8a33232654a654cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="风景图" title="风景图"></a></p>
<h2 id="1、为什么要学习数据结构？"><a href="#1、为什么要学习数据结构？" class="headerlink" title="1、为什么要学习数据结构？"></a>1、为什么要学习数据结构？</h2><p>&emsp; &emsp;数据结构是是计算机专业最重要的基础之一，它是大学计算机专业的必修课，也是程序员提高自己的重要知识结构。对于学生而言，它对你以后考研和面试都用很重要的帮助。对于程序员而言，它能拓宽人的学习深度，决定了你日后能到达怎样的高度，更能体现人的学习素养，对日后的工作面试有很大的用途。<br><a id="more"></a></p>
<p>&emsp; &emsp;本教程主要介绍数据结构的常见用法，为了兼容更多人群，所有以C语言为主要的编程语言。如果您C语言基础不过关，请自行Google。其次，语言只是描述程序的一种形式，万变不离其中，掌握一种也就很容易掌握另外一种。</p>
<h2 id="2、什么是数据结构？"><a href="#2、什么是数据结构？" class="headerlink" title="2、什么是数据结构？"></a>2、什么是数据结构？</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">维基百科</a>给出了定义: 数据结构（英语：data structure）是计算机中存储、组织数据的方式。无论是大数据时代的海量数据的存储，还是简单用户信息或者学生信息的存储，其数据存储的底层都要以某种更方便、更快捷且更省内存空间的方式进行，这种存储方式就是数据结构。如下图，就是一个简单的数据结构，他描述一个基础的学生信息，由id,name,sex,class组成。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">name</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">class </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">001</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">男</td>
<td style="text-align:center">1班    </td>
</tr>
<tr>
<td style="text-align:center">002</td>
<td style="text-align:center">李四</td>
<td style="text-align:center">男</td>
<td style="text-align:center">2班 </td>
</tr>
<tr>
<td style="text-align:center">003</td>
<td style="text-align:center">王五</td>
<td style="text-align:center">男</td>
<td style="text-align:center">3班  </td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-1、基本术语"><a href="#2-1、基本术语" class="headerlink" title="2.1、基本术语"></a>2.1、基本术语</h3><blockquote>
<p>数据</p>
</blockquote>
<p>&emsp; &emsp;计算机中存储的的最小单位</p>
<blockquote>
<p>数据元素</p>
</blockquote>
<p>&emsp; &emsp; 也叫元素或记录，及为上表中的一行。</p>
<blockquote>
<p>数据对象</p>
</blockquote>
<p>&emsp; &emsp; 数据元素的集合</p>
<h2 id="3、数据结构的分类"><a href="#3、数据结构的分类" class="headerlink" title="3、数据结构的分类"></a>3、数据结构的分类</h2><h3 id="3-1、逻辑结构"><a href="#3-1、逻辑结构" class="headerlink" title="3.1、逻辑结构"></a>3.1、逻辑结构</h3><blockquote>
<p>描述元素之间的逻辑关系，与数据的存储位置无关。他包括集合、线性结构，树形结构和图形结构。</p>
</blockquote>
<h4 id="1、集合"><a href="#1、集合" class="headerlink" title="1、集合"></a>1、集合</h4><p>&emsp; &emsp; 类似于数学中的集合，一个数据存在于集合中，数据之间没有什么关系。</p>
<h4 id="2、线性结构"><a href="#2、线性结构" class="headerlink" title="2、线性结构"></a>2、线性结构</h4><p>&emsp; &emsp; 与元素具有一对一的关系，在内存中逐个排列。它分为<code>顺序存储</code>和<code>链式存储</code>，顺序存储相当于高级语言的数组，在内存中排列是连续的。链式存储使用链表维护元素，在内存中排列是不连续的。</p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/16/16854baf84eb4dea?w=304&amp;h=105&amp;f=png&amp;s=1984" data-fancybox="group" data-caption="顺序存储" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/16/16854baf84eb4dea?w=304&amp;h=105&amp;f=png&amp;s=1984" alt="顺序存储" title="顺序存储"></a></p>
<p><a href="https://user-gold-cdn.xitu.io/2019/1/16/16854bbb84cfbd09?w=457&amp;h=113&amp;f=png&amp;s=5619" data-fancybox="group" data-caption="链式存储" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/16/16854bbb84cfbd09?w=457&amp;h=113&amp;f=png&amp;s=5619" alt="链式存储" title="链式存储"></a></p>
<h4 id="3、树形结构"><a href="#3、树形结构" class="headerlink" title="3、树形结构"></a>3、树形结构</h4><p>&emsp; &emsp; 使用<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%A0%91" target="_blank" rel="noopener">树</a>来维护元素的多个层次关系（对二叉树不了解请点击链接），除根结点外，一个节点只有一个父结点，可以根据一个节点寻找它的子结点或者父结点。<br><a href="https://user-gold-cdn.xitu.io/2019/1/16/16854c603e1d5c77?w=403&amp;h=283&amp;f=png&amp;s=17339" data-fancybox="group" data-caption="树" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/16/16854c603e1d5c77?w=403&amp;h=283&amp;f=png&amp;s=17339" alt="树" title="树"></a></p>
<h4 id="4、图形结构"><a href="#4、图形结构" class="headerlink" title="4、图形结构"></a>4、图形结构</h4><p>&emsp;&emsp;使用<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE_(%E6%95%B0%E5%AD%A6" target="_blank" rel="noopener">图</a>)来维护元素的多个层次关系（图不了解请点击链接），一个图中的结点可以有多个父结点和子结点。<br><a href="https://user-gold-cdn.xitu.io/2019/1/16/16854d4634c7bb4a?w=410&amp;h=276&amp;f=png&amp;s=21436" data-fancybox="group" data-caption="图" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2019/1/16/16854d4634c7bb4a?w=410&amp;h=276&amp;f=png&amp;s=21436" alt="图" title="图"></a></p>
<h3 id="3-2、存储结构"><a href="#3-2、存储结构" class="headerlink" title="3.2、存储结构"></a>3.2、存储结构</h3><h4 id="1、顺序存储结构"><a href="#1、顺序存储结构" class="headerlink" title="1、顺序存储结构"></a>1、顺序存储结构</h4><p>&emsp;&emsp;使用顺序表来存储数据，数据存储在是连续的内存单元上。</p>
<p>优点：查询效率高，可以使用元素的下标直接找到某一个元素。因为其存储结构是紧密的，所以提高了空间利用率。</p>
<p>缺点：插入和删除一个元素的效率低，插入或者删除一个元素，要把这个元素的右边所有元素右移或者左移1个单位，随着数据量的增大，插入和删除的效率也会随之下降。且存储空间大小在定义时已经明确指定，操作元素是会出现“溢出”或者浪费空间的情况。</p>
<h4 id="2、链式存储结构"><a href="#2、链式存储结构" class="headerlink" title="2、链式存储结构"></a>2、链式存储结构</h4><p>&emsp;&emsp;使用链表来存储数据，数据存储在是不连续的内存单元上。</p>
<p>优点：插入和删除效率很高，不会造成空间的浪费。</p>
<p>缺点：无法随机访问，内存单元一部分用来存储元素之间的逻辑关系，造成空间利用率低。</p>
<h4 id="3、索引存储结构"><a href="#3、索引存储结构" class="headerlink" title="3、索引存储结构"></a>3、索引存储结构</h4><p>&emsp;&emsp;除建立存储结点信息外，还建立附加的索引表来标识结点的地址。索引表由若干索引项组成</p>
<p>&emsp;&emsp;特点：索引存储结构是用结点的索引号来确定结点存储地址，其优点是检索速度快，缺点是增加了附加的索引表,会占用较多的存储空间。</p>
<h4 id="4、散列存储结构"><a href="#4、散列存储结构" class="headerlink" title="4、散列存储结构"></a>4、散列存储结构</h4><p>&emsp;&emsp;散列存储，又称hash存储，是一种力图将数据元素的存储位置与关键码之间建立确定对应关系的查找技术。</p>
<p>&emsp;&emsp;散列法存储的基本思想是：由节点的关键码值决定节点的存储地址。散列技术除了可以用于查找外，还可以用于存储。</p>
<p>&emsp;&emsp;特点：散列是数组存储方式的一种发展，相比数组，散列的数据访问速度要高于数组，因为可以依据存储数据的部分内容找到数据在数组中的存储位置，进而能够快速实现数据的访问，理想的散列访问速度是非常迅速的。</p>
<h2 id="4、算法"><a href="#4、算法" class="headerlink" title="4、算法"></a>4、算法</h2><p>程序 = 数据结构 + 算法</p>
<p>算法是数据结构的灵魂，一个数据结构设计的再好，如果没有算法，如同失去了灵魂，它的存在就毫无意义。</p>
<h3 id="4-1-什么是算法"><a href="#4-1-什么是算法" class="headerlink" title="4.1 什么是算法"></a>4.1 什么是算法</h3><p>&emsp;&emsp;算法是解决某个特定问题的具体步骤。</p>
<p>&emsp;&emsp;描述算法的方法：伪代码法，N-S结构化流程图和流程图， 具体方法请自行百度。</p>
<h3 id="4-2-算法的特性"><a href="#4-2-算法的特性" class="headerlink" title="4.2 算法的特性"></a>4.2 算法的特性</h3><ol>
<li>确定性</li>
<li>可行性</li>
<li>有穷性</li>
<li>零个或者多个输入</li>
<li>一个或者多个输出</li>
<li>正确性</li>
<li>可读性</li>
<li>健壮性</li>
<li>高效率和低存储</li>
</ol>
<h3 id="4-3-算法的复杂度"><a href="#4-3-算法的复杂度" class="headerlink" title="4.3 算法的复杂度"></a>4.3 算法的复杂度</h3><p>&emsp;&emsp;用来表示算法执行消耗的计算机资源，主要从时间和空间两个方面考虑。</p>
<h4 id="1、时间复杂度"><a href="#1、时间复杂度" class="headerlink" title="1、时间复杂度"></a>1、时间复杂度</h4><p>&emsp;&emsp;描述算法的执行时间(次数)，常用O(n)表示。<br>推导方法:</p>
<ol>
<li>n为常数，用1代替。</li>
<li>n为未知数，系数为1，只保留最高阶项。</li>
<li>n为未知数，系数不为1，只保留最高阶项且最高阶项除去系数。</li>
</ol>
<p>例子如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> sum = a + b;</span><br></pre></td></tr></table></figure></div></p>
<p>共执行$f（n）= 3$ 次，所以 时间复杂度为<code>O(1)</code>。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,sum;          <span class="comment">//执行一次 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		sum += i;       <span class="comment">//执行n次 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum); <span class="comment">//执行一次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>共执行<script type="math/tex">f（n）= n+3</script>次，所以 时间复杂度为<code>O(n)</code>。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">		i * = <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>共执行$ 2^f = n $, 即 $ f =  {log_2{n}}$，所以复杂度为O(logn)。</p>
<h4 id="2、空间复杂度"><a href="#2、空间复杂度" class="headerlink" title="2、空间复杂度"></a>2、空间复杂度</h4><p>&emsp;&emsp;算法运行所占空间的大小，常用O(n)表示。</p>
<h2 id="4、算法和数据结构"><a href="#4、算法和数据结构" class="headerlink" title="4、算法和数据结构"></a>4、算法和数据结构</h2><p>&emsp;&emsp;算法通常是决定程序效率的关键，但是一切算法最终都要在相应的数据结构上实现，许多算法的精髓就是在于选择了合适的数据结构作为基础。在程序设计中，不但要注重算法设计，也要正确选择数据结构，这样往往能够事半功倍。</p>
<p>具体参考如下:<br><a href="https://www.you3xuan.top/2018/12/16/leetcode1/#more" target="_blank" rel="noopener">LeetCode1</a> 使用散列存储，极大的提高了算法效率。</p>
<blockquote>
<p>作者个人博客   <a href="https://www.you3xuan.top/" target="_blank" rel="noopener">https://www.you3xuan.top/</a> 查看原文。<br><br> 源码地址: <a href="https://github.com/ThinkingXuan/DataStructure" target="_blank" rel="noopener">https://github.com/ThinkingXuan/DataStructure</a> <br><br>如果对您有帮助，随手一个Star吧。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 6(ZigZag Conversion)</title>
    <url>/2018/12/16/LeetCode/leetcode6/</url>
    <content><![CDATA[<h3 id="ZigZag-Conversion（ZigZag转换）"><a href="#ZigZag-Conversion（ZigZag转换）" class="headerlink" title="ZigZag Conversion（ZigZag转换）"></a>ZigZag Conversion（ZigZag转换）</h3><h4 id="1、题目描述："><a href="#1、题目描述：" class="headerlink" title="1、题目描述："></a>1、题目描述：</h4><p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)<br><a id="more"></a><br>P &emsp;&emsp; &emsp;A   &emsp;&emsp;&emsp;H &emsp; &emsp;  &emsp;N<br>A &emsp;P &emsp; L&emsp; S&emsp;   I&emsp; &emsp;I &emsp;    G<br>Y &emsp;&emsp;&emsp; I  &emsp;&emsp;&emsp; R<br>And then read line by line: “PAHNAPLSIIGYIR”</p>
<p>Write the code that will take a string and make this conversion given a number of rows:</p>
<p>string convert(string s, int numRows);<br>Example 1:</p>
<p>Input: s = “PAYPALISHIRING”, numRows = 3<br>Output: “PAHNAPLSIIGYIR”</p>
<p> &emsp; &emsp;给出一个指定字符串和numRows，把字符串按倒Z的形式排列，行数为numRows，按行排列返回字符串。</p>
<h5 id="2、解决方法1：按行分类-Java实现"><a href="#2、解决方法1：按行分类-Java实现" class="headerlink" title="2、解决方法1：按行分类(Java实现)"></a>2、解决方法1：按行分类(Java实现)</h5><p>&emsp; &emsp;仔细观察这个Z型的图形，它是由nomRows行子串构成。所以可以遍历整个字符串把字符依次添加到指定行字符串上，方向为先下后上。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//numRows为1，直接返回s</span></span><br><span class="line">        <span class="keyword">if</span> (numRows==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建Math.min(numRows, s.length())个字符串(字符串的长度小于numRows，集合长度取s.length)，</span></span><br><span class="line">        <span class="comment">// 放在集合中。也可以使用字符串数组实现。</span></span><br><span class="line">        <span class="comment">//使用StringBuilder可以使字符串拼接更快。</span></span><br><span class="line">        List&lt;StringBuilder&gt; rows = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.min(numRows, s.length()); i++) &#123;</span><br><span class="line">            StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            rows.add(stringBuilder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> curRow = <span class="number">0</span>;             <span class="comment">//当前行</span></span><br><span class="line">        <span class="keyword">boolean</span> dir = <span class="keyword">false</span>;        <span class="comment">//当前方向     true向下 false向上  </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            rows.get(curRow).append(c);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//第一行或最后一行时，换方向</span></span><br><span class="line">            <span class="keyword">if</span> (curRow ==<span class="number">0</span> || curRow ==numRows -<span class="number">1</span> )&#123;</span><br><span class="line">                dir  = ! dir;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//换行</span></span><br><span class="line">            curRow += dir ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拼接字符串集合</span></span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (StringBuilder sb : rows) &#123;</span><br><span class="line">            str.append(sb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>运行耗时：53ms<br><a href="https://upload-images.jianshu.io/upload_images/2514354-9e512416cc760378.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="运行耗时" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-9e512416cc760378.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行耗时" title="运行耗时"></a></p>
<p>时间复杂度：O(n)    遍历字符串的长度为len(s)。<br>空间复杂度：O(n)    存储了len(s)的字符。</p>
<h5 id="解决方法2：按行访问-C语言实现"><a href="#解决方法2：按行访问-C语言实现" class="headerlink" title="解决方法2：按行访问(C语言实现)"></a>解决方法2：按行访问(C语言实现)</h5><p>原理：找到每一行中的字符在字符串中的出现位置。</p>
<p>如图：<a href="https://upload-images.jianshu.io/upload_images/2514354-cdf805fc24bb58d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="image.png" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-cdf805fc24bb58d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="image.png"></a></p>
<p>&emsp; &emsp;仔细观察第一行中P和A中间距中间相隔3个子串，实际下标相差4。在图上看的话其实是相差一列加一条对角线，所以第一行的字符位置可以表示为<strong>k*(2 * numRows - 2)</strong> ，<strong>k</strong>为字符在一行字符串中所处的位置。最后一行的字符位置可以用第一行加<strong>numRows-1</strong>表示，所以可以表示为<strong>k*(2 * numRows - 2) - numRows -1</strong>。中间的字符包含两个部分，分别是 <strong>k*(numRows -2) + i</strong> 和 <strong>（k+1)*(numRows -2) - i</strong>。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">convert_2</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (numRows == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">int</span> cycleLen = <span class="number">2</span> * numRows - <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//长度比原字符串多1，有个'\0'</span></span><br><span class="line">    <span class="keyword">char</span> *ret = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (length + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + i &lt; length; j += cycleLen) &#123;</span><br><span class="line">            <span class="comment">//第一行、最后一行和中间行的列部分</span></span><br><span class="line">            ret[index++] = s[j + i];</span><br><span class="line">            <span class="comment">//中间行字符串的对角线部分</span></span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; i != numRows - <span class="number">1</span> &amp;&amp; j + cycleLen - i &lt; length) &#123;</span><br><span class="line">                ret[index++] = s[j + cycleLen - i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ret[index] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>运行耗时：12ms<br><a href="https://upload-images.jianshu.io/upload_images/2514354-1236a3bdec49fa9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="运行耗时" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-1236a3bdec49fa9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行耗时" title="运行耗时"></a><br>时间复杂度：O(n)    把所有字符的下标遍历了一遍。<br>空间复杂度：O(n)   分配指针len(s)+1个空间。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 5(Longest Palindromic Substring)</title>
    <url>/2018/12/16/LeetCode/leetcode5/</url>
    <content><![CDATA[<h3 id="Longest-Palindromic-Substring（最大回文字符串）"><a href="#Longest-Palindromic-Substring（最大回文字符串）" class="headerlink" title="Longest Palindromic Substring（最大回文字符串）"></a>Longest Palindromic Substring（最大回文字符串）</h3><h4 id="1、题目描述："><a href="#1、题目描述：" class="headerlink" title="1、题目描述："></a>1、题目描述：</h4><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.<br><a id="more"></a></p>
<p>Example 1:</p>
<p>Input: “babad”<br>Output: “bab”<br>Note: “aba” is also a valid answer.<br>Example 2:</p>
<p>Input: “cbbd”<br>Output: “bb”</p>
<p>给出一个字符串<strong>s</strong>，找出长度最大的回文子串，<strong>s</strong>的最大长度小于1000。</p>
<h4 id="2、摘要："><a href="#2、摘要：" class="headerlink" title="2、摘要："></a>2、摘要：</h4><p>下面介绍了几种方法实现：回文，动态规划和字符串操作。回文的定义：<strong>一个字符串从两个方向读，它的内容是相同的。</strong>例如：<strong>S = “aba”</strong>是回文字符串，而<strong>S = “abc”</strong>不是回文字符串。</p>
<h4 id="3、解决方法："><a href="#3、解决方法：" class="headerlink" title="3、解决方法："></a>3、解决方法：</h4><h6 id="方法1：Brute-Force-暴力破解"><a href="#方法1：Brute-Force-暴力破解" class="headerlink" title="方法1：Brute Force(暴力破解)"></a>方法1：Brute Force(暴力破解)</h6><p>很明显，暴力破解就是找到所有子串验证它是否是回文字符串。</p>
<p>Java实现：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       String ss = <span class="keyword">new</span> StringBuilder(s).reverse().toString();</span><br><span class="line">       <span class="keyword">if</span> (ss.equals(s)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> longestLength = <span class="number">0</span>;</span><br><span class="line">       String longestSubString = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= s.length(); j++) &#123;</span><br><span class="line">               String subString = s.substring(i,j);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (isPalindrome(subString) &amp;&amp; subString.length()&gt;longestLength)&#123;</span><br><span class="line">                   longestLength = subString.length();</span><br><span class="line">                   longestSubString = subString;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> longestSubString;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div></p>
<p>时间复杂度：<br>&emsp;&emsp;两个for循环中嵌套了一个判断回文的过程，回文判断我使用的是StringBuilder的reverse()方法，时间复杂度一共是O(n^3)。比较不理想，提交上去会出现时间超时。</p>
<p>空间复杂度：两个变量，复杂度为O(1)。</p>
<h6 id="方法2：Longest-Common-Substring-最长的公共子串"><a href="#方法2：Longest-Common-Substring-最长的公共子串" class="headerlink" title="方法2：Longest Common Substring(最长的公共子串)"></a>方法2：Longest Common Substring(最长的公共子串)</h6><p>&emsp;&emsp;一些人可能会想出一个最快的方法，倒序字符串<strong>s</strong>，然后与原字符串对比，然后找出最长的公共子串，这个子串一定就是最长的回文子串。<br>&emsp;&emsp;从表面上看这个方法是正确的，但是仔细想来并不是完全正确，例如<strong>S = “abacdfgdcaba”</strong>,他和倒序的公共最长字符为 <strong>“abacd”</strong>，然而这个并不是回文字符串。导致出现这个情况的原因是原字符串中存在一个非回文倒序副本。如果要排除这个影响，就要在候选字符串中 检查子串的索引是否与反向子串的原始索引相同，相同就保留，不同就舍弃。</p>
<p>&emsp;&emsp;首先实现寻找最长的公共子串，具体步骤参考：<br><a href="https://blog.csdn.net/u010397369/article/details/38979077" target="_blank" rel="noopener">https://blog.csdn.net/u010397369/article/details/38979077</a><br>&emsp;&emsp;具体实现思路就是把两个字符串组成一个二维数组 ，如果两个对应字符相等，就执行 <strong>temp[ i ][ j ] = temp[ i - 1 ][ j - 1] + 1</strong>。因为i-1或者j-1会越界，所以可以单独处理。temp[ i ][ j ] 保存的就是公共子串的长度。</p>
<p>Java实现<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome_2</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (s.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String ss = <span class="keyword">new</span> StringBuilder(s).reverse().toString();  <span class="comment">//倒序</span></span><br><span class="line">        <span class="keyword">int</span> longestlength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxEnd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] temp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()][ss.length()];</span><br><span class="line">        <span class="keyword">char</span>[] s_char = s.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] ss_char = ss.toCharArray();</span><br><span class="line">        <span class="comment">//原字符串做列,倒序后的子串作为行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ss_char.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s_char.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s_char[i] == ss_char[j]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                        temp[i][j] = <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        temp[i][j] = temp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (temp[i][j] &gt; longestlength) &#123;</span><br><span class="line">                    longestlength = temp[i][j];</span><br><span class="line">                    maxEnd = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(maxEnd - longestlength + <span class="number">1</span>, maxEnd + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div></p>
<p>&emsp;&emsp;以上算法只能实现寻找最长的公共子串，如果<strong>s=”abc435cba”</strong>，公共子串为”abc”，但是这个不是回文字符串。为了解决这个问题，我们还要对比子串在倒序后的字符串的位置和原字符串的位置是否对应。<br>&emsp;&emsp;举个例子，如果<strong>s=”caba”,s’ = “abac”</strong>，他们的最长回文串为<strong>“aba”</strong>,<strong>“aba”</strong>在原字符串中的位置为 <strong>1  2  3</strong> ，在s’中的位置为 <strong>0 1 2</strong>，所以 <strong>aba</strong> 就是我们需要找的。当然我们不需要每个字符都判断，我们只需要判断末尾字符就可以。<br>如图：<br><a href="https://upload-images.jianshu.io/upload_images/2514354-b06223eb24a131ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="image.png" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-b06223eb24a131ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="image.png"></a><br>&emsp;&emsp;<code>i</code>所指的字符a在原字符串中的位置为<code>beforeRev  = length - i- 1 = 0</code>，<code>beforeRev</code>就是在<code>j</code>中为第一个字符位置，且  <code>beforeRev + temp[i][j] - 1 =2</code>代表<code>j</code>中最后一个字符的位置，如果位置与<code>j</code>相等，aba就是要找的。我们可以写出如下代码：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态规划 (获取最长回文串) 需要和原字符对比位置</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome_3</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (s.length() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> s;</span><br><span class="line">     &#125;</span><br><span class="line">     String ss = <span class="keyword">new</span> StringBuilder(s).reverse().toString();  <span class="comment">//倒序</span></span><br><span class="line">     <span class="keyword">int</span> longestlength = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">int</span> maxEnd = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">int</span>[][] temp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()][ss.length()];</span><br><span class="line">     <span class="keyword">char</span>[] s_char = s.toCharArray();</span><br><span class="line">     <span class="keyword">char</span>[] ss_char = ss.toCharArray();</span><br><span class="line">     <span class="comment">//原字符串做列,倒序后的子串作为行</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ss_char.length; i++) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s_char.length; j++) &#123;</span><br><span class="line">             <span class="keyword">if</span> (s_char[i] == ss_char[j]) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                     temp[i][j] = <span class="number">1</span>;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     temp[i][j] = temp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (temp[i][j] &gt; longestlength) &#123;</span><br><span class="line"></span><br><span class="line">                 <span class="comment">/*******************增加的部分***********************/</span></span><br><span class="line">                 <span class="keyword">int</span> beforeRev = s.length() - i - <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">if</span> (beforeRev + temp[i][j] - <span class="number">1</span> == j) &#123;</span><br><span class="line">                     longestlength = temp[i][j];</span><br><span class="line">                     maxEnd = i;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> s.substring(maxEnd - longestlength + <span class="number">1</span>, maxEnd + <span class="number">1</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div></p>
<p>执行时间：<br><a href="https://upload-images.jianshu.io/upload_images/2514354-44e9106328ae82e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="image.png" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-44e9106328ae82e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="image.png"></a></p>
<p>时间复杂度：两个嵌套循环，O(n^2)<br>空间复杂度：一个二维数组，O(n^2)</p>
<p>&emsp;&emsp;仔细观察可以发现，我们判断字符相等的只用到了temp[i][j]，一行用过之后就弃置不用了。所以我们可以把空间复杂度优化到O(n)，只需要把一个一维数组重新赋值即可，因为正序赋值有可能覆盖改后面需要使用的数据<br>比如a[3] = a[2]+1时，计算a[4]的时候a[3]的值就不是原来的了。所以我们需要从后往前计算，代码如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome_4</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String ss = <span class="keyword">new</span> StringBuilder(s).reverse().toString();  <span class="comment">//倒序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> longestlength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxEnd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] s_char = s.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] ss_char = ss.toCharArray();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s_char.length; i++) &#123;    <span class="comment">//初始化第一行</span></span><br><span class="line">        temp[i] = (s_char[<span class="number">0</span>] == ss_char[i]) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s_char.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = ss.length() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (s_char[i] == ss_char[j]) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                    temp[j] = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    temp[j] = temp[j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (temp[j] &gt; longestlength) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/*******************增加的部分***********************/</span></span><br><span class="line">                    <span class="keyword">int</span> beforeRev = s.length() - j - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (beforeRev + temp[j] - <span class="number">1</span> == i) &#123;</span><br><span class="line">                        longestlength = temp[j];</span><br><span class="line">                        maxEnd = i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp[j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(maxEnd - longestlength + <span class="number">1</span>, maxEnd + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>运行时间：<br><a href="https://upload-images.jianshu.io/upload_images/2514354-5a2478690d1f1ed5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="image.png" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-5a2478690d1f1ed5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="image.png"></a></p>
<p>时间复杂度：两个嵌套循环，O(n^2)<br>空间复杂度：一个一维数组，O(n)</p>
<h6 id="方法3：扩展中心"><a href="#方法3：扩展中心" class="headerlink" title="方法3：扩展中心"></a>方法3：扩展中心</h6><p>&emsp;&emsp;我们观察到一个回文串是从一个中心到两边的镜像。所以，回文串可以从一个字符(奇数)或两个字符(偶数)的为中心拓展，它的中心总共有<strong>2n-1</strong>个。以<strong>i</strong>为中心左边为<strong>left</strong>，右边为<strong>right</strong>，先令<strong>left=right=i</strong>，满足<strong>left &gt;= 0 &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right)</strong>时，<strong>left—;right++;</strong>向外拓展，直到结束。回文的长度就是<strong>right - left - 1</strong>。实现如下:<br>Java实现：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法 扩展中心</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">expandAroundCenter</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right)) &#123;</span><br><span class="line">        left--;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome_6</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = expandAroundCenter(s, i, i); <span class="comment">//奇数</span></span><br><span class="line">        <span class="keyword">int</span> len2 = expandAroundCenter(s, i, i + <span class="number">1</span>);<span class="comment">//偶数</span></span><br><span class="line">        <span class="keyword">int</span> len = Math.max(len1, len2);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; end - start) &#123; </span><br><span class="line">              <span class="comment">//重新计算start 和end</span></span><br><span class="line">            start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            end = i + len / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>运行时间如下：<br><a href="https://upload-images.jianshu.io/upload_images/2514354-e4091aede50210c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="image.png" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-e4091aede50210c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="image.png"></a><br>&emsp;&emsp;因为只识别回文序列，过滤掉了很大部分情况，虽然时间复杂度为o(n^2)，但是执行效率更高。<br>时间复杂度：两个嵌套循环，最坏的情况下，O(n^2)<br>空间复杂度：O(1)</p>
<p>参考：<br><a href="https://leetcode.com/problems/longest-palindromic-substring/solution/[](https://leetcode.com/problems/longest-palindromic-substring/solution/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-palindromic-substring/solution/[](https://leetcode.com/problems/longest-palindromic-substring/solution/</a>)<br><a href="http://windliang.cc/2018/08/05/leetCode-5-Longest-Palindromic-Substring/" target="_blank" rel="noopener">http://windliang.cc/2018/08/05/leetCode-5-Longest-Palindromic-Substring/</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 4(Median of Two Sorted Arrays)</title>
    <url>/2018/12/16/LeetCode/leetcode4/</url>
    <content><![CDATA[<h3 id="Median-of-Two-Sorted-Arrays"><a href="#Median-of-Two-Sorted-Arrays" class="headerlink" title="Median of Two Sorted Arrays"></a>Median of Two Sorted Arrays</h3><h5 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h5><p>There are two sorted arrays nums1 and nums2 of size m and n respectively.<br>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).<br>You may assume nums1 and nums2 cannot be both empty.</p>
<p>描述：两个已经排序好的数组，数组不是空，求中位数。要求算法的时间复杂度是O(long(m+n))。<br><a id="more"></a></p>
<h5 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h5><p>1、如果不看时间复杂度的话，可以使用暴力方法实现：把两个数组拼接，然后重新排序，寻找中位数，较为简单，使用Java实现。<br>2、要是考虑复杂度的话，较为困难，后面会用C语言具体分析。</p>
<h4 id="1、Java实现"><a href="#1、Java实现" class="headerlink" title="1、Java实现"></a>1、Java实现</h4><p>内容简单，这里不做解释。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> median = <span class="number">0.0f</span>;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> n = nums2.length;</span><br><span class="line">        <span class="keyword">int</span>[] newNums = Arrays.copyOf(nums1, nums1.length + nums2.length);</span><br><span class="line">        System.arraycopy(nums2, <span class="number">0</span>, newNums, nums1.length, nums2.length);</span><br><span class="line">        Arrays.sort(newNums);</span><br><span class="line">        <span class="keyword">if</span> ((m + n) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            median = (newNums[(m + n) / <span class="number">2</span>] + newNums[(m + n) / <span class="number">2</span> - <span class="number">1</span>]) / <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            median = newNums[(m + n) / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> median;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div></p>
<p>运行时间：<br><a href="https://upload-images.jianshu.io/upload_images/2514354-f9e07f871f62fa22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="image.png" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-f9e07f871f62fa22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="image.png"></a></p>
<p>时间复杂度：主要是Arrays.sort()使用的快排，时间复杂度为O( (n+m)*log(n+m) )</p>
<p>空间复杂度：O(n+m)</p>
<h4 id="2、-C语言实现-1"><a href="#2、-C语言实现-1" class="headerlink" title="2、 C语言实现(1)"></a>2、 C语言实现(1)</h4><p>新建一个长度为 <code>(m+n)/2 +1</code> 的数组<code>newnums</code>，<code>i</code>,<code>j</code>为先指向数组<code>nums1</code> 和<code>mums2</code>的第0个元素,通过<code>i</code>,<code>j</code>的移动把两个源数组的按照升序复制到新数组<code>newnums</code>中。</p>
<ul>
<li><strong>1.</strong> 处理源数组是空的情况，一个如果是空，另一个直接复制数组到<code>newnums</code>中。</li>
<li><p><strong>2.</strong> 两个都不为空，开始循环，循环次数为length/2+1(总长度一半+1)</p>
</li>
<li><p><strong>3.</strong> 控制移动边界<code>i&gt;=num1Size</code>时，<code>nums1</code>到最后一个元素，从<code>nums2</code>赋值，<code>j&gt;=num2Size</code>时，<code>nums2</code>到最后一个元素，从<code>nums1</code>赋值。<br>判断<code>nums1[i] &lt; nums2[j]</code>,每次都把较小的元素赋值到新数组中。</p>
</li>
<li><p><strong>4.</strong>分偶数和奇数判断中位数情况。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span> *nums1, <span class="keyword">int</span> nums1Size, <span class="keyword">int</span> *nums2, <span class="keyword">int</span> nums2Size)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length = nums1Size + nums2Size;</span><br><span class="line">    <span class="keyword">int</span> *newnums = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (length / <span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> median;</span><br><span class="line">    <span class="keyword">if</span> (nums1Size == <span class="number">0</span>) &#123;</span><br><span class="line">        newnums = nums2;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums2Size == <span class="number">0</span>) &#123;</span><br><span class="line">        newnums = nums1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (index &lt;= length / <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= nums1Size) &#123;</span><br><span class="line">                newnums[index] = nums2[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt;= nums2Size) &#123;</span><br><span class="line">                newnums[index] = nums1[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">                    newnums[index] = nums1[i];</span><br><span class="line">                    i++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    newnums[index] = nums2[j];</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        median = (newnums[length / <span class="number">2</span> - <span class="number">1</span>] + newnums[length / <span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        median = newnums[length / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> median;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
<p>运行时间：<br><a href="https://upload-images.jianshu.io/upload_images/2514354-57e074b78efbbd3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="image.png" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-57e074b78efbbd3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="image.png"></a></p>
<p>时间复杂度：O((n+m)/2+1) = O(n)</p>
<p>空间复杂度：O((n+m)/2+1)  = O(n)</p>
<h4 id="3、C语言实现-2"><a href="#3、C语言实现-2" class="headerlink" title="3、C语言实现(2)"></a>3、C语言实现(2)</h4><p>中位数的定义是把一个集合分为左右长度相等的两个子集合，所以我们如果保证两个数组的，左半部分的长度=右半边分长度，就可以找出中位数。<br>这时候要保证:</p>
<blockquote>
<p><strong>len(left_part) = len(right_part)</strong><br><strong>max(left_part) &lt;=min(right_part)</strong></p>
</blockquote>
<p>令</p>
<blockquote>
<p><strong>len(left_part) = i</strong><br>  <strong>len(right_part)) = j</strong><br><strong>i = m - i</strong><br>  <strong>j  = n - j</strong></p>
</blockquote>
<p>因此我们需要确保</p>
<blockquote>
<ul>
<li><strong>i + j = m - i +n - j   (or i + j = m - i + n - j + 1)</strong><br><strong>if m&lt;=n 我们需要设置  i ~(0,m)        ，    j = (m + n + 1)/2 - i</strong></li>
<li><strong>nums2[j−1]≤nums1[i]   和 nums1[i−1]≤nums2[j]</strong></li>
</ul>
</blockquote>
<p>我们需要先确保<code>m&lt;=n</code>，如果<code>m&gt;n</code>时，<code>j</code>可能会<code>小于 0</code>，然后使用二分法查询数组，处理好四种边界问 题<code>i = 0 ，j = 0  ，i = m 或 j = n</code>的情况，具体细节看代码。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span> *nums1, <span class="keyword">int</span> nums1Size, <span class="keyword">int</span> *nums2, <span class="keyword">int</span> nums2Size)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m = nums1Size;</span><br><span class="line">    <span class="keyword">int</span> n = nums2Size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m &gt; n) &#123; <span class="comment">// to ensure m&lt;=n</span></span><br><span class="line">        <span class="keyword">int</span> *temp = nums1;</span><br><span class="line">        nums1 = nums2;</span><br><span class="line">        nums2 = temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> tmp = m;</span><br><span class="line">        m = n;</span><br><span class="line">        n = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> iMin = <span class="number">0</span>, iMax = m, halfLen = (m + n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (iMin &lt;= iMax) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = (iMin + iMax) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> j = halfLen - i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; iMax &amp;&amp; nums2[j - <span class="number">1</span>] &gt; nums1[i]) &#123;</span><br><span class="line">            iMin = i + <span class="number">1</span>; <span class="comment">// i is too small</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; iMin &amp;&amp; nums1[i - <span class="number">1</span>] &gt; nums2[j]) &#123;</span><br><span class="line"></span><br><span class="line">            iMax = i - <span class="number">1</span>; <span class="comment">// i is too big</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// i is perfect</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> maxLeft = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                maxLeft = nums2[j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                maxLeft = nums1[i - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxLeft = nums1[i - <span class="number">1</span>] &gt; nums2[j - <span class="number">1</span>] ? nums1[i - <span class="number">1</span>] : nums2[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((m + n) % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> maxLeft;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> minRight = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == m) &#123;</span><br><span class="line">                minRight = nums2[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">                minRight = nums1[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                minRight = nums2[j] &gt; nums1[i] ? nums1[i] : nums2[j];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (maxLeft + minRight) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>耗时如图：<br><a href="https://upload-images.jianshu.io/upload_images/2514354-52b8e9ba6a5ef87a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="image.png" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-52b8e9ba6a5ef87a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="image.png"></a></p>
<p>还是比较不错的。<br>时间复杂度：O(log(min(m,n))).<br>空间复杂度：O(1)</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 3(Longest Substring)</title>
    <url>/2018/12/16/LeetCode/leetcode3/</url>
    <content><![CDATA[<h3 id="Longest-Substring-Without-Repeating-Characters"><a href="#Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Longest Substring Without Repeating Characters"></a>Longest Substring Without Repeating Characters</h3><div class="note info">
            <p>题目描述 </p>
          </div>
<p>Given a string, find the length of the longest substring without repeating characters.</p>
<a id="more"></a>
<p>Example 1:</p>
<p>Input: “abcabcbb”<br>Output: 3<br>Explanation: The answer is “abc”, with the length of 3. </p>
<p>简述：统计字符串不重复字符最长子串的长度。</p>
<blockquote>
<p>C语言实现</p>
</blockquote>
<p>使用两个下标<code>i</code>，<code>index</code>。<code>i</code>作为字符串的下标，依次往下移动。<code>index</code>为子串的下标往右移动。<code>index+i</code>是在母串移动的位置。<br>初始化子串<code>p</code>比母串大1，不然有的编译器报越界。<code>每次赋值后给下一位赋值&#39;\0&#39;</code>，<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isInclude</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">char</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*s != <span class="string">'\0'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*s == a) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (*s != <span class="string">'\0'</span>) &#123;</span><br><span class="line">        *s = <span class="string">'\0'</span>;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> p[<span class="built_in">strlen</span>(s) &gt; <span class="number">0</span> ? <span class="built_in">strlen</span>(s)+<span class="number">1</span> : <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (s[i] != <span class="string">'\0'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isInclude(p, s[i + index])) &#123;</span><br><span class="line">            p[index] = s[i + index];</span><br><span class="line">            p[index+<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">            index++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (index &gt;= max) &#123;</span><br><span class="line">                max = index;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (s[index + i] == <span class="string">'\0'</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            clear(p);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *s = <span class="string">"vfqsrebtogjmcanajfyzvypzibtngtrca"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length = lengthOfLongestSubstring(s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"LongestLength=%d\n"</span>, length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>因为C语言没有现成使用的集合类，如（Map,Set），书写起来较为复杂。算法复杂度也挺高。下图为执行耗时，比较不理想。<br><a href="https://upload-images.jianshu.io/upload_images/2514354-185fd5f94a0f0489.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-fancybox="group" data-caption="image.png" class="fancybox"><img src="https://upload-images.jianshu.io/upload_images/2514354-185fd5f94a0f0489.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="image.png"></a></p>
<p>时间复杂度：</p>
<p>遍历母串加子串移动n<em>(n-1)  ，找到一个字符需要从头查找比对。最坏情况为，n</em>(n-1)*n ，时间复杂度O(n^3)</p>
<p>空间复杂度：<br>O(n)+1</p>
<blockquote>
<p>Java实现（使用Set实现）</p>
</blockquote>
<p>通过集合Set的特性集合中不能出现重复值，检测子串在Set中是否存在，存在的话把集合里面连同本身及之前的元素全部去掉。这种方式被称为SLIDING WINDOW(滑动窗口)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最初实现</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring_2</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">       Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (i &lt; s.length() &amp;&amp; j &lt; s.length()) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (!set.contains(s.charAt(j))) &#123;</span><br><span class="line">               set.add(s.charAt(j++));</span><br><span class="line">               max = Math.max(max, j - i);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               set.remove(s.charAt(i++));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> max;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>
<p>执行流程如下：<code>String s = &quot;abcaea&quot;</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">i</th>
<th style="text-align:center">set</th>
<th style="text-align:center">j</th>
<th style="text-align:center">max</th>
<th style="text-align:center">j - i</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">a</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">a,b</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">a,b,c</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">b,c</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">b,c,a</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">b,c,a,e</td>
<td style="text-align:center">5</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">c,a,e</td>
<td style="text-align:center">5</td>
<td style="text-align:center">4</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">a,e</td>
<td style="text-align:center">5</td>
<td style="text-align:center">4</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">e</td>
<td style="text-align:center">5</td>
<td style="text-align:center">4</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">ea</td>
<td style="text-align:center">6</td>
<td style="text-align:center">4</td>
<td style="text-align:center">2</td>
</tr>
</tbody>
</table>
</div>
<p>算法复杂度  O(2n)  =O(n)<br>空间复杂度  O(n)</p>
<blockquote>
<p>Java实现(HashMap 优化) </p>
</blockquote>
<p>使用HashMap自动覆盖重复的key相同的value，记录下每个字符在字符串中出现的最后位置。使用<code>i</code>记录不重复字符子串的起点，<code>j-i-1</code>表示字符串的长度。出现重复字符是更新<code>i</code>的位置。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HashMap</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring_3</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,j=<span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (map.containsKey(s.charAt(j)))&#123;</span><br><span class="line">               i = Math.max(map.get(s.charAt(j)),i);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           max = Math.max(max, j - i + <span class="number">1</span>);</span><br><span class="line">           map.put(s.charAt(j), j + <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> max;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>
<p>时间复杂度：O(n)<br>空间复杂度：O(n)<br>效率比HashSet快的原因是，没有对字符移除的操作，并且HashMap的查询速率把HashSet更快。</p>
<blockquote>
<p>Java实现 (使用ASCII 128）</p>
</blockquote>
<p>标准ASCll表示从0-127表示128个字符，通过字符代表ASCll值字符位置，数组中存储的是每个字符在字符串中出现的最后位置。是对HashMap实现的优化。因为没有了查询耗时，这种的执行效率最好。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring_4</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">int</span> n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span>[] index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>]; <span class="comment">// current index of character</span></span><br><span class="line">       <span class="comment">// try to extend the range [i, j]</span></span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">           i = Math.max(index[s.charAt(j)], i);</span><br><span class="line">           ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">           index[s.charAt(j)] = j + <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> ans;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>
<p>时间复杂度：O(n)<br>空间复杂度：O(n)</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2(Add Two Numbers)</title>
    <url>/2018/12/16/LeetCode/leetcode2/</url>
    <content><![CDATA[<h3 id="Add-Two-Numbers"><a href="#Add-Two-Numbers" class="headerlink" title="Add Two Numbers"></a>Add Two Numbers</h3><div class="note info">
            <p>题目描述 </p>
          </div>
<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.<br><a id="more"></a><br>Example:</p>
<p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8<br>Explanation: 342 + 465 = 807.</p>
<p>简单描述：两个链表按顺序相加，大于10的取10的余数(<code>%10</code>),向下位进1。</p>
<h6 id="注意点：当最后一个节点的和大于等于10时，需要增加一个节点。"><a href="#注意点：当最后一个节点的和大于等于10时，需要增加一个节点。" class="headerlink" title="注意点：当最后一个节点的和大于等于10时，需要增加一个节点。"></a>注意点：当最后一个节点的和大于等于10时，需要增加一个节点。</h6><blockquote>
<p>C语言<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line"> 	<span class="keyword">int</span> val;</span><br><span class="line"> 	<span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建NULL节点 </span></span><br><span class="line"><span class="function">struct ListNode* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">newListNode</span> = <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">ListNode</span>));</span></span><br><span class="line">	<span class="keyword">if</span>(newListNode==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	newListNode-&gt;val = a;</span><br><span class="line">	newListNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> newListNode; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建 指定长度和数据的链表 </span></span><br><span class="line"><span class="function">struct ListNode* <span class="title">createListNode</span><span class="params">(<span class="keyword">long</span> <span class="built_in">array</span>[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">head</span>,*<span class="title">p</span>;</span></span><br><span class="line">	head = p = newNode(<span class="built_in">array</span>[<span class="number">0</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">		p-&gt;next = newNode(<span class="built_in">array</span>[i]);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode* <span class="title">addTwoNumbers</span><span class="params">(struct ListNode* l1, struct ListNode* l2)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> * <span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line">    p1 = l1;</span><br><span class="line">    p2 = l2;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">head</span>;</span></span><br><span class="line">    head = (struct ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode));</span><br><span class="line"> 	<span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">p3</span> = <span class="title">head</span>;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span>  t =<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p1!=<span class="literal">NULL</span> || p2!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"></span><br><span class="line">    	<span class="keyword">int</span> a1 = p1!=<span class="literal">NULL</span>? p1-&gt;val : <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">int</span> a2 = p2!=<span class="literal">NULL</span>? p2-&gt;val : <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> sum = a1+a2+t;</span><br><span class="line">    	t = sum/<span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">    	p3-&gt;next = (struct ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode));</span><br><span class="line">    	p3 = p3-&gt;next;</span><br><span class="line">		p3-&gt;val = sum%<span class="number">10</span>;</span><br><span class="line">		</span><br><span class="line">    	<span class="keyword">if</span>(p1!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    		p1 = p1-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">    	<span class="keyword">if</span>(p2!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    		p2 = p2-&gt;next; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(t&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		p3-&gt;next = (struct ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode)); </span><br><span class="line">		p3 = p3-&gt;next;</span><br><span class="line">		p3-&gt;val = t;</span><br><span class="line">	&#125;</span><br><span class="line">	p3-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">l1</span>,*<span class="title">l2</span>;</span></span><br><span class="line"><span class="comment">//	int a1[] = &#123;2,4,3&#125;;</span></span><br><span class="line"><span class="comment">//	int a2[] = &#123;5,6,4&#125;;</span></span><br><span class="line"><span class="comment">//	l1 = createListNode(a1,3);</span></span><br><span class="line"><span class="comment">//	l2 = createListNode(a2,3);</span></span><br><span class="line"><span class="comment">//	long a1[] = &#123;9&#125;;</span></span><br><span class="line"><span class="comment">//	long a2[] = &#123;1,9,9,9,9,9,9,9,9,9&#125;;</span></span><br><span class="line"><span class="comment">//	l1 = createListNode(a1,1);</span></span><br><span class="line"><span class="comment">//	l2 = createListNode(a2,10);</span></span><br><span class="line">	<span class="keyword">long</span> a1[] = &#123;<span class="number">5</span>&#125;;</span><br><span class="line">	<span class="keyword">long</span> a2[] = &#123;<span class="number">5</span>&#125;;</span><br><span class="line">	l1 = createListNode(a1,<span class="number">1</span>);</span><br><span class="line">	l2 = createListNode(a2,<span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p</span> = <span class="title">addTwoNumbers</span>(<span class="title">l1</span>,<span class="title">l2</span>);</span> </span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"-&gt;%d"</span>,p-&gt;val);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<p>复杂度分析：</p>
</blockquote>
<p>时间复杂度：O(max(m,n))， 只有一个while语句，传入的2个链表的最大长度决定循环的次数。</p>
<p>空间复杂度：O(max(m,n))，传入的2个链表的最大空间决定新建链表的最大空间，如果最后节点和大于等于10，空间复杂度为O(max(m,n))+1。</p>
<blockquote>
<p>Java实现</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> val;</span><br><span class="line">      ListNode next;</span><br><span class="line">      ListNode(<span class="keyword">int</span> x) &#123; </span><br><span class="line">            val = x;</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode head= <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode p = l1, q = l2, curr = head;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span> || q != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = (p != <span class="keyword">null</span>) ? p.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y = (q != <span class="keyword">null</span>) ? q.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = carry + x + y;</span><br><span class="line">        carry = sum / <span class="number">10</span>;</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>) p = p.next;</span><br><span class="line">        <span class="keyword">if</span> (q != <span class="keyword">null</span>) q = q.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>Java版和C语言版基本一样。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1(Two Sum)</title>
    <url>/2018/12/16/LeetCode/leetcode1/</url>
    <content><![CDATA[<h3 id="Two-Sum"><a href="#Two-Sum" class="headerlink" title="Two Sum"></a>Two Sum</h3><div class="note info">
            <p>题目描述 (md partial supported) </p>
          </div>
<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<a id="more"></a>
<p>Example:</p>
<p>Given nums = [2, 7, 11, 15], target = 9,</p>
<p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>
<blockquote>
<p>C语言实现</p>
</blockquote>
<p>通过最简单的方式，两个下标，先保持一个下标<code>i</code>不动，另一个下标<code>j</code>从第一个下标后一个开始移动，<code>j</code>移动到最后一个后，开始移动第一个下标<code>i</code>。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//时间复杂度 O(n^2) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">twoSum</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> * indices = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;           </span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;      </span><br><span class="line">            <span class="keyword">if</span>(nums[i]+nums[j] == target)&#123;</span><br><span class="line">                *indices = i;</span><br><span class="line">                *(indices+<span class="number">1</span>)= j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indices;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">5</span>] = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> *p = twoSum(a,<span class="number">5</span>,<span class="number">9</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,*(p+i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<blockquote>
<p>Java实现(优化过)</p>
</blockquote>
<p>使用<code>Map</code>集合，<code>Map</code>里存储目标值与数组值之差<code>target-num[i]</code> 和 下标 <code>i</code>，然后判断<code>num[i]</code>是否在Map的key中，不在时继续存储，在时就是所找目标值。<br>这种方式时间复杂度为O(n)，执行效率大大提高。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">One</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        One one = <span class="keyword">new</span> One();</span><br><span class="line">        <span class="keyword">int</span>[] array = one.twoSum(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>&#125;,<span class="number">10</span>);</span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(nums[i]))&#123;</span><br><span class="line">                map.put(target-nums[i],i);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,map.get(nums[i])&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"no exist"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/12/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
